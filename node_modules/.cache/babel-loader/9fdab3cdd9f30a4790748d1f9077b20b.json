{"ast":null,"code":"import { toast } from 'react-toastify';\nimport { formatToDate, getExaminationError, getQuarantineError } from 'app/utils/helpers';\nimport httpClient from 'app/utils/http-client';\nimport types, { SHOW_CONFIRM_MODAL, SHOW_FORWARD_MODAL, SHOW_INFO_MODAL, SHOW_ERROR_MODAL, TRIGGER_SIDEBAR_OPEN, TRIGGER_TREE_FOLDER_OPEN } from './types';\nconst triggerSidebarOpen = () => ({\n  type: TRIGGER_SIDEBAR_OPEN\n});\nconst showConfirmModal = (message, confirmCallback) => ({\n  type: SHOW_CONFIRM_MODAL,\n  payload: {\n    message,\n    confirmCallback\n  }\n});\nconst showInfoModal = (header, content, infoCallback) => ({\n  type: SHOW_INFO_MODAL,\n  payload: {\n    header,\n    content,\n    infoCallback\n  }\n});\nconst showErrorModal = (header, successList, failLogs) => ({\n  type: SHOW_ERROR_MODAL,\n  payload: {\n    header,\n    successList,\n    failLogs\n  }\n});\nconst showForwardModal = (message, confirmCallback) => ({\n  type: SHOW_FORWARD_MODAL,\n  payload: {\n    message,\n    confirmCallback\n  }\n});\nconst triggerTreeFolderOpen = () => ({\n  type: TRIGGER_TREE_FOLDER_OPEN\n});\nconst importRequest = () => ({\n  type: types.IMPORT_REQUEST\n});\nconst importSuccess = response => ({\n  type: types.IMPORT_SUCCESS,\n  payload: response\n});\nconst importFailure = error => ({\n  type: types.IMPORT_FAILURE,\n  payload: error\n});\nconst importExcel = _ref => {\n  let {\n    method = 'PUT',\n    url,\n    formData,\n    params,\n    isExamination,\n    isQuarantine\n  } = _ref;\n  return dispatch => new Promise((resolve, reject) => {\n    dispatch(importRequest());\n    httpClient.callApi({\n      method,\n      contentType: 'application/x-www-form-urlencoded',\n      url,\n      data: formData,\n      params\n    }).then(response => {\n      if (isExamination) {\n        var _response$data;\n        if (((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.failed.length) > 0) {\n          var _response$data$comple, _response$data2, _response$data$failed, _response$data3;\n          dispatch(showErrorModal('Import logs', (_response$data$comple = (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.completed) !== null && _response$data$comple !== void 0 ? _response$data$comple : [], (_response$data$failed = (_response$data3 = response.data) === null || _response$data3 === void 0 ? void 0 : _response$data3.failed) !== null && _response$data$failed !== void 0 ? _response$data$failed : []));\n        }\n      }\n      dispatch(importSuccess(response.data));\n      resolve(response.data);\n    }).catch(error => {\n      if (isExamination) {\n        var _error$response;\n        toast.warn(getExaminationError((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data));\n      }\n      if (isQuarantine) {\n        var _error$response2;\n        toast.warn(getQuarantineError((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data));\n      } else {\n        toast.warn('Import không thành công');\n      }\n      dispatch(importFailure(error));\n      reject();\n    });\n  });\n};\nconst exportRequest = () => ({\n  type: types.EXPORT_REQUEST\n});\nconst exportSuccess = response => ({\n  type: types.EXPORT_SUCCESS,\n  payload: response\n});\nconst exportFailure = error => ({\n  type: types.EXPORT_FAILURE,\n  payload: error\n});\nconst exportExcel = _ref2 => {\n  let {\n    method,\n    url,\n    data,\n    params,\n    fileName = '',\n    isExamination,\n    isQuarantine\n  } = _ref2;\n  return dispatch => new Promise((resolve, reject) => {\n    dispatch(exportRequest());\n    httpClient.callApi({\n      method,\n      responseType: 'blob',\n      url,\n      data,\n      params\n    }).then(response => {\n      dispatch(exportSuccess(response.data));\n      const tempUrl = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = tempUrl;\n      link.setAttribute('download', `${fileName} ${formatToDate(new Date())}.xlsx`);\n      document.body.appendChild(link);\n      link.click();\n      resolve(response.data);\n    }).catch(error => {\n      if (isExamination) {\n        var _error$response3;\n        toast.warn(getExaminationError((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data));\n      }\n      if (isQuarantine) {\n        var _error$response4;\n        toast.warn(getQuarantineError((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data));\n      } else {\n        toast.warn('Export không thành công');\n      }\n      dispatch(exportFailure(error));\n      reject();\n    });\n  });\n};\nexport { showConfirmModal, showInfoModal, showForwardModal, showErrorModal, triggerSidebarOpen, triggerTreeFolderOpen, importExcel, exportExcel };","map":{"version":3,"names":["toast","formatToDate","getExaminationError","getQuarantineError","httpClient","types","SHOW_CONFIRM_MODAL","SHOW_FORWARD_MODAL","SHOW_INFO_MODAL","SHOW_ERROR_MODAL","TRIGGER_SIDEBAR_OPEN","TRIGGER_TREE_FOLDER_OPEN","triggerSidebarOpen","type","showConfirmModal","message","confirmCallback","payload","showInfoModal","header","content","infoCallback","showErrorModal","successList","failLogs","showForwardModal","triggerTreeFolderOpen","importRequest","IMPORT_REQUEST","importSuccess","response","IMPORT_SUCCESS","importFailure","error","IMPORT_FAILURE","importExcel","_ref","method","url","formData","params","isExamination","isQuarantine","dispatch","Promise","resolve","reject","callApi","contentType","data","then","_response$data","failed","length","_response$data$comple","_response$data2","_response$data$failed","_response$data3","completed","catch","_error$response","warn","_error$response2","exportRequest","EXPORT_REQUEST","exportSuccess","EXPORT_SUCCESS","exportFailure","EXPORT_FAILURE","exportExcel","_ref2","fileName","responseType","tempUrl","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","Date","body","appendChild","click","_error$response3","_error$response4"],"sources":["H:/BAKCO/pj/cds/src/app/actions/global.js"],"sourcesContent":["import { toast } from 'react-toastify';\n\nimport {\n  formatToDate,\n  getExaminationError,\n  getQuarantineError,\n} from 'app/utils/helpers';\nimport httpClient from 'app/utils/http-client';\n\nimport types, {\n  SHOW_CONFIRM_MODAL,\n  SHOW_FORWARD_MODAL,\n  SHOW_INFO_MODAL,\n  SHOW_ERROR_MODAL,\n  TRIGGER_SIDEBAR_OPEN,\n  TRIGGER_TREE_FOLDER_OPEN,\n} from './types';\n\nconst triggerSidebarOpen = () => ({ type: TRIGGER_SIDEBAR_OPEN });\nconst showConfirmModal = (message, confirmCallback) => ({\n  type: SHOW_CONFIRM_MODAL,\n  payload: { message, confirmCallback },\n});\nconst showInfoModal = (header, content, infoCallback) => ({\n  type: SHOW_INFO_MODAL,\n  payload: { header, content, infoCallback },\n});\nconst showErrorModal = (header, successList, failLogs) => ({\n  type: SHOW_ERROR_MODAL,\n  payload: { header, successList, failLogs },\n});\nconst showForwardModal = (message, confirmCallback) => ({\n  type: SHOW_FORWARD_MODAL,\n  payload: { message, confirmCallback },\n});\nconst triggerTreeFolderOpen = () => ({\n  type: TRIGGER_TREE_FOLDER_OPEN,\n});\n\nconst importRequest = () => ({\n  type: types.IMPORT_REQUEST,\n});\nconst importSuccess = (response) => ({\n  type: types.IMPORT_SUCCESS,\n  payload: response,\n});\nconst importFailure = (error) => ({\n  type: types.IMPORT_FAILURE,\n  payload: error,\n});\nconst importExcel =\n  ({ method = 'PUT', url, formData, params, isExamination, isQuarantine }) =>\n  (dispatch) =>\n    new Promise((resolve, reject) => {\n      dispatch(importRequest());\n      httpClient\n        .callApi({\n          method,\n          contentType: 'application/x-www-form-urlencoded',\n          url,\n          data: formData,\n          params,\n        })\n        .then((response) => {\n          if (isExamination) {\n            if (response.data?.failed.length > 0) {\n              dispatch(\n                showErrorModal(\n                  'Import logs',\n                  response.data?.completed ?? [],\n                  response.data?.failed ?? [],\n                ),\n              );\n            }\n          }\n          dispatch(importSuccess(response.data));\n          resolve(response.data);\n        })\n        .catch((error) => {\n          if (isExamination) {\n            toast.warn(getExaminationError(error.response?.data));\n          }\n          if (isQuarantine) {\n            toast.warn(getQuarantineError(error.response?.data));\n          } else {\n            toast.warn('Import không thành công');\n          }\n          dispatch(importFailure(error));\n          reject();\n        });\n    });\n\nconst exportRequest = () => ({\n  type: types.EXPORT_REQUEST,\n});\nconst exportSuccess = (response) => ({\n  type: types.EXPORT_SUCCESS,\n  payload: response,\n});\nconst exportFailure = (error) => ({\n  type: types.EXPORT_FAILURE,\n  payload: error,\n});\nconst exportExcel =\n  ({ method, url, data, params, fileName = '', isExamination, isQuarantine }) =>\n  (dispatch) =>\n    new Promise((resolve, reject) => {\n      dispatch(exportRequest());\n      httpClient\n        .callApi({\n          method,\n          responseType: 'blob',\n          url,\n          data,\n          params,\n        })\n        .then((response) => {\n          dispatch(exportSuccess(response.data));\n          const tempUrl = window.URL.createObjectURL(new Blob([response.data]));\n          const link = document.createElement('a');\n          link.href = tempUrl;\n          link.setAttribute(\n            'download',\n            `${fileName} ${formatToDate(new Date())}.xlsx`,\n          );\n          document.body.appendChild(link);\n          link.click();\n          resolve(response.data);\n        })\n        .catch((error) => {\n          if (isExamination) {\n            toast.warn(getExaminationError(error.response?.data));\n          }\n          if (isQuarantine) {\n            toast.warn(getQuarantineError(error.response?.data));\n          } else {\n            toast.warn('Export không thành công');\n          }\n          dispatch(exportFailure(error));\n          reject();\n        });\n    });\n\nexport {\n  showConfirmModal,\n  showInfoModal,\n  showForwardModal,\n  showErrorModal,\n  triggerSidebarOpen,\n  triggerTreeFolderOpen,\n  importExcel,\n  exportExcel,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}