{"ast":null,"code":"import { toast } from 'react-toastify';\nimport httpClient from 'app/utils/http-client';\nimport apiLinks from 'app/utils/api-links';\nimport { announceTreatmentError } from 'treatment/utils/helpers';\nimport types from './types';\nconst getAlreadyInWaitingListRequest = () => ({\n  type: types.GET_ALREADY_IN_WAITINGLIST_REQUEST\n});\nconst getAlreadyInWaitingListSuccess = response => ({\n  type: types.GET_ALREADY_IN_WAITINGLIST_SUCCESS,\n  payload: response\n});\nconst getAlreadyInWaitingListFailure = error => ({\n  type: types.GET_ALREADY_IN_WAITINGLIST_FAILURE,\n  payload: error\n});\nconst getAlreadyInWaitingList = _ref => {\n  let {\n    profileIds\n  } = _ref;\n  return dispatch => new Promise((resolve, reject) => {\n    dispatch(getAlreadyInWaitingListRequest());\n    httpClient.callApi({\n      url: `${apiLinks.treatment.waitingList.get}${profileIds.map(id => `profileIds${id}`).join('&')}`\n    }).then(response => {\n      dispatch(getAlreadyInWaitingListSuccess(response.data));\n      resolve();\n    }).catch(error => {\n      dispatch(getAlreadyInWaitingListFailure(error));\n      reject();\n    });\n  });\n};\nconst getWaitingListByFacilityRequest = () => ({\n  type: types.GET_WAITINGLIST_BY_FACILITY_REQUEST\n});\nconst getWaitingListByFacilitySuccess = response => ({\n  type: types.GET_WAITINGLIST_BY_FACILITY_SUCCESS,\n  payload: response\n});\nconst getWaitingListByFacilityFailure = error => ({\n  type: types.GET_WAITINGLIST_BY_FACILITY_FAILURE,\n  payload: error\n});\nconst getWaitingListByFacility = arg => dispatch => new Promise((resolve, reject) => {\n  dispatch(getWaitingListByFacilityRequest());\n  httpClient.callApi({\n    url: apiLinks.treatment.waitingList.getByFacility,\n    params: {\n      ...arg\n    }\n  }).then(response => {\n    dispatch(getWaitingListByFacilitySuccess(response.data));\n    resolve();\n  }).catch(error => {\n    dispatch(getWaitingListByFacilityFailure(error));\n    reject();\n  });\n});\nconst addProfileToWaitingListRequest = () => ({\n  type: types.WAITING_LIST_ADD_PROFILES_REQUEST\n});\nconst addProfileToWaitingListSuccess = response => ({\n  type: types.WAITING_LIST_ADD_PROFILES_SUCCESS,\n  payload: response\n});\nconst addProfileToWaitingListFailure = error => ({\n  type: types.WAITING_LIST_ADD_PROFILES_FAILURE,\n  payload: error\n});\nconst addProfileToWaitingList = data => dispatch => new Promise((resolve, reject) => {\n  dispatch(addProfileToWaitingListRequest());\n  httpClient.callApi({\n    method: 'POST',\n    url: apiLinks.treatment.waitingList.create,\n    data\n  }).then(response => {\n    dispatch(addProfileToWaitingListSuccess(response));\n    toast.success('Thành công');\n    resolve();\n  }).catch(error => {\n    announceTreatmentError(error);\n    dispatch(addProfileToWaitingListFailure(error));\n    reject();\n  });\n});\nconst approveWaitingListRequest = () => ({\n  type: types.WAITINGLIST_APPROVE_REQUEST\n});\nconst approveWaitingListSuccess = response => ({\n  type: types.WAITINGLIST_APPROVE_SUCCESS,\n  payload: response\n});\nconst approveWaitingListFailure = error => ({\n  type: types.WAITINGLIST_APPROVE_FAILURE,\n  payload: error\n});\nconst approveWaitingList = data => dispatch => new Promise((resolve, reject) => {\n  dispatch(approveWaitingListRequest());\n  httpClient.callApi({\n    method: 'POST',\n    url: apiLinks.treatment.waitingList.approve,\n    data\n  }).then(response => {\n    dispatch(approveWaitingListSuccess(response));\n    toast.success('Thành công');\n    resolve();\n  }).catch(error => {\n    announceTreatmentError(error);\n    dispatch(approveWaitingListFailure(error));\n    reject();\n  });\n});\nexport { getAlreadyInWaitingList, getWaitingListByFacility, addProfileToWaitingList, approveWaitingList };","map":{"version":3,"names":["toast","httpClient","apiLinks","announceTreatmentError","types","getAlreadyInWaitingListRequest","type","GET_ALREADY_IN_WAITINGLIST_REQUEST","getAlreadyInWaitingListSuccess","response","GET_ALREADY_IN_WAITINGLIST_SUCCESS","payload","getAlreadyInWaitingListFailure","error","GET_ALREADY_IN_WAITINGLIST_FAILURE","getAlreadyInWaitingList","_ref","profileIds","dispatch","Promise","resolve","reject","callApi","url","treatment","waitingList","get","map","id","join","then","data","catch","getWaitingListByFacilityRequest","GET_WAITINGLIST_BY_FACILITY_REQUEST","getWaitingListByFacilitySuccess","GET_WAITINGLIST_BY_FACILITY_SUCCESS","getWaitingListByFacilityFailure","GET_WAITINGLIST_BY_FACILITY_FAILURE","getWaitingListByFacility","arg","getByFacility","params","addProfileToWaitingListRequest","WAITING_LIST_ADD_PROFILES_REQUEST","addProfileToWaitingListSuccess","WAITING_LIST_ADD_PROFILES_SUCCESS","addProfileToWaitingListFailure","WAITING_LIST_ADD_PROFILES_FAILURE","addProfileToWaitingList","method","create","success","approveWaitingListRequest","WAITINGLIST_APPROVE_REQUEST","approveWaitingListSuccess","WAITINGLIST_APPROVE_SUCCESS","approveWaitingListFailure","WAITINGLIST_APPROVE_FAILURE","approveWaitingList","approve"],"sources":["H:/BAKCO/pj/cds/src/treatment/actions/waiting-list.js"],"sourcesContent":["import { toast } from 'react-toastify';\n\nimport httpClient from 'app/utils/http-client';\nimport apiLinks from 'app/utils/api-links';\n\nimport { announceTreatmentError } from 'treatment/utils/helpers';\n\nimport types from './types';\n\nconst getAlreadyInWaitingListRequest = () => ({\n  type: types.GET_ALREADY_IN_WAITINGLIST_REQUEST,\n});\nconst getAlreadyInWaitingListSuccess = (response) => ({\n  type: types.GET_ALREADY_IN_WAITINGLIST_SUCCESS,\n  payload: response,\n});\nconst getAlreadyInWaitingListFailure = (error) => ({\n  type: types.GET_ALREADY_IN_WAITINGLIST_FAILURE,\n  payload: error,\n});\n\nconst getAlreadyInWaitingList =\n  ({ profileIds }) =>\n  (dispatch) =>\n    new Promise((resolve, reject) => {\n      dispatch(getAlreadyInWaitingListRequest());\n      httpClient\n        .callApi({\n          url: `${apiLinks.treatment.waitingList.get}${profileIds\n            .map((id) => `profileIds${id}`)\n            .join('&')}`,\n        })\n        .then((response) => {\n          dispatch(getAlreadyInWaitingListSuccess(response.data));\n          resolve();\n        })\n        .catch((error) => {\n          dispatch(getAlreadyInWaitingListFailure(error));\n          reject();\n        });\n    });\n\nconst getWaitingListByFacilityRequest = () => ({\n  type: types.GET_WAITINGLIST_BY_FACILITY_REQUEST,\n});\nconst getWaitingListByFacilitySuccess = (response) => ({\n  type: types.GET_WAITINGLIST_BY_FACILITY_SUCCESS,\n  payload: response,\n});\nconst getWaitingListByFacilityFailure = (error) => ({\n  type: types.GET_WAITINGLIST_BY_FACILITY_FAILURE,\n  payload: error,\n});\n\nconst getWaitingListByFacility = (arg) => (dispatch) =>\n  new Promise((resolve, reject) => {\n    dispatch(getWaitingListByFacilityRequest());\n    httpClient\n      .callApi({\n        url: apiLinks.treatment.waitingList.getByFacility,\n        params: { ...arg },\n      })\n      .then((response) => {\n        dispatch(getWaitingListByFacilitySuccess(response.data));\n        resolve();\n      })\n      .catch((error) => {\n        dispatch(getWaitingListByFacilityFailure(error));\n        reject();\n      });\n  });\n\nconst addProfileToWaitingListRequest = () => ({\n  type: types.WAITING_LIST_ADD_PROFILES_REQUEST,\n});\nconst addProfileToWaitingListSuccess = (response) => ({\n  type: types.WAITING_LIST_ADD_PROFILES_SUCCESS,\n  payload: response,\n});\nconst addProfileToWaitingListFailure = (error) => ({\n  type: types.WAITING_LIST_ADD_PROFILES_FAILURE,\n  payload: error,\n});\n\nconst addProfileToWaitingList = (data) => (dispatch) =>\n  new Promise((resolve, reject) => {\n    dispatch(addProfileToWaitingListRequest());\n    httpClient\n      .callApi({\n        method: 'POST',\n        url: apiLinks.treatment.waitingList.create,\n        data,\n      })\n      .then((response) => {\n        dispatch(addProfileToWaitingListSuccess(response));\n        toast.success('Thành công');\n        resolve();\n      })\n      .catch((error) => {\n        announceTreatmentError(error);\n        dispatch(addProfileToWaitingListFailure(error));\n        reject();\n      });\n  });\n\nconst approveWaitingListRequest = () => ({\n  type: types.WAITINGLIST_APPROVE_REQUEST,\n});\nconst approveWaitingListSuccess = (response) => ({\n  type: types.WAITINGLIST_APPROVE_SUCCESS,\n  payload: response,\n});\nconst approveWaitingListFailure = (error) => ({\n  type: types.WAITINGLIST_APPROVE_FAILURE,\n  payload: error,\n});\n\nconst approveWaitingList = (data) => (dispatch) =>\n  new Promise((resolve, reject) => {\n    dispatch(approveWaitingListRequest());\n    httpClient\n      .callApi({\n        method: 'POST',\n        url: apiLinks.treatment.waitingList.approve,\n        data,\n      })\n      .then((response) => {\n        dispatch(approveWaitingListSuccess(response));\n        toast.success('Thành công');\n        resolve();\n      })\n      .catch((error) => {\n        announceTreatmentError(error);\n        dispatch(approveWaitingListFailure(error));\n        reject();\n      });\n  });\n\nexport {\n  getAlreadyInWaitingList,\n  getWaitingListByFacility,\n  addProfileToWaitingList,\n  approveWaitingList,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}