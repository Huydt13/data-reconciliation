{"ast":null,"code":"import httpClient from 'app/utils/http-client';\nimport apiLinks from 'app/utils/api-links';\nimport types from './types';\nconst getQuarantineStatistic1Request = () => ({\n  type: types.GET_QUARANTINE_STATISTIC_1_REQUEST\n});\nconst getQuarantineStatistic1Success = response => ({\n  type: types.GET_QUARANTINE_STATISTIC_1_SUCCESS,\n  payload: response\n});\nconst getQuarantineStatistic1Failure = error => ({\n  type: types.GET_QUARANTINE_STATISTIC_1_FAILURE,\n  payload: error\n});\nconst getQuarantineStatistic1 = () => dispatch => new Promise((resolve, reject) => {\n  dispatch(getQuarantineStatistic1Request());\n  httpClient.callApi({\n    url: apiLinks.facilities.quarantineFacilities.statistic1\n  }).then(response => {\n    dispatch(getQuarantineStatistic1Success(response.data));\n    resolve();\n  }).catch(error => {\n    dispatch(getQuarantineStatistic1Failure(error));\n    reject();\n  });\n});\nconst getQuarantineStatistic2Request = () => ({\n  type: types.GET_QUARANTINE_STATISTIC_2_REQUEST\n});\nconst getQuarantineStatistic2Success = response => ({\n  type: types.GET_QUARANTINE_STATISTIC_2_SUCCESS,\n  payload: response\n});\nconst getQuarantineStatistic2Failure = error => ({\n  type: types.GET_QUARANTINE_STATISTIC_2_FAILURE,\n  payload: error\n});\nconst getQuarantineStatistic2 = () => dispatch => new Promise((resolve, reject) => {\n  dispatch(getQuarantineStatistic2Request());\n  httpClient.callApi({\n    url: apiLinks.facilities.quarantineFacilities.statistic2\n  }).then(response => {\n    dispatch(getQuarantineStatistic2Success(response.data));\n    resolve();\n  }).catch(error => {\n    dispatch(getQuarantineStatistic2Failure(error));\n    reject();\n  });\n});\nexport { getQuarantineStatistic1, getQuarantineStatistic2 };","map":{"version":3,"names":["httpClient","apiLinks","types","getQuarantineStatistic1Request","type","GET_QUARANTINE_STATISTIC_1_REQUEST","getQuarantineStatistic1Success","response","GET_QUARANTINE_STATISTIC_1_SUCCESS","payload","getQuarantineStatistic1Failure","error","GET_QUARANTINE_STATISTIC_1_FAILURE","getQuarantineStatistic1","dispatch","Promise","resolve","reject","callApi","url","facilities","quarantineFacilities","statistic1","then","data","catch","getQuarantineStatistic2Request","GET_QUARANTINE_STATISTIC_2_REQUEST","getQuarantineStatistic2Success","GET_QUARANTINE_STATISTIC_2_SUCCESS","getQuarantineStatistic2Failure","GET_QUARANTINE_STATISTIC_2_FAILURE","getQuarantineStatistic2","statistic2"],"sources":["H:/BAKCO/pj/cds/src/quarantine-facilities/actions/quarantine-statistic.js"],"sourcesContent":["import httpClient from 'app/utils/http-client';\nimport apiLinks from 'app/utils/api-links';\n\nimport types from './types';\n\nconst getQuarantineStatistic1Request = () => ({ type: types.GET_QUARANTINE_STATISTIC_1_REQUEST });\nconst getQuarantineStatistic1Success = (response) => ({ type: types.GET_QUARANTINE_STATISTIC_1_SUCCESS, payload: response });\nconst getQuarantineStatistic1Failure = (error) => ({ type: types.GET_QUARANTINE_STATISTIC_1_FAILURE, payload: error });\n\nconst getQuarantineStatistic1 = () => (dispatch) => new Promise((resolve, reject) => {\n  dispatch(getQuarantineStatistic1Request());\n  httpClient.callApi({\n    url: apiLinks.facilities.quarantineFacilities.statistic1,\n  }).then((response) => {\n    dispatch(getQuarantineStatistic1Success(response.data));\n    resolve();\n  }).catch((error) => {\n    dispatch(getQuarantineStatistic1Failure(error));\n    reject();\n  });\n});\n\nconst getQuarantineStatistic2Request = () => ({ type: types.GET_QUARANTINE_STATISTIC_2_REQUEST });\nconst getQuarantineStatistic2Success = (response) => ({ type: types.GET_QUARANTINE_STATISTIC_2_SUCCESS, payload: response });\nconst getQuarantineStatistic2Failure = (error) => ({ type: types.GET_QUARANTINE_STATISTIC_2_FAILURE, payload: error });\n\nconst getQuarantineStatistic2 = () => (dispatch) => new Promise((resolve, reject) => {\n  dispatch(getQuarantineStatistic2Request());\n  httpClient.callApi({\n    url: apiLinks.facilities.quarantineFacilities.statistic2,\n  }).then((response) => {\n    dispatch(getQuarantineStatistic2Success(response.data));\n    resolve();\n  }).catch((error) => {\n    dispatch(getQuarantineStatistic2Failure(error));\n    reject();\n  });\n});\n\nexport {\n  getQuarantineStatistic1,\n  getQuarantineStatistic2,\n};\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,uBAAuB;AAC9C,OAAOC,QAAQ,MAAM,qBAAqB;AAE1C,OAAOC,KAAK,MAAM,SAAS;AAE3B,MAAMC,8BAA8B,GAAGA,CAAA,MAAO;EAAEC,IAAI,EAAEF,KAAK,CAACG;AAAmC,CAAC,CAAC;AACjG,MAAMC,8BAA8B,GAAIC,QAAQ,KAAM;EAAEH,IAAI,EAAEF,KAAK,CAACM,kCAAkC;EAAEC,OAAO,EAAEF;AAAS,CAAC,CAAC;AAC5H,MAAMG,8BAA8B,GAAIC,KAAK,KAAM;EAAEP,IAAI,EAAEF,KAAK,CAACU,kCAAkC;EAAEH,OAAO,EAAEE;AAAM,CAAC,CAAC;AAEtH,MAAME,uBAAuB,GAAGA,CAAA,KAAOC,QAAQ,IAAK,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EACnFH,QAAQ,CAACX,8BAA8B,EAAE,CAAC;EAC1CH,UAAU,CAACkB,OAAO,CAAC;IACjBC,GAAG,EAAElB,QAAQ,CAACmB,UAAU,CAACC,oBAAoB,CAACC;EAChD,CAAC,CAAC,CAACC,IAAI,CAAEhB,QAAQ,IAAK;IACpBO,QAAQ,CAACR,8BAA8B,CAACC,QAAQ,CAACiB,IAAI,CAAC,CAAC;IACvDR,OAAO,EAAE;EACX,CAAC,CAAC,CAACS,KAAK,CAAEd,KAAK,IAAK;IAClBG,QAAQ,CAACJ,8BAA8B,CAACC,KAAK,CAAC,CAAC;IAC/CM,MAAM,EAAE;EACV,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF,MAAMS,8BAA8B,GAAGA,CAAA,MAAO;EAAEtB,IAAI,EAAEF,KAAK,CAACyB;AAAmC,CAAC,CAAC;AACjG,MAAMC,8BAA8B,GAAIrB,QAAQ,KAAM;EAAEH,IAAI,EAAEF,KAAK,CAAC2B,kCAAkC;EAAEpB,OAAO,EAAEF;AAAS,CAAC,CAAC;AAC5H,MAAMuB,8BAA8B,GAAInB,KAAK,KAAM;EAAEP,IAAI,EAAEF,KAAK,CAAC6B,kCAAkC;EAAEtB,OAAO,EAAEE;AAAM,CAAC,CAAC;AAEtH,MAAMqB,uBAAuB,GAAGA,CAAA,KAAOlB,QAAQ,IAAK,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EACnFH,QAAQ,CAACY,8BAA8B,EAAE,CAAC;EAC1C1B,UAAU,CAACkB,OAAO,CAAC;IACjBC,GAAG,EAAElB,QAAQ,CAACmB,UAAU,CAACC,oBAAoB,CAACY;EAChD,CAAC,CAAC,CAACV,IAAI,CAAEhB,QAAQ,IAAK;IACpBO,QAAQ,CAACc,8BAA8B,CAACrB,QAAQ,CAACiB,IAAI,CAAC,CAAC;IACvDR,OAAO,EAAE;EACX,CAAC,CAAC,CAACS,KAAK,CAAEd,KAAK,IAAK;IAClBG,QAAQ,CAACgB,8BAA8B,CAACnB,KAAK,CAAC,CAAC;IAC/CM,MAAM,EAAE;EACV,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF,SACEJ,uBAAuB,EACvBmB,uBAAuB"},"metadata":{},"sourceType":"module"}