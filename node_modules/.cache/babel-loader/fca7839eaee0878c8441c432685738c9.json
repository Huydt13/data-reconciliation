{"ast":null,"code":"import { toast } from 'react-toastify';\nimport httpClient from 'app/utils/http-client';\nimport apiLinks from 'app/utils/api-links';\nimport types from './types';\nconst getFacilityRequest = () => ({\n  type: types.GET_FACILITY_REQUEST\n});\nconst getFacilitySuccess = response => ({\n  type: types.GET_FACILITY_SUCCESS,\n  payload: response\n});\nconst getFacilityFailure = error => ({\n  type: types.GET_FACILITY_FAILURE,\n  payload: error\n});\nconst getFacilities = _ref => {\n  let {\n    managerId = '',\n    pageIndex = 0,\n    pageSize = 10\n  } = _ref;\n  return dispatch => new Promise((resolve, reject) => {\n    dispatch(getFacilityRequest());\n    httpClient.callApi({\n      url: apiLinks.quarantineFacilities.get,\n      params: {\n        managerId,\n        pageIndex,\n        pageSize\n      }\n    }).then(response => {\n      dispatch(getFacilitySuccess(response.data));\n      resolve();\n    }).catch(error => {\n      dispatch(getFacilityFailure(error));\n      reject();\n    });\n  });\n};\nconst createFacilityRequest = () => ({\n  type: types.CREATE_FACILITY_REQUEST\n});\nconst createFacilitySuccess = response => ({\n  type: types.CREATE_FACILITY_SUCCESS,\n  payload: response\n});\nconst createFacilityFailure = error => ({\n  type: types.CREATE_FACILITY_FAILURE,\n  payload: error\n});\nconst createFacility = data => dispatch => new Promise((resolve, reject) => {\n  dispatch(createFacilityRequest());\n  httpClient.callApi({\n    method: 'POST',\n    data,\n    url: apiLinks.quarantineFacilities.create\n  }).then(response => {\n    dispatch(createFacilitySuccess(response));\n    toast.success('Thành công');\n    resolve();\n  }).catch(error => {\n    dispatch(createFacilityFailure(error));\n    reject();\n  });\n});\nconst updateFacilityRequest = () => ({\n  type: types.UPDATE_FACILITY_REQUEST\n});\nconst updateFacilitySuccess = response => ({\n  type: types.UPDATE_FACILITY_SUCCESS,\n  payload: response\n});\nconst updateFacilityFailure = error => ({\n  type: types.UPDATE_FACILITY_FAILURE,\n  payload: error\n});\nconst updateFacility = data => dispatch => new Promise((resolve, reject) => {\n  dispatch(updateFacilityRequest());\n  httpClient.callApi({\n    method: 'PUT',\n    url: `${apiLinks.quarantineFacilities.update}/${data.id}`,\n    data\n  }).then(response => {\n    dispatch(updateFacilitySuccess(response));\n    toast.success('Thành công');\n    resolve();\n  }).catch(error => {\n    dispatch(updateFacilityFailure(error));\n    reject();\n  });\n});\nconst deleteFacilityRequest = () => ({\n  type: types.DELETE_FACILITY_REQUEST\n});\nconst deleteFacilitySuccess = () => ({\n  type: types.DELETE_FACILITY_SUCCESS\n});\nconst deleteFacilityFailure = () => ({\n  type: types.DELETE_FACILITY_FAILURE\n});\nconst deleteFacility = id => dispatch => new Promise((resolve, reject) => {\n  dispatch(deleteFacilityRequest());\n  httpClient.callApi({\n    method: 'DELETE',\n    url: `${apiLinks.quarantineFacilities.delete}/${id}`\n  }).then(response => {\n    dispatch(deleteFacilitySuccess(response));\n    toast.success('Thành công');\n    resolve();\n  }).catch(error => {\n    dispatch(deleteFacilityFailure(error));\n    reject();\n  });\n});\nconst setManagerRequest = () => ({\n  type: types.SET_FACILITY_MANAGER_REQUEST\n});\nconst setManagerSuccess = () => ({\n  type: types.SET_FACILITY_MANAGER_SUCCESS\n});\nconst setManagerFailure = () => ({\n  type: types.SET_FACILITY_MANAGER_FAILURE\n});\nconst setManager = (id, managerId) => dispatch => new Promise((resolve, reject) => {\n  dispatch(setManagerRequest());\n  httpClient.callApi({\n    method: 'PUT',\n    url: `${apiLinks.quarantineFacilities.setManager}/${id}/SetManager/${managerId}`\n  }).then(response => {\n    dispatch(setManagerSuccess(response));\n    toast.success('Thành công');\n    resolve();\n  }).catch(error => {\n    dispatch(setManagerFailure(error));\n    reject();\n  });\n});\nexport { getFacilities, createFacility, updateFacility, deleteFacility, setManager };","map":{"version":3,"names":["toast","httpClient","apiLinks","types","getFacilityRequest","type","GET_FACILITY_REQUEST","getFacilitySuccess","response","GET_FACILITY_SUCCESS","payload","getFacilityFailure","error","GET_FACILITY_FAILURE","getFacilities","_ref","managerId","pageIndex","pageSize","dispatch","Promise","resolve","reject","callApi","url","quarantineFacilities","get","params","then","data","catch","createFacilityRequest","CREATE_FACILITY_REQUEST","createFacilitySuccess","CREATE_FACILITY_SUCCESS","createFacilityFailure","CREATE_FACILITY_FAILURE","createFacility","method","create","success","updateFacilityRequest","UPDATE_FACILITY_REQUEST","updateFacilitySuccess","UPDATE_FACILITY_SUCCESS","updateFacilityFailure","UPDATE_FACILITY_FAILURE","updateFacility","update","id","deleteFacilityRequest","DELETE_FACILITY_REQUEST","deleteFacilitySuccess","DELETE_FACILITY_SUCCESS","deleteFacilityFailure","DELETE_FACILITY_FAILURE","deleteFacility","delete","setManagerRequest","SET_FACILITY_MANAGER_REQUEST","setManagerSuccess","SET_FACILITY_MANAGER_SUCCESS","setManagerFailure","SET_FACILITY_MANAGER_FAILURE","setManager"],"sources":["H:/BAKCO/pj/data reconciliation/src/quarantine/actions/facility.js"],"sourcesContent":["import { toast } from 'react-toastify';\n\nimport httpClient from 'app/utils/http-client';\nimport apiLinks from 'app/utils/api-links';\n\nimport types from './types';\n\nconst getFacilityRequest = () => ({ type: types.GET_FACILITY_REQUEST });\nconst getFacilitySuccess = (response) => ({ type: types.GET_FACILITY_SUCCESS, payload: response });\nconst getFacilityFailure = (error) => ({ type: types.GET_FACILITY_FAILURE, payload: error });\n\nconst getFacilities = ({\n  managerId = '',\n  pageIndex = 0,\n  pageSize = 10,\n}) => (dispatch) => new Promise((resolve, reject) => {\n  dispatch(getFacilityRequest());\n  httpClient.callApi({\n    url: apiLinks.quarantineFacilities.get,\n    params: {\n      managerId,\n      pageIndex,\n      pageSize,\n    },\n  }).then((response) => {\n    dispatch(getFacilitySuccess(response.data));\n    resolve();\n  }).catch((error) => {\n    dispatch(getFacilityFailure(error));\n    reject();\n  });\n});\n\nconst createFacilityRequest = () => ({ type: types.CREATE_FACILITY_REQUEST });\nconst createFacilitySuccess = (response) => ({ type: types.CREATE_FACILITY_SUCCESS, payload: response });\nconst createFacilityFailure = (error) => ({ type: types.CREATE_FACILITY_FAILURE, payload: error });\n\nconst createFacility = (data) => (dispatch) => new Promise((resolve, reject) => {\n  dispatch(createFacilityRequest());\n  httpClient.callApi({\n    method: 'POST',\n    data,\n    url: apiLinks.quarantineFacilities.create,\n  }).then((response) => {\n    dispatch(createFacilitySuccess(response));\n    toast.success('Thành công');\n    resolve();\n  }).catch((error) => {\n    dispatch(createFacilityFailure(error));\n    reject();\n  });\n});\n\nconst updateFacilityRequest = () => ({ type: types.UPDATE_FACILITY_REQUEST });\nconst updateFacilitySuccess = (response) => ({ type: types.UPDATE_FACILITY_SUCCESS, payload: response });\nconst updateFacilityFailure = (error) => ({ type: types.UPDATE_FACILITY_FAILURE, payload: error });\n\nconst updateFacility = (data) => (dispatch) => new Promise((resolve, reject) => {\n  dispatch(updateFacilityRequest());\n  httpClient.callApi({\n    method: 'PUT',\n    url: `${apiLinks.quarantineFacilities.update}/${data.id}`,\n    data,\n  }).then((response) => {\n    dispatch(updateFacilitySuccess(response));\n    toast.success('Thành công');\n    resolve();\n  }).catch((error) => {\n    dispatch(updateFacilityFailure(error));\n    reject();\n  });\n});\n\nconst deleteFacilityRequest = () => ({ type: types.DELETE_FACILITY_REQUEST });\nconst deleteFacilitySuccess = () => ({ type: types.DELETE_FACILITY_SUCCESS });\nconst deleteFacilityFailure = () => ({ type: types.DELETE_FACILITY_FAILURE });\n\nconst deleteFacility = (id) => (dispatch) => new Promise((resolve, reject) => {\n  dispatch(deleteFacilityRequest());\n  httpClient.callApi({\n    method: 'DELETE',\n    url: `${apiLinks.quarantineFacilities.delete}/${id}`,\n  }).then((response) => {\n    dispatch(deleteFacilitySuccess(response));\n    toast.success('Thành công');\n    resolve();\n  }).catch((error) => {\n    dispatch(deleteFacilityFailure(error));\n    reject();\n  });\n});\n\nconst setManagerRequest = () => ({ type: types.SET_FACILITY_MANAGER_REQUEST });\nconst setManagerSuccess = () => ({ type: types.SET_FACILITY_MANAGER_SUCCESS });\nconst setManagerFailure = () => ({ type: types.SET_FACILITY_MANAGER_FAILURE });\n\nconst setManager = (id, managerId) => (dispatch) => new Promise((resolve, reject) => {\n  dispatch(setManagerRequest());\n  httpClient.callApi({\n    method: 'PUT',\n    url: `${apiLinks.quarantineFacilities.setManager}/${id}/SetManager/${managerId}`,\n  }).then((response) => {\n    dispatch(setManagerSuccess(response));\n    toast.success('Thành công');\n    resolve();\n  }).catch((error) => {\n    dispatch(setManagerFailure(error));\n    reject();\n  });\n});\n\nexport {\n  getFacilities,\n  createFacility,\n  updateFacility,\n  deleteFacility,\n  setManager,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}