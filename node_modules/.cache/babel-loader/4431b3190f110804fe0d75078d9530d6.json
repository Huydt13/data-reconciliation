{"ast":null,"code":"import httpClient from 'app/utils/http-client';\nimport apiLinks from 'app/utils/api-links';\nimport types from './types';\nconst getAccountInfoRequest = () => ({\n  type: types.TM_GET_ACCOUNT_INFO_REQUEST\n});\nconst getAccountInfoSuccess = response => ({\n  type: types.TM_GET_ACCOUNT_INFO_SUCCESS,\n  payload: response\n});\nconst getAccountInfoFailure = error => ({\n  type: types.TM_GET_ACCOUNT_INFO_FAILURE,\n  payload: error\n});\nconst getAccountInfo = () => dispatch => new Promise((resolve, reject) => {\n  dispatch(getAccountInfoRequest());\n  httpClient.callApi({\n    url: apiLinks.treatment.account.getInfo\n  }).then(response => {\n    dispatch(getAccountInfoSuccess(response.data));\n    resolve(response.data);\n  }).catch(error => {\n    dispatch(getAccountInfoFailure(error));\n    reject();\n  });\n});\nexport { getAccountInfo };","map":{"version":3,"names":["httpClient","apiLinks","types","getAccountInfoRequest","type","TM_GET_ACCOUNT_INFO_REQUEST","getAccountInfoSuccess","response","TM_GET_ACCOUNT_INFO_SUCCESS","payload","getAccountInfoFailure","error","TM_GET_ACCOUNT_INFO_FAILURE","getAccountInfo","dispatch","Promise","resolve","reject","callApi","url","treatment","account","getInfo","then","data","catch"],"sources":["H:/BAKCO/pj/cds/src/treatment/actions/account.js"],"sourcesContent":["import httpClient from 'app/utils/http-client';\nimport apiLinks from 'app/utils/api-links';\n\nimport types from './types';\n\nconst getAccountInfoRequest = () => ({\n  type: types.TM_GET_ACCOUNT_INFO_REQUEST,\n});\nconst getAccountInfoSuccess = (response) => ({\n  type: types.TM_GET_ACCOUNT_INFO_SUCCESS,\n  payload: response,\n});\nconst getAccountInfoFailure = (error) => ({\n  type: types.TM_GET_ACCOUNT_INFO_FAILURE,\n  payload: error,\n});\n\nconst getAccountInfo = () => (dispatch) =>\n  new Promise((resolve, reject) => {\n    dispatch(getAccountInfoRequest());\n    httpClient\n      .callApi({\n        url: apiLinks.treatment.account.getInfo,\n      })\n      .then((response) => {\n        dispatch(getAccountInfoSuccess(response.data));\n        resolve(response.data);\n      })\n      .catch((error) => {\n        dispatch(getAccountInfoFailure(error));\n        reject();\n      });\n  });\n\nexport { getAccountInfo };\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,uBAAuB;AAC9C,OAAOC,QAAQ,MAAM,qBAAqB;AAE1C,OAAOC,KAAK,MAAM,SAAS;AAE3B,MAAMC,qBAAqB,GAAGA,CAAA,MAAO;EACnCC,IAAI,EAAEF,KAAK,CAACG;AACd,CAAC,CAAC;AACF,MAAMC,qBAAqB,GAAIC,QAAQ,KAAM;EAC3CH,IAAI,EAAEF,KAAK,CAACM,2BAA2B;EACvCC,OAAO,EAAEF;AACX,CAAC,CAAC;AACF,MAAMG,qBAAqB,GAAIC,KAAK,KAAM;EACxCP,IAAI,EAAEF,KAAK,CAACU,2BAA2B;EACvCH,OAAO,EAAEE;AACX,CAAC,CAAC;AAEF,MAAME,cAAc,GAAGA,CAAA,KAAOC,QAAQ,IACpC,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EAC/BH,QAAQ,CAACX,qBAAqB,EAAE,CAAC;EACjCH,UAAU,CACPkB,OAAO,CAAC;IACPC,GAAG,EAAElB,QAAQ,CAACmB,SAAS,CAACC,OAAO,CAACC;EAClC,CAAC,CAAC,CACDC,IAAI,CAAEhB,QAAQ,IAAK;IAClBO,QAAQ,CAACR,qBAAqB,CAACC,QAAQ,CAACiB,IAAI,CAAC,CAAC;IAC9CR,OAAO,CAACT,QAAQ,CAACiB,IAAI,CAAC;EACxB,CAAC,CAAC,CACDC,KAAK,CAAEd,KAAK,IAAK;IAChBG,QAAQ,CAACJ,qBAAqB,CAACC,KAAK,CAAC,CAAC;IACtCM,MAAM,EAAE;EACV,CAAC,CAAC;AACN,CAAC,CAAC;AAEJ,SAASJ,cAAc"},"metadata":{},"sourceType":"module"}