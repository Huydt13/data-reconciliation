{"ast":null,"code":"import httpClient from 'app/utils/http-client';\nimport apiLinks from 'app/utils/api-links';\nimport types from './types';\nconst getEmployeeTypesRequest = () => ({\n  type: types.GET_EMPLOYEE_TYPES_REQUEST\n});\nconst getEmployeeTypesSuccess = response => ({\n  type: types.GET_EMPLOYEE_TYPES_SUCCESS,\n  payload: response\n});\nconst getEmployeeTypesFailure = error => ({\n  type: types.GET_EMPLOYEE_TYPES_FAILURE,\n  payload: error\n});\nconst getEmployeeTypes = arg => dispatch => new Promise((resolve, reject) => {\n  dispatch(getEmployeeTypesRequest());\n  httpClient.callApi({\n    url: apiLinks.treatment.employeeType.get,\n    params: {\n      ...arg\n    }\n  }).then(response => {\n    dispatch(getEmployeeTypesSuccess(response.data));\n    resolve();\n  }).catch(error => {\n    dispatch(getEmployeeTypesFailure(error));\n    reject();\n  });\n});\nexport { getEmployeeTypes };","map":{"version":3,"names":["httpClient","apiLinks","types","getEmployeeTypesRequest","type","GET_EMPLOYEE_TYPES_REQUEST","getEmployeeTypesSuccess","response","GET_EMPLOYEE_TYPES_SUCCESS","payload","getEmployeeTypesFailure","error","GET_EMPLOYEE_TYPES_FAILURE","getEmployeeTypes","arg","dispatch","Promise","resolve","reject","callApi","url","treatment","employeeType","get","params","then","data","catch"],"sources":["H:/BAKCO/pj/cds/src/treatment/actions/employee-type.js"],"sourcesContent":["import httpClient from 'app/utils/http-client';\nimport apiLinks from 'app/utils/api-links';\n\nimport types from './types';\n\nconst getEmployeeTypesRequest = () => ({\n  type: types.GET_EMPLOYEE_TYPES_REQUEST,\n});\nconst getEmployeeTypesSuccess = (response) => ({\n  type: types.GET_EMPLOYEE_TYPES_SUCCESS,\n  payload: response,\n});\nconst getEmployeeTypesFailure = (error) => ({\n  type: types.GET_EMPLOYEE_TYPES_FAILURE,\n  payload: error,\n});\n\nconst getEmployeeTypes = (arg) => (dispatch) =>\n  new Promise((resolve, reject) => {\n    dispatch(getEmployeeTypesRequest());\n    httpClient\n      .callApi({\n        url: apiLinks.treatment.employeeType.get,\n        params: { ...arg },\n      })\n      .then((response) => {\n        dispatch(getEmployeeTypesSuccess(response.data));\n        resolve();\n      })\n      .catch((error) => {\n        dispatch(getEmployeeTypesFailure(error));\n        reject();\n      });\n  });\n\nexport { getEmployeeTypes };\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,uBAAuB;AAC9C,OAAOC,QAAQ,MAAM,qBAAqB;AAE1C,OAAOC,KAAK,MAAM,SAAS;AAE3B,MAAMC,uBAAuB,GAAGA,CAAA,MAAO;EACrCC,IAAI,EAAEF,KAAK,CAACG;AACd,CAAC,CAAC;AACF,MAAMC,uBAAuB,GAAIC,QAAQ,KAAM;EAC7CH,IAAI,EAAEF,KAAK,CAACM,0BAA0B;EACtCC,OAAO,EAAEF;AACX,CAAC,CAAC;AACF,MAAMG,uBAAuB,GAAIC,KAAK,KAAM;EAC1CP,IAAI,EAAEF,KAAK,CAACU,0BAA0B;EACtCH,OAAO,EAAEE;AACX,CAAC,CAAC;AAEF,MAAME,gBAAgB,GAAIC,GAAG,IAAMC,QAAQ,IACzC,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EAC/BH,QAAQ,CAACZ,uBAAuB,EAAE,CAAC;EACnCH,UAAU,CACPmB,OAAO,CAAC;IACPC,GAAG,EAAEnB,QAAQ,CAACoB,SAAS,CAACC,YAAY,CAACC,GAAG;IACxCC,MAAM,EAAE;MAAE,GAAGV;IAAI;EACnB,CAAC,CAAC,CACDW,IAAI,CAAElB,QAAQ,IAAK;IAClBQ,QAAQ,CAACT,uBAAuB,CAACC,QAAQ,CAACmB,IAAI,CAAC,CAAC;IAChDT,OAAO,EAAE;EACX,CAAC,CAAC,CACDU,KAAK,CAAEhB,KAAK,IAAK;IAChBI,QAAQ,CAACL,uBAAuB,CAACC,KAAK,CAAC,CAAC;IACxCO,MAAM,EAAE;EACV,CAAC,CAAC;AACN,CAAC,CAAC;AAEJ,SAASL,gBAAgB"},"metadata":{},"sourceType":"module"}