{"ast":null,"code":"import apiLinks from \"app/utils/api-links\";\nimport httpClient from \"app/utils/http-client\";\nimport { reject } from \"lodash\";\nimport { toast } from \"react-toastify\";\nimport types from \"./types\";\n\n//lấy tất cả danh sách\nconst getProfilesRequest = () => ({\n  type: types.GET_PROFILES_REQUEST\n});\nconst getProfilesSuccess = res => ({\n  type: types.GET_PROFILES_SUCCESS,\n  payload: res\n});\nconst getProfilesFailure = err => ({\n  type: types.GET_PROFILES_FAILURE,\n  payload: err\n});\nconst getProfiles = _ref => {\n  let {\n    name = \"\",\n    cccd = \"\",\n    cmnd = \"\",\n    phoneNumber = \"\",\n    passportNumber = \"\",\n    healthInsurranceNumber = \"\",\n    provinceValue = \"\",\n    districtValue = \"\",\n    wardValue = \"\",\n    pageSize = undefined,\n    pageIndex = undefined,\n    reason = \"\",\n    reasonType = \"\",\n    realtedPositiveProfileId = 0,\n    hasOnUsingProfiles = undefined,\n    hasGroupProfiles = undefined,\n    hasInfectionChainHistories = undefined,\n    hasExaminationHistories = undefined\n  } = _ref;\n  return dispatch => new Promise((resolve, reject) => {\n    dispatch(getProfilesRequest());\n    httpClient.callApi({\n      url: apiLinks.profiles.get,\n      params: {\n        name,\n        cccd,\n        cmnd,\n        phoneNumber,\n        passportNumber,\n        healthInsurranceNumber,\n        provinceValue,\n        districtValue,\n        wardValue,\n        pageSize,\n        pageIndex,\n        reason,\n        reasonType,\n        realtedPositiveProfileId: realtedPositiveProfileId || undefined,\n        hasOnUsingProfiles,\n        hasGroupProfiles,\n        hasInfectionChainHistories,\n        hasExaminationHistories\n      },\n      cancelToken: true\n    }).then(res => {\n      dispatch(getProfilesSuccess(res.data));\n      resolve();\n    }).catch(err => {\n      dispatch(getProfilesFailure(err));\n      reject();\n    });\n  });\n};\n\n// lấy id\nconst getProfileRequest = () => ({\n  type: types.GET_PROFILE_REQUEST\n});\nconst getProfileSuccess = res => ({\n  type: types.GET_PROFILE_SUCCESS,\n  payload: res\n});\nconst getProfileFailure = err => ({\n  type: types.GET_PROFILE_FAILURE,\n  payload: err\n});\nconst getProfile = id => dispatch => new Promise((resolve, reject) => {\n  dispatch(getProfileRequest());\n  httpClient.callApi({\n    url: `${apiLinks.profile.get}/${id}`\n  }).then(res => {\n    dispatch(getProfileSuccess(res.data));\n    resolve(res.data);\n  }).catch(err => {\n    dispatch(getProfileFailure(err));\n    reject();\n  });\n});\nconst createProfileRequest = () => ({\n  type: types.CREATE_PROFILE_REQUEST\n});\nconst createProfileSuccess = res => ({\n  type: types.CREATE_PROFILE_SUCCESS,\n  payload: res\n});\nconst createProfileFailure = err => ({\n  type: types.CREATE_PROFILE_FAILURE,\n  payload: err\n});\nconst createProfile = function (data) {\n  let notify = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  return dispatch => new Promise((resolve, reject) => {\n    const url = window.location.href;\n    const mqExchangeName = url.indexOf(\"abc\") > -1 || process.env.NODE_ENV === \"development\" ? \"NewProfileQueue1\" : \"NewProfileQueue\";\n    dispatch(createProfileRequest());\n    httpClient.callApi({\n      method: \"POST\",\n      data,\n      url: apiLinks.profiles.create,\n      params: {\n        mqExchangeName\n      }\n    }).then(res => {\n      dispatch(createProfileSuccess(res.data));\n      if (notify) {\n        toast.success(\"oke\");\n      }\n      resolve(res.data);\n    }).catch(err => {\n      dispatch(createProfileFailure(err));\n      reject();\n    });\n  });\n};\nexport { getProfiles, getProfile, createProfile };","map":{"version":3,"names":["apiLinks","httpClient","reject","toast","types","getProfilesRequest","type","GET_PROFILES_REQUEST","getProfilesSuccess","res","GET_PROFILES_SUCCESS","payload","getProfilesFailure","err","GET_PROFILES_FAILURE","getProfiles","_ref","name","cccd","cmnd","phoneNumber","passportNumber","healthInsurranceNumber","provinceValue","districtValue","wardValue","pageSize","undefined","pageIndex","reason","reasonType","realtedPositiveProfileId","hasOnUsingProfiles","hasGroupProfiles","hasInfectionChainHistories","hasExaminationHistories","dispatch","Promise","resolve","callApi","url","profiles","get","params","cancelToken","then","data","catch","getProfileRequest","GET_PROFILE_REQUEST","getProfileSuccess","GET_PROFILE_SUCCESS","getProfileFailure","GET_PROFILE_FAILURE","getProfile","id","profile","createProfileRequest","CREATE_PROFILE_REQUEST","createProfileSuccess","CREATE_PROFILE_SUCCESS","createProfileFailure","CREATE_PROFILE_FAILURE","createProfile","notify","arguments","length","window","location","href","mqExchangeName","indexOf","process","env","NODE_ENV","method","create","success"],"sources":["H:/BAKCO/pj/data reconciliation/src/profile-train/actions/profile.js"],"sourcesContent":["import apiLinks from \"app/utils/api-links\";\r\nimport httpClient from \"app/utils/http-client\";\r\nimport { reject } from \"lodash\";\r\nimport { toast } from \"react-toastify\";\r\nimport types from \"./types\";\r\n\r\n//lấy tất cả danh sách\r\nconst getProfilesRequest = () => ({ type: types.GET_PROFILES_REQUEST });\r\nconst getProfilesSuccess = (res) => ({\r\n  type: types.GET_PROFILES_SUCCESS,\r\n  payload: res,\r\n});\r\nconst getProfilesFailure = (err) => ({\r\n  type: types.GET_PROFILES_FAILURE,\r\n  payload: err,\r\n});\r\n\r\nconst getProfiles =\r\n  ({\r\n    name = \"\",\r\n    cccd = \"\",\r\n    cmnd = \"\",\r\n    phoneNumber = \"\",\r\n    passportNumber = \"\",\r\n    healthInsurranceNumber = \"\",\r\n    provinceValue = \"\",\r\n    districtValue = \"\",\r\n    wardValue = \"\",\r\n    pageSize = undefined,\r\n    pageIndex = undefined,\r\n    reason = \"\",\r\n    reasonType = \"\",\r\n    realtedPositiveProfileId = 0,\r\n    hasOnUsingProfiles = undefined,\r\n    hasGroupProfiles = undefined,\r\n    hasInfectionChainHistories = undefined,\r\n    hasExaminationHistories = undefined,\r\n  }) =>\r\n  (dispatch) =>\r\n    new Promise((resolve, reject) => {\r\n      dispatch(getProfilesRequest());\r\n      httpClient\r\n        .callApi({\r\n          url: apiLinks.profiles.get,\r\n          params: {\r\n            name,\r\n            cccd,\r\n            cmnd,\r\n            phoneNumber,\r\n            passportNumber,\r\n            healthInsurranceNumber,\r\n            provinceValue,\r\n            districtValue,\r\n            wardValue,\r\n            pageSize,\r\n            pageIndex,\r\n            reason,\r\n            reasonType,\r\n            realtedPositiveProfileId: realtedPositiveProfileId || undefined,\r\n            hasOnUsingProfiles,\r\n            hasGroupProfiles,\r\n            hasInfectionChainHistories,\r\n            hasExaminationHistories,\r\n          },\r\n          cancelToken: true,\r\n        })\r\n        .then((res) => {\r\n          dispatch(getProfilesSuccess(res.data));\r\n          resolve();\r\n        })\r\n        .catch((err) => {\r\n          dispatch(getProfilesFailure(err));\r\n          reject();\r\n        });\r\n    });\r\n\r\n// lấy id\r\nconst getProfileRequest = () => ({ type: types.GET_PROFILE_REQUEST });\r\nconst getProfileSuccess = (res) => ({\r\n  type: types.GET_PROFILE_SUCCESS,\r\n  payload: res,\r\n});\r\nconst getProfileFailure = (err) => ({\r\n  type: types.GET_PROFILE_FAILURE,\r\n  payload: err,\r\n});\r\n\r\nconst getProfile = (id) => (dispatch) =>\r\n  new Promise((resolve, reject) => {\r\n    dispatch(getProfileRequest());\r\n    httpClient\r\n      .callApi({\r\n        url: `${apiLinks.profile.get}/${id}`,\r\n      })\r\n      .then((res) => {\r\n        dispatch(getProfileSuccess(res.data));\r\n        resolve(res.data);\r\n      })\r\n      .catch((err) => {\r\n        dispatch(getProfileFailure(err));\r\n        reject();\r\n      });\r\n  });\r\n\r\nconst createProfileRequest = () => ({ type: types.CREATE_PROFILE_REQUEST });\r\nconst createProfileSuccess = (res) => ({\r\n  type: types.CREATE_PROFILE_SUCCESS,\r\n  payload: res,\r\n});\r\nconst createProfileFailure = (err) => ({\r\n  type: types.CREATE_PROFILE_FAILURE,\r\n  payload: err,\r\n});\r\nconst createProfile =\r\n  (data, notify = true) =>\r\n  (dispatch) =>\r\n    new Promise((resolve, reject) => {\r\n      const url = window.location.href;\r\n      const mqExchangeName =\r\n        url.indexOf(\"abc\") > -1 || process.env.NODE_ENV === \"development\"\r\n          ? \"NewProfileQueue1\"\r\n          : \"NewProfileQueue\";\r\n      dispatch(createProfileRequest());\r\n      httpClient\r\n        .callApi({\r\n          method: \"POST\",\r\n          data,\r\n          url: apiLinks.profiles.create,\r\n          params: { mqExchangeName },\r\n        })\r\n        .then((res) => {\r\n          dispatch(createProfileSuccess(res.data));\r\n          if (notify) {\r\n            toast.success(\"oke\");\r\n          }\r\n          resolve(res.data);\r\n        })\r\n        .catch((err) => {\r\n          dispatch(createProfileFailure(err));\r\n          reject();\r\n        });\r\n    });\r\nexport { getProfiles, getProfile, createProfile };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}