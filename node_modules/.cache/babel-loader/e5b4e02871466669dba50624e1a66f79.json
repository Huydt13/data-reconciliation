{"ast":null,"code":"import types, { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SET_TOKEN, SET_PERMISSIONS, GET_USER_INFO_REQUEST, GET_USER_INFO_SUCCESS, GET_USER_INFO_FAILURE, LOG_OUT } from 'app/actions/types';\nimport axios from 'axios';\nimport httpClient from 'app/utils/http-client';\nimport apiLinks from 'app/utils/api-links';\nimport { toast } from 'react-toastify';\nconst loginRequest = () => ({\n  type: LOG_IN_REQUEST\n});\nconst loginSuccess = response => ({\n  type: LOG_IN_SUCCESS,\n  payload: response\n});\nconst loginFailure = error => ({\n  type: LOG_IN_FAILURE,\n  payload: error\n});\nconst login = (username, password) => dispatch => new Promise((resolve, reject) => {\n  dispatch(loginRequest());\n  httpClient.callApi({\n    method: 'POST',\n    url: apiLinks.login,\n    data: {\n      username,\n      password\n    }\n  }).then(response => {\n    dispatch(loginSuccess(response.data));\n    resolve(response.data);\n  }).catch(error => {\n    dispatch(loginFailure(error));\n    reject(error);\n  });\n});\nconst setToken = (token, tokenExpiredTime, userInfo) => ({\n  type: SET_TOKEN,\n  payload: {\n    token,\n    tokenExpiredTime,\n    userInfo\n  }\n});\nconst getUserInfoRequest = () => ({\n  type: GET_USER_INFO_REQUEST\n});\nconst getUserInfoSuccess = response => ({\n  type: GET_USER_INFO_SUCCESS,\n  payload: response\n});\nconst getUserInfoFailure = error => ({\n  type: GET_USER_INFO_FAILURE,\n  payload: error\n});\nfunction getUserInfo() {\n  return dispatch => {\n    dispatch(getUserInfoRequest());\n    httpClient.callApi({\n      method: 'GET',\n      url: apiLinks.userInfo\n    }).then(response => dispatch(getUserInfoSuccess(response.data))).catch(error => dispatch(getUserInfoFailure(error)));\n  };\n}\nconst logout = () => ({\n  type: LOG_OUT\n});\nconst getPermission = token => new Promise((resolve, reject) => {\n  const headerToken = token ? {\n    Authorization: `bearer ${token}`\n  } : null;\n  axios({\n    url: apiLinks.getPermission,\n    headers: {\n      ...headerToken\n    }\n  }).then(_ref => {\n    let {\n      data\n    } = _ref;\n    return resolve(data);\n  }).catch(_ref2 => {\n    let {\n      response\n    } = _ref2;\n    return reject(response);\n  });\n});\nconst setPermissions = permissionList => ({\n  type: SET_PERMISSIONS,\n  payload: permissionList\n});\nconst checkCredential = token => new Promise((resolve, reject) => {\n  const headerToken = token ? {\n    Authorization: `bearer ${token}`\n  } : null;\n  axios({\n    url: apiLinks.checkCredential,\n    headers: {\n      ...headerToken\n    }\n  }).then(resolve).catch(reject);\n});\nconst changePasswordRequest = () => ({\n  type: types.AUTH_CHANGE_PASSWORD_REQUEST\n});\nconst changePasswordSuccess = response => ({\n  type: types.AUTH_CHANGE_PASSWORD_SUCCESS,\n  payload: response\n});\nconst changePasswordFailure = error => ({\n  type: types.AUTH_CHANGE_PASSWORD_FAILURE,\n  payload: error\n});\nconst changePassword = _ref3 => {\n  let {\n    oldPassword = '',\n    newPassword = ''\n  } = _ref3;\n  return dispatch => new Promise((resolve, reject) => {\n    dispatch(changePasswordRequest());\n    httpClient.callApi({\n      method: 'PUT',\n      url: apiLinks.changePassword,\n      data: {\n        oldPassword,\n        newPassword\n      }\n    }).then(response => {\n      dispatch(changePasswordSuccess(response.data));\n      toast.success('Đổi mật khẩu thành công, vui lòng đăng nhập lại!');\n      resolve();\n    }).catch(error => {\n      dispatch(changePasswordFailure(error));\n      reject();\n    });\n  });\n};\nexport { login, setToken, getUserInfo, logout, getPermission, setPermissions, checkCredential, changePassword };","map":{"version":3,"names":["types","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SET_TOKEN","SET_PERMISSIONS","GET_USER_INFO_REQUEST","GET_USER_INFO_SUCCESS","GET_USER_INFO_FAILURE","LOG_OUT","axios","httpClient","apiLinks","toast","loginRequest","type","loginSuccess","response","payload","loginFailure","error","login","username","password","dispatch","Promise","resolve","reject","callApi","method","url","data","then","catch","setToken","token","tokenExpiredTime","userInfo","getUserInfoRequest","getUserInfoSuccess","getUserInfoFailure","getUserInfo","logout","getPermission","headerToken","Authorization","headers","_ref","_ref2","setPermissions","permissionList","checkCredential","changePasswordRequest","AUTH_CHANGE_PASSWORD_REQUEST","changePasswordSuccess","AUTH_CHANGE_PASSWORD_SUCCESS","changePasswordFailure","AUTH_CHANGE_PASSWORD_FAILURE","changePassword","_ref3","oldPassword","newPassword","success"],"sources":["H:/BAKCO/pj/cds/src/app/actions/auth.js"],"sourcesContent":["import types, {\n  LOG_IN_REQUEST,\n  LOG_IN_SUCCESS,\n  LOG_IN_FAILURE,\n  SET_TOKEN,\n  SET_PERMISSIONS,\n  GET_USER_INFO_REQUEST,\n  GET_USER_INFO_SUCCESS,\n  GET_USER_INFO_FAILURE,\n  LOG_OUT,\n} from 'app/actions/types';\n\nimport axios from 'axios';\nimport httpClient from 'app/utils/http-client';\nimport apiLinks from 'app/utils/api-links';\nimport { toast } from 'react-toastify';\n\nconst loginRequest = () => ({ type: LOG_IN_REQUEST });\nconst loginSuccess = (response) => ({\n  type: LOG_IN_SUCCESS,\n  payload: response,\n});\nconst loginFailure = (error) => ({ type: LOG_IN_FAILURE, payload: error });\n\nconst login = (username, password) => (dispatch) =>\n  new Promise((resolve, reject) => {\n    dispatch(loginRequest());\n    httpClient\n      .callApi({\n        method: 'POST',\n        url: apiLinks.login,\n        data: { username, password },\n      })\n      .then((response) => {\n        dispatch(loginSuccess(response.data));\n        resolve(response.data);\n      })\n      .catch((error) => {\n        dispatch(loginFailure(error));\n        reject(error);\n      });\n  });\n\nconst setToken = (token, tokenExpiredTime, userInfo) => ({\n  type: SET_TOKEN,\n  payload: {\n    token,\n    tokenExpiredTime,\n    userInfo,\n  },\n});\n\nconst getUserInfoRequest = () => ({ type: GET_USER_INFO_REQUEST });\nconst getUserInfoSuccess = (response) => ({\n  type: GET_USER_INFO_SUCCESS,\n  payload: response,\n});\nconst getUserInfoFailure = (error) => ({\n  type: GET_USER_INFO_FAILURE,\n  payload: error,\n});\n\nfunction getUserInfo() {\n  return (dispatch) => {\n    dispatch(getUserInfoRequest());\n    httpClient\n      .callApi({\n        method: 'GET',\n        url: apiLinks.userInfo,\n      })\n      .then((response) => dispatch(getUserInfoSuccess(response.data)))\n      .catch((error) => dispatch(getUserInfoFailure(error)));\n  };\n}\n\nconst logout = () => ({ type: LOG_OUT });\n\nconst getPermission = (token) =>\n  new Promise((resolve, reject) => {\n    const headerToken = token ? { Authorization: `bearer ${token}` } : null;\n    axios({\n      url: apiLinks.getPermission,\n      headers: { ...headerToken },\n    })\n      .then(({ data }) => resolve(data))\n      .catch(({ response }) => reject(response));\n  });\n\nconst setPermissions = (permissionList) => ({\n  type: SET_PERMISSIONS,\n  payload: permissionList,\n});\n\nconst checkCredential = (token) =>\n  new Promise((resolve, reject) => {\n    const headerToken = token ? { Authorization: `bearer ${token}` } : null;\n    axios({\n      url: apiLinks.checkCredential,\n      headers: { ...headerToken },\n    })\n      .then(resolve)\n      .catch(reject);\n  });\n\nconst changePasswordRequest = () => ({\n  type: types.AUTH_CHANGE_PASSWORD_REQUEST,\n});\nconst changePasswordSuccess = (response) => ({\n  type: types.AUTH_CHANGE_PASSWORD_SUCCESS,\n  payload: response,\n});\nconst changePasswordFailure = (error) => ({\n  type: types.AUTH_CHANGE_PASSWORD_FAILURE,\n  payload: error,\n});\n\nconst changePassword =\n  ({ oldPassword = '', newPassword = '' }) =>\n    (dispatch) =>\n      new Promise((resolve, reject) => {\n        dispatch(changePasswordRequest());\n        httpClient\n          .callApi({\n            method: 'PUT',\n            url: apiLinks.changePassword,\n            data: {\n              oldPassword,\n              newPassword,\n            },\n          })\n          .then((response) => {\n            dispatch(changePasswordSuccess(response.data));\n            toast.success('Đổi mật khẩu thành công, vui lòng đăng nhập lại!');\n            resolve();\n          })\n          .catch((error) => {\n            dispatch(changePasswordFailure(error));\n            reject();\n          });\n      });\n\nexport {\n  login,\n  setToken,\n  getUserInfo,\n  logout,\n  getPermission,\n  setPermissions,\n  checkCredential,\n  changePassword,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}