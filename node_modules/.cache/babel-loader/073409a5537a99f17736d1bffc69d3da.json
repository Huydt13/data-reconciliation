{"ast":null,"code":"import { toast } from 'react-toastify';\nimport httpClient from 'app/utils/http-client';\nimport apiLinks from 'app/utils/api-links';\nimport { announceTreatmentError } from 'treatment/utils/helpers';\nimport types from './types';\nconst getQuarantineListByFacilityRequest = () => ({\n  type: types.GET_QUARANTINE_LIST_BY_FACILITY_REQUEST\n});\nconst getQuarantineListByFacilitySuccess = response => ({\n  type: types.GET_QUARANTINE_LIST_BY_FACILITY_SUCCESS,\n  payload: response\n});\nconst getQuarantineListByFacilityFailure = error => ({\n  type: types.GET_QUARANTINE_LIST_BY_FACILITY_FAILURE,\n  payload: error\n});\nconst getQuarantineListByFacility = arg => dispatch => new Promise((resolve, reject) => {\n  dispatch(getQuarantineListByFacilityRequest());\n  httpClient.callApi({\n    url: apiLinks.treatment.quarantineList.get,\n    params: {\n      ...arg\n    }\n  }).then(response => {\n    dispatch(getQuarantineListByFacilitySuccess(response.data));\n    resolve(response.data);\n  }).catch(error => {\n    dispatch(getQuarantineListByFacilityFailure(error));\n    reject();\n  });\n});\nconst completeTreatmentRequest = () => ({\n  type: types.TM_COMPLETE_REQUEST\n});\nconst completeTreatmentSuccess = response => ({\n  type: types.TM_COMPLETE_SUCCESS,\n  payload: response\n});\nconst completeTreatmentFailure = error => ({\n  type: types.TM_COMPLETE_FAILURE,\n  payload: error\n});\nconst completeTreatment = data => dispatch => new Promise((resolve, reject) => {\n  dispatch(completeTreatmentRequest());\n  httpClient.callApi({\n    method: 'PUT',\n    url: apiLinks.treatment.quarantineList.complete,\n    data\n  }).then(response => {\n    dispatch(completeTreatmentSuccess(response));\n    toast.success('Thành công');\n    resolve();\n  }).catch(error => {\n    announceTreatmentError(error);\n    dispatch(completeTreatmentFailure(error));\n    reject();\n  });\n});\nconst transitTreatmentRequest = () => ({\n  type: types.TM_TRANSIT_REQUEST\n});\nconst transitTreatmentSuccess = response => ({\n  type: types.TM_TRANSIT_SUCCESS,\n  payload: response\n});\nconst transitTreatmentFailure = error => ({\n  type: types.TM_TRANSIT_FAILURE,\n  payload: error\n});\nconst transitTreatment = data => dispatch => new Promise((resolve, reject) => {\n  dispatch(transitTreatmentRequest());\n  httpClient.callApi({\n    method: 'PUT',\n    url: apiLinks.treatment.quarantineList.transit,\n    data\n  }).then(response => {\n    dispatch(transitTreatmentSuccess(response));\n    toast.success('Thành công');\n    resolve();\n  }).catch(error => {\n    announceTreatmentError(error);\n    dispatch(transitTreatmentFailure(error));\n    reject();\n  });\n});\nconst outOfProcessTreatmentRequest = () => ({\n  type: types.TM_OUT_OF_PROCESS_REQUEST\n});\nconst outOfProcessTreatmentSuccess = response => ({\n  type: types.TM_OUT_OF_PROCESS_SUCCESS,\n  payload: response\n});\nconst outOfProcessTreatmentFailure = error => ({\n  type: types.TM_OUT_OF_PROCESS_FAILURE,\n  payload: error\n});\nconst outOfProcessTreatment = data => dispatch => new Promise((resolve, reject) => {\n  dispatch(outOfProcessTreatmentRequest());\n  httpClient.callApi({\n    method: 'PUT',\n    url: apiLinks.treatment.quarantineList.outOfProcess,\n    data\n  }).then(response => {\n    dispatch(outOfProcessTreatmentSuccess(response));\n    toast.success('Thành công');\n    resolve();\n  }).catch(error => {\n    announceTreatmentError(error);\n    dispatch(outOfProcessTreatmentFailure(error));\n    reject();\n  });\n});\nconst transferTreatmentRequest = () => ({\n  type: types.TM_TRANSFER_REQUEST\n});\nconst transferTreatmentSuccess = response => ({\n  type: types.TM_TRANSFER_SUCCESS,\n  payload: response\n});\nconst transferTreatmentFailure = error => ({\n  type: types.TM_TRANSFER_FAILURE,\n  payload: error\n});\nconst transferTreatment = data => dispatch => new Promise((resolve, reject) => {\n  dispatch(transferTreatmentRequest());\n  httpClient.callApi({\n    method: 'POST',\n    url: apiLinks.treatment.facility.transfer,\n    data\n  }).then(response => {\n    dispatch(transferTreatmentSuccess(response));\n    toast.success('Thành công');\n    resolve();\n  }).catch(error => {\n    announceTreatmentError(error);\n    dispatch(transferTreatmentFailure(error));\n    reject();\n  });\n});\nexport { getQuarantineListByFacility, completeTreatment, transitTreatment, outOfProcessTreatment, transferTreatment };","map":{"version":3,"names":["toast","httpClient","apiLinks","announceTreatmentError","types","getQuarantineListByFacilityRequest","type","GET_QUARANTINE_LIST_BY_FACILITY_REQUEST","getQuarantineListByFacilitySuccess","response","GET_QUARANTINE_LIST_BY_FACILITY_SUCCESS","payload","getQuarantineListByFacilityFailure","error","GET_QUARANTINE_LIST_BY_FACILITY_FAILURE","getQuarantineListByFacility","arg","dispatch","Promise","resolve","reject","callApi","url","treatment","quarantineList","get","params","then","data","catch","completeTreatmentRequest","TM_COMPLETE_REQUEST","completeTreatmentSuccess","TM_COMPLETE_SUCCESS","completeTreatmentFailure","TM_COMPLETE_FAILURE","completeTreatment","method","complete","success","transitTreatmentRequest","TM_TRANSIT_REQUEST","transitTreatmentSuccess","TM_TRANSIT_SUCCESS","transitTreatmentFailure","TM_TRANSIT_FAILURE","transitTreatment","transit","outOfProcessTreatmentRequest","TM_OUT_OF_PROCESS_REQUEST","outOfProcessTreatmentSuccess","TM_OUT_OF_PROCESS_SUCCESS","outOfProcessTreatmentFailure","TM_OUT_OF_PROCESS_FAILURE","outOfProcessTreatment","outOfProcess","transferTreatmentRequest","TM_TRANSFER_REQUEST","transferTreatmentSuccess","TM_TRANSFER_SUCCESS","transferTreatmentFailure","TM_TRANSFER_FAILURE","transferTreatment","facility","transfer"],"sources":["H:/BAKCO/pj/data reconciliation/src/treatment/actions/quarantine-list.js"],"sourcesContent":["import { toast } from 'react-toastify';\n\nimport httpClient from 'app/utils/http-client';\nimport apiLinks from 'app/utils/api-links';\n\nimport { announceTreatmentError } from 'treatment/utils/helpers';\n\nimport types from './types';\n\nconst getQuarantineListByFacilityRequest = () => ({\n  type: types.GET_QUARANTINE_LIST_BY_FACILITY_REQUEST,\n});\nconst getQuarantineListByFacilitySuccess = (response) => ({\n  type: types.GET_QUARANTINE_LIST_BY_FACILITY_SUCCESS,\n  payload: response,\n});\nconst getQuarantineListByFacilityFailure = (error) => ({\n  type: types.GET_QUARANTINE_LIST_BY_FACILITY_FAILURE,\n  payload: error,\n});\n\nconst getQuarantineListByFacility = (arg) => (dispatch) =>\n  new Promise((resolve, reject) => {\n    dispatch(getQuarantineListByFacilityRequest());\n    httpClient\n      .callApi({\n        url: apiLinks.treatment.quarantineList.get,\n        params: { ...arg },\n      })\n      .then((response) => {\n        dispatch(getQuarantineListByFacilitySuccess(response.data));\n        resolve(response.data);\n      })\n      .catch((error) => {\n        dispatch(getQuarantineListByFacilityFailure(error));\n        reject();\n      });\n  });\n\nconst completeTreatmentRequest = () => ({\n  type: types.TM_COMPLETE_REQUEST,\n});\nconst completeTreatmentSuccess = (response) => ({\n  type: types.TM_COMPLETE_SUCCESS,\n  payload: response,\n});\nconst completeTreatmentFailure = (error) => ({\n  type: types.TM_COMPLETE_FAILURE,\n  payload: error,\n});\n\nconst completeTreatment = (data) => (dispatch) =>\n  new Promise((resolve, reject) => {\n    dispatch(completeTreatmentRequest());\n    httpClient\n      .callApi({\n        method: 'PUT',\n        url: apiLinks.treatment.quarantineList.complete,\n        data,\n      })\n      .then((response) => {\n        dispatch(completeTreatmentSuccess(response));\n        toast.success('Thành công');\n        resolve();\n      })\n      .catch((error) => {\n        announceTreatmentError(error);\n        dispatch(completeTreatmentFailure(error));\n        reject();\n      });\n  });\n\nconst transitTreatmentRequest = () => ({\n  type: types.TM_TRANSIT_REQUEST,\n});\nconst transitTreatmentSuccess = (response) => ({\n  type: types.TM_TRANSIT_SUCCESS,\n  payload: response,\n});\nconst transitTreatmentFailure = (error) => ({\n  type: types.TM_TRANSIT_FAILURE,\n  payload: error,\n});\n\nconst transitTreatment = (data) => (dispatch) =>\n  new Promise((resolve, reject) => {\n    dispatch(transitTreatmentRequest());\n    httpClient\n      .callApi({\n        method: 'PUT',\n        url: apiLinks.treatment.quarantineList.transit,\n        data,\n      })\n      .then((response) => {\n        dispatch(transitTreatmentSuccess(response));\n        toast.success('Thành công');\n        resolve();\n      })\n      .catch((error) => {\n        announceTreatmentError(error);\n        dispatch(transitTreatmentFailure(error));\n        reject();\n      });\n  });\n\nconst outOfProcessTreatmentRequest = () => ({\n  type: types.TM_OUT_OF_PROCESS_REQUEST,\n});\nconst outOfProcessTreatmentSuccess = (response) => ({\n  type: types.TM_OUT_OF_PROCESS_SUCCESS,\n  payload: response,\n});\nconst outOfProcessTreatmentFailure = (error) => ({\n  type: types.TM_OUT_OF_PROCESS_FAILURE,\n  payload: error,\n});\n\nconst outOfProcessTreatment = (data) => (dispatch) =>\n  new Promise((resolve, reject) => {\n    dispatch(outOfProcessTreatmentRequest());\n    httpClient\n      .callApi({\n        method: 'PUT',\n        url: apiLinks.treatment.quarantineList.outOfProcess,\n        data,\n      })\n      .then((response) => {\n        dispatch(outOfProcessTreatmentSuccess(response));\n        toast.success('Thành công');\n        resolve();\n      })\n      .catch((error) => {\n        announceTreatmentError(error);\n        dispatch(outOfProcessTreatmentFailure(error));\n        reject();\n      });\n  });\n\nconst transferTreatmentRequest = () => ({\n  type: types.TM_TRANSFER_REQUEST,\n});\nconst transferTreatmentSuccess = (response) => ({\n  type: types.TM_TRANSFER_SUCCESS,\n  payload: response,\n});\nconst transferTreatmentFailure = (error) => ({\n  type: types.TM_TRANSFER_FAILURE,\n  payload: error,\n});\n\nconst transferTreatment = (data) => (dispatch) =>\n  new Promise((resolve, reject) => {\n    dispatch(transferTreatmentRequest());\n    httpClient\n      .callApi({\n        method: 'POST',\n        url: apiLinks.treatment.facility.transfer,\n        data,\n      })\n      .then((response) => {\n        dispatch(transferTreatmentSuccess(response));\n        toast.success('Thành công');\n        resolve();\n      })\n      .catch((error) => {\n        announceTreatmentError(error);\n        dispatch(transferTreatmentFailure(error));\n        reject();\n      });\n  });\n\nexport {\n  getQuarantineListByFacility,\n  completeTreatment,\n  transitTreatment,\n  outOfProcessTreatment,\n  transferTreatment,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}