{"ast":null,"code":"import httpClient from 'app/utils/http-client';\nimport apiLinks from 'app/utils/api-links';\nimport types from './types';\nconst getExcelCategoryRequest = () => ({\n  type: types.GET_EXCEL_CATEGORY_REQUEST\n});\nconst getExcelCategorySuccess = response => ({\n  type: types.GET_EXCEL_CATEGORY_SUCCESS,\n  payload: response\n});\nconst getExcelCategoryFailure = error => ({\n  type: types.GET_EXCEL_CATEGORY_FAILURE,\n  payload: error\n});\nconst getExcelCategories = () => dispatch => new Promise((resolve, reject) => {\n  dispatch(getExcelCategoryRequest());\n  httpClient.callApi({\n    method: 'GET',\n    url: apiLinks.excelCategories.get\n  }).then(response => {\n    var _response$data$data, _response$data;\n    dispatch(getExcelCategorySuccess((_response$data$data = (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.data) !== null && _response$data$data !== void 0 ? _response$data$data : []));\n    resolve();\n  }).catch(error => {\n    dispatch(getExcelCategoryFailure(error));\n    reject();\n  });\n});\nexport { getExcelCategories };","map":{"version":3,"names":["httpClient","apiLinks","types","getExcelCategoryRequest","type","GET_EXCEL_CATEGORY_REQUEST","getExcelCategorySuccess","response","GET_EXCEL_CATEGORY_SUCCESS","payload","getExcelCategoryFailure","error","GET_EXCEL_CATEGORY_FAILURE","getExcelCategories","dispatch","Promise","resolve","reject","callApi","method","url","excelCategories","get","then","_response$data$data","_response$data","data","catch"],"sources":["H:/BAKCO/pj/data reconciliation/src/home/actions/home.js"],"sourcesContent":["import httpClient from 'app/utils/http-client';\nimport apiLinks from 'app/utils/api-links';\n\nimport types from './types';\n\nconst getExcelCategoryRequest = () => ({ type: types.GET_EXCEL_CATEGORY_REQUEST });\nconst getExcelCategorySuccess = (response) => ({\n  type: types.GET_EXCEL_CATEGORY_SUCCESS,\n  payload: response,\n});\nconst getExcelCategoryFailure = (error) => ({\n  type: types.GET_EXCEL_CATEGORY_FAILURE,\n  payload: error,\n});\n\nconst getExcelCategories = () => (dispatch) =>\n  new Promise((resolve, reject) => {\n    dispatch(getExcelCategoryRequest());\n    httpClient\n      .callApi({\n        method: 'GET',\n        url: apiLinks.excelCategories.get,\n      })\n      .then((response) => {\n        dispatch(getExcelCategorySuccess(response.data?.data ?? []));\n        resolve();\n      })\n      .catch((error) => {\n        dispatch(getExcelCategoryFailure(error));\n        reject();\n      });\n  });\n\nexport { getExcelCategories };\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,uBAAuB;AAC9C,OAAOC,QAAQ,MAAM,qBAAqB;AAE1C,OAAOC,KAAK,MAAM,SAAS;AAE3B,MAAMC,uBAAuB,GAAGA,CAAA,MAAO;EAAEC,IAAI,EAAEF,KAAK,CAACG;AAA2B,CAAC,CAAC;AAClF,MAAMC,uBAAuB,GAAIC,QAAQ,KAAM;EAC7CH,IAAI,EAAEF,KAAK,CAACM,0BAA0B;EACtCC,OAAO,EAAEF;AACX,CAAC,CAAC;AACF,MAAMG,uBAAuB,GAAIC,KAAK,KAAM;EAC1CP,IAAI,EAAEF,KAAK,CAACU,0BAA0B;EACtCH,OAAO,EAAEE;AACX,CAAC,CAAC;AAEF,MAAME,kBAAkB,GAAGA,CAAA,KAAOC,QAAQ,IACxC,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EAC/BH,QAAQ,CAACX,uBAAuB,EAAE,CAAC;EACnCH,UAAU,CACPkB,OAAO,CAAC;IACPC,MAAM,EAAE,KAAK;IACbC,GAAG,EAAEnB,QAAQ,CAACoB,eAAe,CAACC;EAChC,CAAC,CAAC,CACDC,IAAI,CAAEhB,QAAQ,IAAK;IAAA,IAAAiB,mBAAA,EAAAC,cAAA;IAClBX,QAAQ,CAACR,uBAAuB,EAAAkB,mBAAA,IAAAC,cAAA,GAAClB,QAAQ,CAACmB,IAAI,cAAAD,cAAA,uBAAbA,cAAA,CAAeC,IAAI,cAAAF,mBAAA,cAAAA,mBAAA,GAAI,EAAE,CAAC,CAAC;IAC5DR,OAAO,EAAE;EACX,CAAC,CAAC,CACDW,KAAK,CAAEhB,KAAK,IAAK;IAChBG,QAAQ,CAACJ,uBAAuB,CAACC,KAAK,CAAC,CAAC;IACxCM,MAAM,EAAE;EACV,CAAC,CAAC;AACN,CAAC,CAAC;AAEJ,SAASJ,kBAAkB"},"metadata":{},"sourceType":"module"}