{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clone = clone;\nexports.isDate = isDate;\nexports.addMonths = addMonths;\nexports.isSameDay = isSameDay;\nexports.isSameMonth = isSameMonth;\nexports.isDayBefore = isDayBefore;\nexports.isDayAfter = isDayAfter;\nexports.isPastDay = isPastDay;\nexports.isFutureDay = isFutureDay;\nexports.isDayBetween = isDayBetween;\nexports.addDayToRange = addDayToRange;\nexports.isDayInRange = isDayInRange;\nexports.getWeekNumber = getWeekNumber;\n/**\n * Clone a date object.\n *\n * @export\n * @param  {Date} d The date to clone\n * @return {Date} The cloned date\n */\nfunction clone(d) {\n  return new Date(d.getTime());\n}\n\n/**\n * Return `true` if the passed value is a valid JavaScript Date object.\n *\n * @export\n * @param {any} value\n * @returns {Boolean}\n */\nfunction isDate(value) {\n  return value instanceof Date && !isNaN(value.valueOf());\n}\n\n/**\n * Return `d` as a new date with `n` months added.\n *\n * @export\n * @param {Date} d\n * @param {number} n\n */\nfunction addMonths(d, n) {\n  var newDate = clone(d);\n  newDate.setMonth(d.getMonth() + n);\n  return newDate;\n}\n\n/**\n * Return `true` if two dates are the same day, ignoring the time.\n *\n * @export\n * @param  {Date}  d1\n * @param  {Date}  d2\n * @return {Boolean}\n */\nfunction isSameDay(d1, d2) {\n  if (!d1 || !d2) {\n    return false;\n  }\n  return d1.getDate() === d2.getDate() && d1.getMonth() === d2.getMonth() && d1.getFullYear() === d2.getFullYear();\n}\n\n/**\n * Return `true` if two dates fall in the same month.\n *\n * @export\n * @param  {Date}  d1\n * @param  {Date}  d2\n * @return {Boolean}\n */\nfunction isSameMonth(d1, d2) {\n  if (!d1 || !d2) {\n    return false;\n  }\n  return d1.getMonth() === d2.getMonth() && d1.getFullYear() === d2.getFullYear();\n}\n\n/**\n * Returns `true` if the first day is before the second day.\n *\n * @export\n * @param {Date} d1\n * @param {Date} d2\n * @returns {Boolean}\n */\nfunction isDayBefore(d1, d2) {\n  var day1 = clone(d1).setHours(0, 0, 0, 0);\n  var day2 = clone(d2).setHours(0, 0, 0, 0);\n  return day1 < day2;\n}\n\n/**\n * Returns `true` if the first day is after the second day.\n *\n * @export\n * @param {Date} d1\n * @param {Date} d2\n * @returns {Boolean}\n */\nfunction isDayAfter(d1, d2) {\n  var day1 = clone(d1).setHours(0, 0, 0, 0);\n  var day2 = clone(d2).setHours(0, 0, 0, 0);\n  return day1 > day2;\n}\n\n/**\n * Return `true` if a day is in the past, e.g. yesterday or any day\n * before yesterday.\n *\n * @export\n * @param  {Date}  d\n * @return {Boolean}\n */\nfunction isPastDay(d) {\n  var today = new Date();\n  today.setHours(0, 0, 0, 0);\n  return isDayBefore(d, today);\n}\n\n/**\n * Return `true` if a day is in the future, e.g. tomorrow or any day\n * after tomorrow.\n *\n * @export\n * @param  {Date}  d\n * @return {Boolean}\n */\nfunction isFutureDay(d) {\n  var tomorrow = new Date(new Date().getTime() + 24 * 60 * 60 * 1000);\n  tomorrow.setHours(0, 0, 0, 0);\n  return d >= tomorrow;\n}\n\n/**\n * Return `true` if day `d` is between days `d1` and `d2`,\n * without including them.\n *\n * @export\n * @param  {Date}  d\n * @param  {Date}  d1\n * @param  {Date}  d2\n * @return {Boolean}\n */\nfunction isDayBetween(d, d1, d2) {\n  var date = clone(d);\n  date.setHours(0, 0, 0, 0);\n  return isDayAfter(date, d1) && isDayBefore(date, d2) || isDayAfter(date, d2) && isDayBefore(date, d1);\n}\n\n/**\n * Add a day to a range and return a new range. A range is an object with\n * `from` and `to` days.\n *\n * @export\n * @param {Date} day\n * @param {Object} range\n * @return {Object} Returns a new range object\n */\nfunction addDayToRange(day) {\n  var range = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    from: null,\n    to: null\n  };\n  var from = range.from,\n    to = range.to;\n  if (!from) {\n    from = day;\n  } else if (from && to && isSameDay(from, to) && isSameDay(day, from)) {\n    from = null;\n    to = null;\n  } else if (to && isDayBefore(day, from)) {\n    from = day;\n  } else if (to && isSameDay(day, to)) {\n    from = day;\n    to = day;\n  } else {\n    to = day;\n    if (isDayBefore(to, from)) {\n      to = from;\n      from = day;\n    }\n  }\n  return {\n    from: from,\n    to: to\n  };\n}\n\n/**\n * Return `true` if a day is included in a range of days.\n *\n * @export\n * @param  {Date}  day\n * @param  {Object}  range\n * @return {Boolean}\n */\nfunction isDayInRange(day, range) {\n  var from = range.from,\n    to = range.to;\n  return from && isSameDay(day, from) || to && isSameDay(day, to) || from && to && isDayBetween(day, from, to);\n}\n\n/**\n * Return the year's week number (as per ISO, i.e. with the week starting from monday)\n * for the given day.\n *\n * @export\n * @param {Date} day\n * @returns {Number}\n */\nfunction getWeekNumber(day) {\n  var date = clone(day);\n  date.setHours(0, 0, 0);\n  date.setDate(date.getDate() + 4 - (date.getDay() || 7));\n  return Math.ceil(((date - new Date(date.getFullYear(), 0, 1)) / 8.64e7 + 1) / 7);\n}\nexports.default = {\n  addDayToRange: addDayToRange,\n  addMonths: addMonths,\n  clone: clone,\n  getWeekNumber: getWeekNumber,\n  isDate: isDate,\n  isDayAfter: isDayAfter,\n  isDayBefore: isDayBefore,\n  isDayBetween: isDayBetween,\n  isDayInRange: isDayInRange,\n  isFutureDay: isFutureDay,\n  isPastDay: isPastDay,\n  isSameDay: isSameDay,\n  isSameMonth: isSameMonth\n};","map":{"version":3,"sources":["../src/DateUtils.js"],"names":["clone","d","Date","getTime","isDate","value","isNaN","valueOf","addMonths","n","newDate","setMonth","getMonth","isSameDay","d1","d2","getDate","getFullYear","isSameMonth","isDayBefore","day1","setHours","day2","isDayAfter","isPastDay","today","isFutureDay","tomorrow","isDayBetween","date","addDayToRange","day","range","from","to","isDayInRange","getWeekNumber","setDate","getDay","Math","ceil"],"mappings":"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","sourcesContent":["/**\n * Clone a date object.\n *\n * @export\n * @param  {Date} d The date to clone\n * @return {Date} The cloned date\n */\nexport function clone(d) {\n  return new Date(d.getTime());\n}\n\n/**\n * Return `true` if the passed value is a valid JavaScript Date object.\n *\n * @export\n * @param {any} value\n * @returns {Boolean}\n */\nexport function isDate(value) {\n  return value instanceof Date && !isNaN(value.valueOf());\n}\n\n/**\n * Return `d` as a new date with `n` months added.\n *\n * @export\n * @param {Date} d\n * @param {number} n\n */\nexport function addMonths(d, n) {\n  const newDate = clone(d);\n  newDate.setMonth(d.getMonth() + n);\n  return newDate;\n}\n\n/**\n * Return `true` if two dates are the same day, ignoring the time.\n *\n * @export\n * @param  {Date}  d1\n * @param  {Date}  d2\n * @return {Boolean}\n */\nexport function isSameDay(d1, d2) {\n  if (!d1 || !d2) {\n    return false;\n  }\n  return (\n    d1.getDate() === d2.getDate() &&\n    d1.getMonth() === d2.getMonth() &&\n    d1.getFullYear() === d2.getFullYear()\n  );\n}\n\n/**\n * Return `true` if two dates fall in the same month.\n *\n * @export\n * @param  {Date}  d1\n * @param  {Date}  d2\n * @return {Boolean}\n */\nexport function isSameMonth(d1, d2) {\n  if (!d1 || !d2) {\n    return false;\n  }\n  return (\n    d1.getMonth() === d2.getMonth() && d1.getFullYear() === d2.getFullYear()\n  );\n}\n\n/**\n * Returns `true` if the first day is before the second day.\n *\n * @export\n * @param {Date} d1\n * @param {Date} d2\n * @returns {Boolean}\n */\nexport function isDayBefore(d1, d2) {\n  const day1 = clone(d1).setHours(0, 0, 0, 0);\n  const day2 = clone(d2).setHours(0, 0, 0, 0);\n  return day1 < day2;\n}\n\n/**\n * Returns `true` if the first day is after the second day.\n *\n * @export\n * @param {Date} d1\n * @param {Date} d2\n * @returns {Boolean}\n */\nexport function isDayAfter(d1, d2) {\n  const day1 = clone(d1).setHours(0, 0, 0, 0);\n  const day2 = clone(d2).setHours(0, 0, 0, 0);\n  return day1 > day2;\n}\n\n/**\n * Return `true` if a day is in the past, e.g. yesterday or any day\n * before yesterday.\n *\n * @export\n * @param  {Date}  d\n * @return {Boolean}\n */\nexport function isPastDay(d) {\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  return isDayBefore(d, today);\n}\n\n/**\n * Return `true` if a day is in the future, e.g. tomorrow or any day\n * after tomorrow.\n *\n * @export\n * @param  {Date}  d\n * @return {Boolean}\n */\nexport function isFutureDay(d) {\n  const tomorrow = new Date(new Date().getTime() + 24 * 60 * 60 * 1000);\n  tomorrow.setHours(0, 0, 0, 0);\n  return d >= tomorrow;\n}\n\n/**\n * Return `true` if day `d` is between days `d1` and `d2`,\n * without including them.\n *\n * @export\n * @param  {Date}  d\n * @param  {Date}  d1\n * @param  {Date}  d2\n * @return {Boolean}\n */\nexport function isDayBetween(d, d1, d2) {\n  const date = clone(d);\n  date.setHours(0, 0, 0, 0);\n  return (\n    (isDayAfter(date, d1) && isDayBefore(date, d2)) ||\n    (isDayAfter(date, d2) && isDayBefore(date, d1))\n  );\n}\n\n/**\n * Add a day to a range and return a new range. A range is an object with\n * `from` and `to` days.\n *\n * @export\n * @param {Date} day\n * @param {Object} range\n * @return {Object} Returns a new range object\n */\nexport function addDayToRange(day, range = { from: null, to: null }) {\n  let { from, to } = range;\n  if (!from) {\n    from = day;\n  } else if (from && to && isSameDay(from, to) && isSameDay(day, from)) {\n    from = null;\n    to = null;\n  } else if (to && isDayBefore(day, from)) {\n    from = day;\n  } else if (to && isSameDay(day, to)) {\n    from = day;\n    to = day;\n  } else {\n    to = day;\n    if (isDayBefore(to, from)) {\n      to = from;\n      from = day;\n    }\n  }\n\n  return { from, to };\n}\n\n/**\n * Return `true` if a day is included in a range of days.\n *\n * @export\n * @param  {Date}  day\n * @param  {Object}  range\n * @return {Boolean}\n */\nexport function isDayInRange(day, range) {\n  const { from, to } = range;\n  return (\n    (from && isSameDay(day, from)) ||\n    (to && isSameDay(day, to)) ||\n    (from && to && isDayBetween(day, from, to))\n  );\n}\n\n/**\n * Return the year's week number (as per ISO, i.e. with the week starting from monday)\n * for the given day.\n *\n * @export\n * @param {Date} day\n * @returns {Number}\n */\nexport function getWeekNumber(day) {\n  const date = clone(day);\n  date.setHours(0, 0, 0);\n  date.setDate(date.getDate() + 4 - (date.getDay() || 7));\n  return Math.ceil(\n    ((date - new Date(date.getFullYear(), 0, 1)) / 8.64e7 + 1) / 7\n  );\n}\n\nexport default {\n  addDayToRange,\n  addMonths,\n  clone,\n  getWeekNumber,\n  isDate,\n  isDayAfter,\n  isDayBefore,\n  isDayBetween,\n  isDayInRange,\n  isFutureDay,\n  isPastDay,\n  isSameDay,\n  isSameMonth,\n};\n"]},"metadata":{},"sourceType":"script"}