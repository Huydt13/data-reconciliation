{"ast":null,"code":"import apiLinks from 'app/utils/api-links';\nimport httpClient from 'app/utils/http-client';\nimport types from 'contact/actions/types';\nconst selectEstate = estate => ({\n  type: types.SELECT_ESTATE,\n  payload: estate\n});\nconst selectAirplane = airplane => ({\n  type: types.SELECT_AIRPLANE,\n  payload: airplane\n});\nconst selectVehicle = vehicle => ({\n  type: types.SELECT_VEHICLE,\n  payload: vehicle\n});\nconst getLocationVisitorsRequest = () => ({\n  type: types.GET_LOCATION_VISITORS_REQUEST\n});\nconst getLocationVisitorsSuccess = response => ({\n  type: types.GET_LOCATION_VISITORS_SUCCESS,\n  payload: response\n});\nconst getLocationVisitorsFailure = () => ({\n  type: types.GET_LOCATION_VISITORS_FAILURE\n});\nconst getLocationVisitors = _ref => {\n  let {\n    locationId,\n    locationType,\n    fromTime,\n    pageIndex,\n    pageSize\n  } = _ref;\n  return dispatch => new Promise((resolve, reject) => {\n    dispatch(getLocationVisitorsRequest());\n    httpClient.callApi({\n      url: apiLinks.contacts.getVisitors,\n      params: {\n        locationId,\n        locationType,\n        fromTime,\n        pageIndex,\n        pageSize\n      }\n    }).then(_ref2 => {\n      let {\n        data\n      } = _ref2;\n      dispatch(getLocationVisitorsSuccess(data));\n      resolve(data);\n    }).catch(() => {\n      dispatch(getLocationVisitorsFailure());\n      reject();\n    });\n  });\n};\nconst addLocationVisitorsRequest = () => ({\n  type: types.ADD_LOCATION_VISITORS_REQUEST\n});\nconst addLocationVisitorsSuccess = response => ({\n  type: types.ADD_LOCATION_VISITORS_SUCCESS,\n  payload: response\n});\nconst addLocationVisitorsFailure = () => ({\n  type: types.ADD_LOCATION_VISITORS_FAILURE\n});\nconst addLocationVisitors = data => dispatch => new Promise((resolve, reject) => {\n  dispatch(addLocationVisitorsRequest());\n  httpClient.callApi({\n    method: 'PUT',\n    url: apiLinks.contacts.addVisitors,\n    data\n  }).then(response => {\n    dispatch(addLocationVisitorsSuccess(response.data));\n    resolve();\n  }).catch(() => {\n    dispatch(addLocationVisitorsFailure());\n    reject();\n  });\n});\nconst removeLocationVisitorRequest = () => ({\n  type: types.REMOVE_LOCATION_VISITOR_REQUEST\n});\nconst removeLocationVisitorSuccess = response => ({\n  type: types.REMOVE_LOCATION_VISITOR_SUCCESS,\n  payload: response\n});\nconst removeLocationVisitorFailure = () => ({\n  type: types.REMOVE_LOCATION_VISITOR_FAILURE\n});\nconst removeLocationVisitor = data => dispatch => new Promise((resolve, reject) => {\n  dispatch(removeLocationVisitorRequest());\n  httpClient.callApi({\n    method: 'DELETE',\n    url: apiLinks.contacts.getVisitors,\n    data\n  }).then(response => {\n    dispatch(removeLocationVisitorSuccess(response.data));\n    resolve();\n  }).catch(() => {\n    dispatch(removeLocationVisitorFailure());\n    reject();\n  });\n});\nconst getProfileListRequest = () => ({\n  type: types.GET_PROFILE_LIST_REQUEST\n});\nconst getProfileListSuccess = response => ({\n  type: types.GET_PROFILE_LIST_SUCCESS,\n  payload: response\n});\nconst getProfileListFailure = () => ({\n  type: types.GET_PROFILE_LIST_FAILURE\n});\nconst getProfileList = data => dispatch => new Promise((resolve, reject) => {\n  dispatch(getProfileListRequest());\n  httpClient.callApi({\n    url: `${apiLinks.infectionChain.subjects.getProfileList}?${data.map(id => `profileIds=${id}`).join('&')}`\n  }).then(response => {\n    dispatch(getProfileListSuccess(response.data));\n    resolve(response.data);\n  }).catch(() => {\n    dispatch(getProfileListFailure());\n    reject();\n  });\n});\nconst checkEstateName = name => new Promise((resolve, reject) => {\n  httpClient.callApi({\n    url: apiLinks.contacts.checkEstateName + name\n  }).then(response => {\n    resolve(response.data);\n  }).catch(() => {\n    reject();\n  });\n});\nexport { selectEstate, selectAirplane, selectVehicle, getLocationVisitors, addLocationVisitors, removeLocationVisitor, getProfileList, checkEstateName };","map":{"version":3,"names":["apiLinks","httpClient","types","selectEstate","estate","type","SELECT_ESTATE","payload","selectAirplane","airplane","SELECT_AIRPLANE","selectVehicle","vehicle","SELECT_VEHICLE","getLocationVisitorsRequest","GET_LOCATION_VISITORS_REQUEST","getLocationVisitorsSuccess","response","GET_LOCATION_VISITORS_SUCCESS","getLocationVisitorsFailure","GET_LOCATION_VISITORS_FAILURE","getLocationVisitors","_ref","locationId","locationType","fromTime","pageIndex","pageSize","dispatch","Promise","resolve","reject","callApi","url","contacts","getVisitors","params","then","_ref2","data","catch","addLocationVisitorsRequest","ADD_LOCATION_VISITORS_REQUEST","addLocationVisitorsSuccess","ADD_LOCATION_VISITORS_SUCCESS","addLocationVisitorsFailure","ADD_LOCATION_VISITORS_FAILURE","addLocationVisitors","method","addVisitors","removeLocationVisitorRequest","REMOVE_LOCATION_VISITOR_REQUEST","removeLocationVisitorSuccess","REMOVE_LOCATION_VISITOR_SUCCESS","removeLocationVisitorFailure","REMOVE_LOCATION_VISITOR_FAILURE","removeLocationVisitor","getProfileListRequest","GET_PROFILE_LIST_REQUEST","getProfileListSuccess","GET_PROFILE_LIST_SUCCESS","getProfileListFailure","GET_PROFILE_LIST_FAILURE","getProfileList","infectionChain","subjects","map","id","join","checkEstateName","name"],"sources":["H:/BAKCO/pj/data reconciliation/src/contact/actions/location.js"],"sourcesContent":["import apiLinks from 'app/utils/api-links';\nimport httpClient from 'app/utils/http-client';\nimport types from 'contact/actions/types';\n\nconst selectEstate = (estate) => ({\n  type: types.SELECT_ESTATE,\n  payload: estate,\n});\nconst selectAirplane = (airplane) => ({\n  type: types.SELECT_AIRPLANE,\n  payload: airplane,\n});\nconst selectVehicle = (vehicle) => ({\n  type: types.SELECT_VEHICLE,\n  payload: vehicle,\n});\n\nconst getLocationVisitorsRequest = () => ({\n  type: types.GET_LOCATION_VISITORS_REQUEST,\n});\nconst getLocationVisitorsSuccess = (response) => ({\n  type: types.GET_LOCATION_VISITORS_SUCCESS,\n  payload: response,\n});\nconst getLocationVisitorsFailure = () => ({\n  type: types.GET_LOCATION_VISITORS_FAILURE,\n});\n\nconst getLocationVisitors =\n  ({ locationId, locationType, fromTime, pageIndex, pageSize }) =>\n  (dispatch) =>\n    new Promise((resolve, reject) => {\n      dispatch(getLocationVisitorsRequest());\n      httpClient\n        .callApi({\n          url: apiLinks.contacts.getVisitors,\n          params: { locationId, locationType, fromTime, pageIndex, pageSize },\n        })\n        .then(({ data }) => {\n          dispatch(getLocationVisitorsSuccess(data));\n          resolve(data);\n        })\n        .catch(() => {\n          dispatch(getLocationVisitorsFailure());\n          reject();\n        });\n    });\n\nconst addLocationVisitorsRequest = () => ({\n  type: types.ADD_LOCATION_VISITORS_REQUEST,\n});\nconst addLocationVisitorsSuccess = (response) => ({\n  type: types.ADD_LOCATION_VISITORS_SUCCESS,\n  payload: response,\n});\nconst addLocationVisitorsFailure = () => ({\n  type: types.ADD_LOCATION_VISITORS_FAILURE,\n});\n\nconst addLocationVisitors = (data) => (dispatch) =>\n  new Promise((resolve, reject) => {\n    dispatch(addLocationVisitorsRequest());\n    httpClient\n      .callApi({\n        method: 'PUT',\n        url: apiLinks.contacts.addVisitors,\n        data,\n      })\n      .then((response) => {\n        dispatch(addLocationVisitorsSuccess(response.data));\n        resolve();\n      })\n      .catch(() => {\n        dispatch(addLocationVisitorsFailure());\n        reject();\n      });\n  });\n\nconst removeLocationVisitorRequest = () => ({\n  type: types.REMOVE_LOCATION_VISITOR_REQUEST,\n});\nconst removeLocationVisitorSuccess = (response) => ({\n  type: types.REMOVE_LOCATION_VISITOR_SUCCESS,\n  payload: response,\n});\nconst removeLocationVisitorFailure = () => ({\n  type: types.REMOVE_LOCATION_VISITOR_FAILURE,\n});\n\nconst removeLocationVisitor = (data) => (dispatch) =>\n  new Promise((resolve, reject) => {\n    dispatch(removeLocationVisitorRequest());\n    httpClient\n      .callApi({\n        method: 'DELETE',\n        url: apiLinks.contacts.getVisitors,\n        data,\n      })\n      .then((response) => {\n        dispatch(removeLocationVisitorSuccess(response.data));\n        resolve();\n      })\n      .catch(() => {\n        dispatch(removeLocationVisitorFailure());\n        reject();\n      });\n  });\n\nconst getProfileListRequest = () => ({ type: types.GET_PROFILE_LIST_REQUEST });\nconst getProfileListSuccess = (response) => ({\n  type: types.GET_PROFILE_LIST_SUCCESS,\n  payload: response,\n});\nconst getProfileListFailure = () => ({ type: types.GET_PROFILE_LIST_FAILURE });\n\nconst getProfileList = (data) => (dispatch) =>\n  new Promise((resolve, reject) => {\n    dispatch(getProfileListRequest());\n    httpClient\n      .callApi({\n        url: `${apiLinks.infectionChain.subjects.getProfileList}?${data\n          .map((id) => `profileIds=${id}`)\n          .join('&')}`,\n      })\n      .then((response) => {\n        dispatch(getProfileListSuccess(response.data));\n        resolve(response.data);\n      })\n      .catch(() => {\n        dispatch(getProfileListFailure());\n        reject();\n      });\n  });\n\nconst checkEstateName = (name) =>\n  new Promise((resolve, reject) => {\n    httpClient\n      .callApi({\n        url: apiLinks.contacts.checkEstateName + name,\n      })\n      .then((response) => {\n        resolve(response.data);\n      })\n      .catch(() => {\n        reject();\n      });\n  });\nexport {\n  selectEstate,\n  selectAirplane,\n  selectVehicle,\n  getLocationVisitors,\n  addLocationVisitors,\n  removeLocationVisitor,\n  getProfileList,\n  checkEstateName,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}