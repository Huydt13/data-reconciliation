{"ast":null,"code":"var _jsxFileName = \"H:\\\\BAKCO\\\\pj\\\\data reconciliation\\\\src\\\\profile-train\\\\components\\\\ImportModal.js\";\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable no-await-in-loop */\n/* eslint-disable camelcase */\n/* eslint-disable no-unused-vars */\n/* eslint-disable react/prop-types */\n/* eslint-disable no-param-reassign */\nimport React, { useState, useEffect, useMemo, useCallback, useRef } from 'react';\nimport styled from 'styled-components';\nimport { toast } from 'react-toastify';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport xlsx from 'xlsx';\nimport { Modal, Button, Message, Icon, Header, Tab, List, Dimmer, Loader } from 'semantic-ui-react';\nimport { DataTable } from 'app/components/shared';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { importQuickTestJson } from 'medical-test/actions/medical-test';\nimport { getUnderlyingDiseases } from 'profile/actions/profile';\nimport { formatToDate, formatAddressToString, downloadFile, formatToTime, deburr, getExaminationError } from 'app/utils/helpers';\nimport { formatGender } from 'profile/utils/helpers';\nimport { IMMUNIZATION_STATUSES } from 'profile/utils/constants';\nimport locations from 'app/assets/mock/locations';\nimport excelTemplate from 'app/assets/excels/Mẫu import hồ sơ thuộc nhóm nguy cơ.xlsx';\nconst Wrapper = styled.div`\n    position: relative;\n  `;\nconst MenuWrapper = styled.div`\n    margin-top: 15px;\n    & .tab {\n      padding-top: 0.1em !important;\n    }\n    & .fVDZkI {\n      margin-top: 0 !important;\n    }\n  `;\nconst resultsOfExam = ['Dương tính', 'Âm tính'];\nconst immunizationStatusOptions = [{\n  key: 1,\n  value: IMMUNIZATION_STATUSES.NO_VACCINE,\n  text: 'Chưa tiêm'\n}, {\n  key: 2,\n  value: IMMUNIZATION_STATUSES.ONE_SHOT,\n  text: 'Tiêm 1 mũi'\n}, {\n  key: 3,\n  value: IMMUNIZATION_STATUSES.TWO_SHOT,\n  text: 'Tiêm 2 mũi'\n}];\nconst steps = {\n  downloadTemplate: 0,\n  reviewData: 1,\n  result: 2\n};\nconst ImportModal = _ref => {\n  let {\n    open,\n    onClose: onCloseProp,\n    onRefresh\n  } = _ref;\n  const [step, setStep] = useState(steps.downloadTemplate);\n  const [disabled, setDisabled] = useState(false);\n  const fileInputRef = useRef();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [data, setData] = useState([]);\n  const [error, setError] = useState([]);\n  const [result, setResult] = useState([]);\n  const dispatch = useDispatch();\n  const {\n    underlyingDiseaseData: {\n      data: underlyingDiseaseList\n    }\n  } = useSelector(state => state.profile);\n  const {\n    importQuickTestJsonLoading\n  } = useSelector(state => state.medicalTest);\n  const loading = importQuickTestJsonLoading;\n  const model = useMemo(() => [{\n    header: 'Họ tên(*)',\n    assign: 'name',\n    formatter: value => value.toUpperCase().trim(),\n    validate: (__, value) => {\n      if (!value) {\n        return 'Bắt buộc nhập tên';\n      }\n      return false;\n    }\n  }, {\n    header: 'Ngày sinh(*)',\n    assign: 'dateOfBirth',\n    formatter: value => moment(value, 'DD/MM/YYYY').format('YYYY-MM-DDT07:00:00'),\n    validate: (__, value) => {\n      if (!value) {\n        return 'Bắt buộc nhập ngày sinh';\n      }\n      const date = moment(value, 'DD/MM/YYYY');\n      const beforeDate = moment('01/01/1921', 'DD/MM/YYYY');\n      const afterDate = moment().endOf('day');\n      if (date > afterDate || date < beforeDate) {\n        return `Ngày sinh phải nằm trong khoảng từ ${beforeDate.format('DD/MM/YYYY')} đến ${afterDate.format('DD/MM/YYYY')}`;\n      }\n      return false;\n    }\n  }, {\n    header: 'Giới tính  (Nữ/Nam)(*)',\n    assign: 'gender',\n    formatter: value => formatGender(value)\n  }, {\n    header: 'CMND /CCCD(*)',\n    assign: 'identityCard',\n    validate: (__, value) => {\n      if (!value) {\n        return 'Bắt buộc nhập CMND/CCCD';\n      }\n      return false;\n    }\n  }, {\n    header: 'Điện thoại (*)',\n    assign: 'phoneNumber',\n    formatter: value => typeof value === 'number' ? `0${value}` : value,\n    validate: (__, value) => {\n      if (!value) {\n        return 'Bắt buộc nhập số điện thoại';\n      }\n      return false;\n    }\n  }, {\n    header: 'Số nhà, tên đường (*)',\n    assign: 'streetHouseNumber',\n    validate: (__, value) => {\n      if (!value) {\n        return 'Bắt buộc nhập địa chỉ';\n      }\n      return false;\n    }\n  }, {\n    header: 'Tỉnh/Thành phố (*)',\n    assign: 'provinceValue',\n    formatter: (__, value) => {\n      var _locations$find;\n      return locations === null || locations === void 0 ? void 0 : (_locations$find = locations.find(p => {\n        var _p$label, _p$label$toLowerCase;\n        return p === null || p === void 0 ? void 0 : (_p$label = p.label) === null || _p$label === void 0 ? void 0 : (_p$label$toLowerCase = _p$label.toLowerCase()) === null || _p$label$toLowerCase === void 0 ? void 0 : _p$label$toLowerCase.includes(`${value}`.toLowerCase());\n      })) === null || _locations$find === void 0 ? void 0 : _locations$find.value;\n    },\n    validate: (__, value) => {\n      if (!value) {\n        return 'Bắt buộc nhập tỉnh/thành phố';\n      }\n      const province = locations === null || locations === void 0 ? void 0 : locations.find(p => {\n        var _p$label2, _p$label2$toLowerCase;\n        return p === null || p === void 0 ? void 0 : (_p$label2 = p.label) === null || _p$label2 === void 0 ? void 0 : (_p$label2$toLowerCase = _p$label2.toLowerCase()) === null || _p$label2$toLowerCase === void 0 ? void 0 : _p$label2$toLowerCase.includes(`${value}`.toLowerCase());\n      });\n      if (!province) {\n        return 'Tỉnh/Thành phố không hợp lệ';\n      }\n      return false;\n    }\n  }, {\n    header: 'Quận/Huyện/ TP/TX (*)',\n    assign: 'districtValue',\n    formatter: (obj, value) => {\n      var _locations$find2, _locations$find2$dist, _locations$find2$dist2;\n      return locations === null || locations === void 0 ? void 0 : (_locations$find2 = locations.find(p => {\n        var _p$value, _p$value$toLowerCase;\n        return p === null || p === void 0 ? void 0 : (_p$value = p.value) === null || _p$value === void 0 ? void 0 : (_p$value$toLowerCase = _p$value.toLowerCase()) === null || _p$value$toLowerCase === void 0 ? void 0 : _p$value$toLowerCase.includes(`${obj.provinceValue}`.toLowerCase());\n      })) === null || _locations$find2 === void 0 ? void 0 : (_locations$find2$dist = _locations$find2.districts) === null || _locations$find2$dist === void 0 ? void 0 : (_locations$find2$dist2 = _locations$find2$dist.find(d => {\n        var _d$label, _d$label$toLowerCase;\n        return d === null || d === void 0 ? void 0 : (_d$label = d.label) === null || _d$label === void 0 ? void 0 : (_d$label$toLowerCase = _d$label.toLowerCase()) === null || _d$label$toLowerCase === void 0 ? void 0 : _d$label$toLowerCase.includes(`${value}`.toLowerCase());\n      })) === null || _locations$find2$dist2 === void 0 ? void 0 : _locations$find2$dist2.value;\n    },\n    validate: (obj, value) => {\n      if (!value) {\n        return 'Bắt buộc nhập quận/huyện/thành phố/thị xã';\n      }\n      if (obj === null || obj === void 0 ? void 0 : obj.provinceValue) {\n        var _locations$find3, _locations$find3$dist;\n        const district = locations === null || locations === void 0 ? void 0 : (_locations$find3 = locations.find(p => {\n          var _p$value2, _p$value2$toLowerCase;\n          return (_p$value2 = p.value) === null || _p$value2 === void 0 ? void 0 : (_p$value2$toLowerCase = _p$value2.toLowerCase()) === null || _p$value2$toLowerCase === void 0 ? void 0 : _p$value2$toLowerCase.includes(`${obj.provinceValue}`.toLowerCase());\n        })) === null || _locations$find3 === void 0 ? void 0 : (_locations$find3$dist = _locations$find3.districts) === null || _locations$find3$dist === void 0 ? void 0 : _locations$find3$dist.find(d => {\n          var _d$label2, _d$label2$toLowerCase;\n          return (_d$label2 = d.label) === null || _d$label2 === void 0 ? void 0 : (_d$label2$toLowerCase = _d$label2.toLowerCase()) === null || _d$label2$toLowerCase === void 0 ? void 0 : _d$label2$toLowerCase.includes(`${value}`.toLowerCase());\n        });\n        if (!district) {\n          return 'Quận/Huyện/Thành phố/Thị xã không hợp lệ';\n        }\n      }\n      return false;\n    }\n  }, {\n    header: 'Phường/Xã/ Thị trấn (*)',\n    assign: 'wardValue',\n    formatter: (obj, value) => {\n      var _locations$find4, _locations$find4$dist, _locations$find4$dist2, _locations$find4$dist3, _locations$find4$dist4;\n      return locations === null || locations === void 0 ? void 0 : (_locations$find4 = locations.find(p => {\n        var _p$value3, _p$value3$toLowerCase;\n        return p === null || p === void 0 ? void 0 : (_p$value3 = p.value) === null || _p$value3 === void 0 ? void 0 : (_p$value3$toLowerCase = _p$value3.toLowerCase()) === null || _p$value3$toLowerCase === void 0 ? void 0 : _p$value3$toLowerCase.includes(`${obj.provinceValue}`.toLowerCase());\n      })) === null || _locations$find4 === void 0 ? void 0 : (_locations$find4$dist = _locations$find4.districts) === null || _locations$find4$dist === void 0 ? void 0 : (_locations$find4$dist2 = _locations$find4$dist.find(d => {\n        var _d$value, _d$value$toLowerCase;\n        return d === null || d === void 0 ? void 0 : (_d$value = d.value) === null || _d$value === void 0 ? void 0 : (_d$value$toLowerCase = _d$value.toLowerCase()) === null || _d$value$toLowerCase === void 0 ? void 0 : _d$value$toLowerCase.includes(`${obj.districtValue}`.toLowerCase());\n      })) === null || _locations$find4$dist2 === void 0 ? void 0 : (_locations$find4$dist3 = _locations$find4$dist2.wards) === null || _locations$find4$dist3 === void 0 ? void 0 : (_locations$find4$dist4 = _locations$find4$dist3.find(d => {\n        var _d$label3, _d$label3$toLowerCase;\n        return d === null || d === void 0 ? void 0 : (_d$label3 = d.label) === null || _d$label3 === void 0 ? void 0 : (_d$label3$toLowerCase = _d$label3.toLowerCase()) === null || _d$label3$toLowerCase === void 0 ? void 0 : _d$label3$toLowerCase.includes(`${value}`.toLowerCase());\n      })) === null || _locations$find4$dist4 === void 0 ? void 0 : _locations$find4$dist4.value;\n    },\n    validate: (obj, value) => {\n      if (!value) {\n        return 'Bắt buộc nhập phường/xã/thị trấn';\n      }\n      if ((obj === null || obj === void 0 ? void 0 : obj.provinceValue) && (obj === null || obj === void 0 ? void 0 : obj.districtValue)) {\n        var _locations$find5, _locations$find5$dist, _locations$find5$dist2, _locations$find5$dist3;\n        const ward = locations === null || locations === void 0 ? void 0 : (_locations$find5 = locations.find(p => {\n          var _p$value4, _p$value4$toLowerCase;\n          return p === null || p === void 0 ? void 0 : (_p$value4 = p.value) === null || _p$value4 === void 0 ? void 0 : (_p$value4$toLowerCase = _p$value4.toLowerCase()) === null || _p$value4$toLowerCase === void 0 ? void 0 : _p$value4$toLowerCase.includes(`${obj.provinceValue}`.toLowerCase());\n        })) === null || _locations$find5 === void 0 ? void 0 : (_locations$find5$dist = _locations$find5.districts) === null || _locations$find5$dist === void 0 ? void 0 : (_locations$find5$dist2 = _locations$find5$dist.find(d => {\n          var _d$value2, _d$value2$toLowerCase;\n          return d === null || d === void 0 ? void 0 : (_d$value2 = d.value) === null || _d$value2 === void 0 ? void 0 : (_d$value2$toLowerCase = _d$value2.toLowerCase()) === null || _d$value2$toLowerCase === void 0 ? void 0 : _d$value2$toLowerCase.includes(`${obj.districtValue}`.toLowerCase());\n        })) === null || _locations$find5$dist2 === void 0 ? void 0 : (_locations$find5$dist3 = _locations$find5$dist2.wards) === null || _locations$find5$dist3 === void 0 ? void 0 : _locations$find5$dist3.find(d => {\n          var _d$label4, _d$label4$toLowerCase;\n          return d === null || d === void 0 ? void 0 : (_d$label4 = d.label) === null || _d$label4 === void 0 ? void 0 : (_d$label4$toLowerCase = _d$label4.toLowerCase()) === null || _d$label4$toLowerCase === void 0 ? void 0 : _d$label4$toLowerCase.includes(`${value}`.toLowerCase());\n        });\n        if (!ward) {\n          return 'Phường/Xã/Thị trấn không hợp lệ';\n        }\n      }\n      return false;\n    }\n  }, {\n    header: 'KP/ấp',\n    assign: 'quarter',\n    validate: (__, value) => {\n      if (!value) {\n        return 'Bắt buộc nhập khu phố/ấp';\n      }\n      return false;\n    }\n  }, {\n    header: 'Tổ(*)',\n    assign: 'quarterGroup',\n    validate: (__, value) => {\n      if (!value) {\n        return 'Bắt buộc nhập tổ dân phố';\n      }\n      return false;\n    }\n  },\n  // {\n  //   header: 'Tiêm vắc xin (1 mũi/2 mũi/ chưa tiêm)(*)',\n  //   assign: 'immunizationStatus',\n  //   formatter: (value) => {\n  //     const status = immunizationStatusOptions.find(\n  //       (p) => p.text.toUpperCase() === value.toUpperCase(),\n  //     );\n  //     return status?.value;\n  //   },\n  //   validate: (__, value) => {\n  //     if (!value) {\n  //       return 'Bắt buộc chọn trạng thái tiêm vắc xin';\n  //     }\n\n  //     const status = immunizationStatusOptions.find(\n  //       (p) => p.text.toUpperCase() === value.toUpperCase(),\n  //     );\n  //     if (!status) {\n  //       return 'Trạng thái tiêm vắc xin không đúng định dạng';\n  //     }\n  //     return false;\n  //   },\n  // },\n  // {\n  //   header: 'Loại Vaccine (mũi 1)',\n  //   assign: 'vaccineFirst',\n  //   validate: (obj, value) => {\n  //     if (typeof obj.immunizationStatus === 'number') {\n  //       if (\n  //         !value &&\n  //         obj.immunizationStatus >= IMMUNIZATION_STATUSES.ONE_SHOT\n  //       ) {\n  //         return 'Bắt buộc nhập loại vắc xin (mũi 1)';\n  //       }\n  //     }\n  //     return false;\n  //   },\n  // },\n  // {\n  //   header: 'Ngày tiêm mũi 1',\n  //   assign: 'injectionDateFirst',\n  //   formatter: (value) =>\n  //     moment(value, 'DD/MM/YYYY').format('YYYY-MM-DDT07:00:00'),\n  //   validate: (obj, value) => {\n  //     if (typeof obj.immunizationStatus === 'number') {\n  //       if (\n  //         !value &&\n  //         obj.immunizationStatus >= IMMUNIZATION_STATUSES.ONE_SHOT\n  //       ) {\n  //         return 'Bắt buộc nhập ngày tiêm (mũi 1)';\n  //       }\n\n  //       const date = moment(value, 'DD/MM/YYYY');\n  //       const beforeDate = moment('01/01/2021', 'DD/MM/YYYY');\n  //       const afterDate = moment().endOf('day');\n  //       if (date > afterDate || date < beforeDate) {\n  //         return `Ngày tiêm phải nằm trong khoảng từ ${beforeDate.format(\n  //           'DD/MM/YYYY',\n  //         )} đến ${afterDate.format('DD/MM/YYYY')}`;\n  //       }\n  //     }\n  //     return false;\n  //   },\n  // },\n  // {\n  //   header: 'Loại Vaccine (mũi 2)',\n  //   assign: 'vaccineSecond',\n  //   validate: (obj, value) => {\n  //     if (typeof obj.immunizationStatus === 'number') {\n  //       if (\n  //         !value &&\n  //         obj.immunizationStatus >= IMMUNIZATION_STATUSES.TWO_SHOT\n  //       ) {\n  //         return 'Bắt buộc nhập loại vắc xin (mũi 2)';\n  //       }\n  //     }\n  //     return false;\n  //   },\n  // },\n  // {\n  //   header: 'Ngày tiêm mũi 2',\n  //   assign: 'injectionDateSecond',\n  //   formatter: (value) =>\n  //     moment(value, 'DD/MM/YYYY').format('YYYY-MM-DDT07:00:00'),\n  //   validate: (obj, value) => {\n  //     if (typeof obj.immunizationStatus === 'number') {\n  //       if (\n  //         !value &&\n  //         obj.immunizationStatus >= IMMUNIZATION_STATUSES.TWO_SHOT\n  //       ) {\n  //         return 'Bắt buộc nhập ngày tiêm (mũi 2)';\n  //       }\n\n  //       const date = moment(value, 'DD/MM/YYYY');\n  //       const beforeDate = moment('01/01/2021', 'DD/MM/YYYY');\n  //       const afterDate = moment().endOf('day');\n  //       if (date > afterDate || date < beforeDate) {\n  //         return `Ngày tiêm phải nằm trong khoảng từ ${beforeDate.format(\n  //           'DD/MM/YYYY',\n  //         )} đến ${afterDate.format('DD/MM/YYYY')}`;\n  //       }\n  //     }\n  //     return false;\n  //   },\n  // },\n  {\n    header: 'Có bệnh lý nền(*)',\n    assign: 'underlyingDiseases',\n    formatter: value => value.toString().includes(';') ? value.toString().split(';').filter(v => (underlyingDiseaseList || []).find(u => u.index === parseInt(v, 10))).map(u => u.id) : (underlyingDiseaseList || []).filter(u => u.index === parseInt(value.toString(), 10)).map(u => u.id),\n    validate: (__, value) => {\n      if (typeof value === 'undefined') {\n        return 'Bắt buộc phải nhập có bệnh lý nền';\n      }\n      const underlyingDiseaseIndexList = (underlyingDiseaseList || []).map(u => u.index);\n      const difference = value.toString().includes(';') ? value.toString().split(';').filter(v => v && !underlyingDiseaseIndexList.includes(parseInt(v, 10))) : !underlyingDiseaseIndexList.includes(parseInt(value, 10)) ? [value] : [];\n      if (Array.isArray(difference) && difference.length > 0) {\n        return 'Bệnh nền không hợp lệ';\n      }\n      return false;\n    }\n  }\n  // {\n  //   header: 'Thời gian nhiễm(mm/yyyy)',\n  //   assign: 'infectedDate',\n  //   formatter: (value) =>\n  //     moment(value, 'DD/MM/YYYY').format('YYYY-MM-DDT07:00:00'),\n  //   validate: (value) => {\n  //     if (value) {\n  //       const date = moment(value, 'DD/MM/YYYY');\n  //       const afterDate = moment().endOf('day');\n  //       if (date > afterDate) {\n  //         return `Ngày xét nghiệm không được lớn hơn ${afterDate.format(\n  //           'DD/MM/YYYY',\n  //         )}`;\n  //       }\n  //     }\n  //     return false;\n  //   },\n  // },\n  // {\n  //   header: 'Ngày XN  lần 1',\n  //   assign: 'dateOfExamFirst',\n  //   formatter: (value) =>\n  //     moment(value, 'DD/MM/YYYY').format('YYYY-MM-DDT07:00:00'),\n  //   validate: (value) => {\n  //     if (value) {\n  //       const date = moment(value, 'DD/MM/YYYY');\n  //       const afterDate = moment().endOf('day');\n  //       if (date > afterDate) {\n  //         return `Ngày xét nghiệm không được lớn hơn ${afterDate.format(\n  //           'DD/MM/YYYY',\n  //         )}`;\n  //       }\n  //     }\n  //     return false;\n  //   },\n  // },\n  // {\n  //   header: 'Kết quả XN lần 1',\n  //   assign: 'resultOfExamFirst',\n  //   validate: (obj, value) => {\n  //     if (typeof obj.dateOfExamFirst !== 'undefined') {\n  //       if (\n  //         !resultsOfExam.find(\n  //           (r) => r.toUpperCase() === value.toUpperCase(),\n  //         )\n  //       ) {\n  //         return 'Kết quả xét nghiệm (lần 1) không đúng định dạng';\n  //       }\n  //     }\n  //     return false;\n  //   },\n  // },\n  // {\n  //   header: 'Ngày XN  lần 2',\n  //   assign: 'dateOfExamSecond',\n  //   formatter: (value) =>\n  //     moment(value, 'DD/MM/YYYY').format('YYYY-MM-DDT07:00:00'),\n  //   validate: (value) => {\n  //     if (value) {\n  //       const date = moment(value, 'DD/MM/YYYY');\n  //       const afterDate = moment().endOf('day');\n  //       if (date > afterDate) {\n  //         return `Ngày xét nghiệm không được lớn hơn ${afterDate.format(\n  //           'DD/MM/YYYY',\n  //         )}`;\n  //       }\n  //     }\n  //     return false;\n  //   },\n  // },\n  // {\n  //   header: 'Kết quả XN lần 2',\n  //   assign: 'resultOfExamSecond',\n  //   validate: (obj, value) => {\n  //     if (typeof obj.dateOfExamSecond !== 'undefined') {\n  //       if (\n  //         !resultsOfExam.find(\n  //           (r) => r.toUpperCase() === value.toUpperCase(),\n  //         )\n  //       ) {\n  //         return 'Kết quả xét nghiệm (lần 1) không đúng định dạng';\n  //       }\n  //     }\n  //     return false;\n  //   },\n  // },\n  // {\n  //   header: 'Loại Vaccine (Mũi bổ sung hoặc nhắc lại)',\n  //   assign: 'additionalVaccine',\n  //   validate: (obj, value) => {\n  //     if (value) {\n  //       if (typeof obj.additionalVaccine !== 'undefined') {\n  //         return 'Chỉ được điền 1 trong 3 mũi tiêm (mũi cơ bản 1/mũi cơ bản 2/mũi bổ sung (mũi nhắc lại))';\n  //       }\n  //       if (\n  //         typeof obj.immunizationStatus !== 'number' ||\n  //         obj.immunizationStatus !== IMMUNIZATION_STATUSES.TWO_SHOT\n  //       ) {\n  //         return 'Yêu cầu phải tiêm đủ 2 mũi trước khi tiêm mũi bổ sung (mũi nhắc lại)';\n  //       }\n  //     }\n  //     return false;\n  //   },\n  // },\n  // {\n  //   header: 'Ngày tiêm (Mũi bổ sung hoặc nhắc lại)',\n  //   assign: 'additionalInjectionDate',\n  //   validate: (obj, value) => {\n  //     if (\n  //       typeof obj.additionalVaccine !== 'undefined' &&\n  //       obj.immunizationStatus === IMMUNIZATION_STATUSES.TWO_SHOT\n  //     ) {\n  //       if (!value) {\n  //         return 'Bắt buộc phải nhập ngày tiêm (mũi bổ sung hoặc nhắc lại)';\n  //       }\n\n  //       const date = moment(value, 'DD/MM/YYYY');\n  //       const beforeDate = moment('01/01/2021', 'DD/MM/YYYY');\n  //       const afterDate = moment().endOf('day');\n  //       if (date > afterDate || date < beforeDate) {\n  //         return `Ngày tiêm phải nằm trong khoảng từ ${beforeDate.format(\n  //           'DD/MM/YYYY',\n  //         )} đến ${afterDate.format('DD/MM/YYYY')}`;\n  //       }\n  //     }\n  //     return false;\n  //   },\n  // },\n  // {\n  //   header: 'Loại Vaccine (Mũi CB 1)',\n  //   assign: 'additionalVaccine',\n  //   validate: (obj, value) => {\n  //     if (value) {\n  //       if (typeof obj.additionalVaccine !== 'undefined') {\n  //         return 'Chỉ được điền 1 trong 3 mũi tiêm (mũi cơ bản 1/mũi cơ bản 2/mũi bổ sung (mũi nhắc lại))';\n  //       }\n  //       if (\n  //         typeof obj.immunizationStatus !== 'number' ||\n  //         obj.immunizationStatus !== IMMUNIZATION_STATUSES.NO_VACCINE\n  //       ) {\n  //         return 'Yêu cầu chưa tiêm mũi nào trước khi tiêm mũi cơ bản 1';\n  //       }\n  //     }\n  //     return false;\n  //   },\n  // },\n  // {\n  //   header: 'Ngày tiêm (Mũi CB 1)',\n  //   assign: 'additionalInjectionDate',\n  //   validate: (obj, value) => {\n  //     if (\n  //       typeof obj.additionalVaccine !== 'undefined' &&\n  //       obj.immunizationStatus === IMMUNIZATION_STATUSES.NO_VACCINE\n  //     ) {\n  //       if (!value) {\n  //         return 'Bắt buộc phải nhập ngày tiêm (mũi cơ bản 1)';\n  //       }\n\n  //       const date = moment(value, 'DD/MM/YYYY');\n  //       const beforeDate = moment('01/01/2021', 'DD/MM/YYYY');\n  //       const afterDate = moment().endOf('day');\n  //       if (date > afterDate || date < beforeDate) {\n  //         return `Ngày tiêm phải nằm trong khoảng từ ${beforeDate.format(\n  //           'DD/MM/YYYY',\n  //         )} đến ${afterDate.format('DD/MM/YYYY')}`;\n  //       }\n  //     }\n  //     return false;\n  //   },\n  // },\n  // {\n  //   header: 'Loại Vaccine (Mũi CB 2)',\n  //   assign: 'additionalVaccine',\n  //   validate: (obj, value) => {\n  //     if (value) {\n  //       if (typeof obj.additionalVaccine !== 'undefined') {\n  //         return 'Chỉ được điền 1 trong 3 mũi tiêm (mũi cơ bản 1/mũi cơ bản 2/mũi bổ sung (mũi nhắc lại))';\n  //       }\n  //       if (\n  //         typeof obj.immunizationStatus !== 'number' ||\n  //         obj.immunizationStatus !== IMMUNIZATION_STATUSES.ONE_SHOT\n  //       ) {\n  //         return 'Yêu cầu phải tiêm mũi 1 trước khi tiêm mũi cơ bản 2';\n  //       }\n  //     }\n  //     return false;\n  //   },\n  // },\n  // {\n  //   header: 'Ngày tiêm (Mũi CB 2)',\n  //   assign: 'additionalInjectionDate',\n  //   validate: (obj, value) => {\n  //     if (\n  //       typeof obj.additionalVaccine !== 'undefined' &&\n  //       obj.immunizationStatus === IMMUNIZATION_STATUSES.ONE_SHOT\n  //     ) {\n  //       if (!value) {\n  //         return 'Bắt buộc phải nhập ngày tiêm (mũi cơ bản 2)';\n  //       }\n\n  //       const date = moment(value, 'DD/MM/YYYY');\n  //       const beforeDate = moment('01/01/2021', 'DD/MM/YYYY');\n  //       const afterDate = moment().endOf('day');\n  //       if (date > afterDate || date < beforeDate) {\n  //         return `Ngày tiêm phải nằm trong khoảng từ ${beforeDate.format(\n  //           'DD/MM/YYYY',\n  //         )} đến ${afterDate.format('DD/MM/YYYY')}`;\n  //       }\n  //     }\n  //     return false;\n  //   },\n  // },\n  // {\n  //   header: 'Được cấp gói thuốc C',\n  //   assign: 'DCGTC',\n  //   validate: (obj, value) => {\n  //     if (obj.infectedDate) {\n  //       if (value) {\n  //         if (!['CÓ', 'KHÔNG'].indexOf(value.toUpperCase())) {\n  //           return 'Được cấp gói thuốc C không đúng định dạng';\n  //         }\n  //       }\n  //     }\n  //     return false;\n  //   },\n  // },\n  // {\n  //   header: 'Là F0 được cách ly tại nhà',\n  //   assign: 'LFDCLTN',\n  //   validate: (obj, value) => {\n  //     if (obj.infectedDate) {\n  //       if (value) {\n  //         if (!['CÓ', 'KHÔNG'].indexOf(value.toUpperCase())) {\n  //           return 'Không đúng định dạng cột (Là F0 được cách lý tại nhà)';\n  //         }\n  //       }\n  //     }\n  //     return false;\n  //   },\n  // },\n  ], [underlyingDiseaseList]);\n  const refresh = () => {\n    setStep(steps.downloadTemplate);\n    setDisabled(false);\n    setSelectedFile(null);\n    setData([]);\n    setError([]);\n    setResult([]);\n  };\n  const onClose = () => {\n    refresh();\n    onCloseProp();\n    onRefresh();\n  };\n\n  // #region parse data\n  const parseData = useCallback(binary => {\n    try {\n      const book = xlsx.read(binary, {\n        type: 'binary',\n        cellDates: true,\n        cellNF: false,\n        cellText: false\n      });\n      const sheet = book.Sheets[book.SheetNames[0]];\n      const rawData = xlsx.utils.sheet_to_json(sheet).map(row => Object.keys(row).reduce((obj, key) => {\n        obj[key.replace(/(\\r\\n|\\n|\\r)/gm, '').trim()] = row[key];\n        return obj;\n      }, {}));\n      const parserData = rawData.map((row, index) => model.reduce((obj, props) => {\n        const resultOfValidation = (props === null || props === void 0 ? void 0 : props.validate) ? props.validate(obj, row[props.header]) : false;\n        if (resultOfValidation) {\n          if (typeof obj.errors === 'undefined') {\n            obj.errors = {\n              row: index + 1,\n              messages: []\n            };\n          }\n          obj.errors.messages.push(resultOfValidation);\n        } else if (typeof row[props.header] !== 'undefined' && row[props.header] !== '') {\n          obj[props.assign] = (props === null || props === void 0 ? void 0 : props.formatter) ? props.formatter(row[props.header]) : row[props.header];\n        }\n        return obj;\n      }, {}));\n      setData(parserData.filter(d => !(d === null || d === void 0 ? void 0 : d.errors)));\n      setError(parserData.filter(d => d === null || d === void 0 ? void 0 : d.errors));\n    } catch (e) {\n      toast.warn('Tệp tin không đúng định dạng');\n    }\n  }, [model]);\n  useEffect(() => {\n    if (selectedFile) {\n      const reader = new FileReader();\n      if (reader.readAsBinaryString) {\n        reader.onload = () => parseData(reader.result);\n        reader.readAsBinaryString(selectedFile);\n      }\n    }\n    // eslint-disable-next-line\n  }, [selectedFile]);\n  // #endregion\n\n  // #region upload data\n  const formatRequest = d => {\n    var _d$underlyingDiseases, _d$dateOfExamFirst, _d$resultOfExamFirst, _d$dateOfExamSecond, _d$resultOfExamSecond;\n    const url = window.location.href;\n    return {\n      profileModel: {\n        profile: {\n          fullName: d.name,\n          gender: d.gender,\n          cmnd: d.identityCard.length !== 12 ? `${d.identityCard}` : null,\n          cccd: d.identityCard.length === 12 ? `${d.identityCard}` : null,\n          phoneNumber: d.phoneNumber,\n          dateOfBirth: d.dateOfBirth,\n          hasYearOfBirthOnly: false,\n          profileCreationReason: {},\n          workAddresses: [],\n          addressesInVietnam: [{\n            provinceValue: d.provinceValue,\n            districtValue: d.districtValue,\n            wardValue: d.wardValue,\n            quarter: d.quarter,\n            quarterGroup: d.quarterGroup,\n            streetHouseNumber: d.streetHouseNumber\n          }],\n          underlyingDiseases: (_d$underlyingDiseases = d === null || d === void 0 ? void 0 : d.underlyingDiseases) !== null && _d$underlyingDiseases !== void 0 ? _d$underlyingDiseases : null,\n          createdFrom: 6\n        },\n        newImmunization: (d === null || d === void 0 ? void 0 : d.additionalImmunizationStatus) ? {\n          immunizationStatus: d.additionalImmunizationStatus,\n          injectionDate: d.additionalInjectionDate,\n          vaccine: d.additionalVaccine,\n          disease: 'Covid-19'\n        } : null,\n        curImmunizations: (d === null || d === void 0 ? void 0 : d.injectionDateSecond) ? [{\n          immunizationStatus: IMMUNIZATION_STATUSES.TWO_SHOT,\n          injectionDate: d.injectionDateSecond,\n          vaccine: d.vaccineSecond,\n          disease: 'Covid-19'\n        }, {\n          immunizationStatus: IMMUNIZATION_STATUSES.ONE_SHOT,\n          injectionDate: d.injectionDateFirst,\n          vaccine: d.vaccineFirst,\n          disease: 'Covid-19'\n        }] : (d === null || d === void 0 ? void 0 : d.injectionDateFirst) ? [{\n          immunizationStatus: IMMUNIZATION_STATUSES.ONE_SHOT,\n          injectionDate: d.injectionDateFirst,\n          vaccine: d.vaccineFirst,\n          disease: 'Covid-19'\n        }] : [],\n        treatment: (d === null || d === void 0 ? void 0 : d.infectedDate) ? {\n          fromDate: d === null || d === void 0 ? void 0 : d.infectedDate,\n          contents: {\n            DCGTC: d === null || d === void 0 ? void 0 : d.DCGTC,\n            LFDCLTN: d === null || d === void 0 ? void 0 : d.LFDCLTN\n          }\n        } : null\n      },\n      quickTestModel: {\n        date1: (_d$dateOfExamFirst = d === null || d === void 0 ? void 0 : d.dateOfExamFirst) !== null && _d$dateOfExamFirst !== void 0 ? _d$dateOfExamFirst : null,\n        result1: (_d$resultOfExamFirst = d === null || d === void 0 ? void 0 : d.resultOfExamFirst) !== null && _d$resultOfExamFirst !== void 0 ? _d$resultOfExamFirst : null,\n        date2: (_d$dateOfExamSecond = d === null || d === void 0 ? void 0 : d.dateOfExamSecond) !== null && _d$dateOfExamSecond !== void 0 ? _d$dateOfExamSecond : null,\n        result2: (_d$resultOfExamSecond = d === null || d === void 0 ? void 0 : d.resultOfExamSecond) !== null && _d$resultOfExamSecond !== void 0 ? _d$resultOfExamSecond : null\n      },\n      createProfileMqExchangeName: url.indexOf('abcde') > -1 || process.env.NODE_ENV === 'development' ? 'NewProfileQueue1' : 'NewProfileQueue'\n    };\n  };\n  const getImportError = function () {\n    var _errorResponse$respon;\n    let errorResponse = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      response: {}\n    };\n    const resultError = {\n      succeed: false,\n      message: 'Lỗi không xác định'\n    };\n    if ((_errorResponse$respon = errorResponse.response) === null || _errorResponse$respon === void 0 ? void 0 : _errorResponse$respon.data) {\n      if (typeof errorResponse.response.data === 'string') {\n        if (errorResponse.response.data.includes('Record is existed or only update')) {\n          resultError.message = 'Xung đột thông tin tiền sử tiêm chủng';\n        } else {\n          const examinationError = getExaminationError(errorResponse.response.data);\n          if (examinationError) {\n            resultError.message = examinationError;\n          }\n        }\n      }\n    }\n    return resultError;\n  };\n  const uploadData = async () => {\n    for (const profile of data) {\n      try {\n        await dispatch(importQuickTestJson([formatRequest(profile)]));\n        setResult(rl => [...rl, {\n          ...profile,\n          result: {\n            succeed: true\n          }\n        }]);\n      } catch (e) {\n        setResult(rl => [...rl, {\n          ...profile,\n          result: {\n            ...getImportError(e)\n          }\n        }]);\n      }\n    }\n    setStep(steps.result);\n  };\n  // #endregion\n\n  // #region component\n  const dataColumns = useMemo(() => [{\n    Header: '#',\n    accessor: 'index'\n  }, {\n    Header: 'Họ tên',\n    accessor: 'name'\n  }, {\n    Header: 'Ngày sinh',\n    formatter: _ref2 => {\n      let {\n        dateOfBirth\n      } = _ref2;\n      return formatToDate(dateOfBirth);\n    }\n  }, {\n    Header: 'Số điện thoại',\n    accessor: 'phoneNumber'\n  }, {\n    Header: 'Địa chỉ',\n    formatter: _ref3 => {\n      let {\n        streetHouseNumber,\n        provinceValue,\n        districtValue,\n        wardValue\n      } = _ref3;\n      return formatAddressToString({\n        streetHouseNumber,\n        provinceValue,\n        districtValue,\n        wardValue\n      });\n    }\n  }\n  // {\n  //   Header: 'Tiền sử tiêm chủng',\n  //   formatter: ({\n  //     vaccineFirst,\n  //     injectionDateFirst,\n  //     vaccineSecond,\n  //     injectionDateSecond,\n  //   }) => (\n  //     <div>\n  //       {vaccineSecond ? (\n  //         <>\n  //           <Header sub>\n  //             <b style={{ color: '#DB2729' }}>Mũi 2</b>\n  //             {` | ${vaccineSecond}`}\n  //           </Header>\n  //           <span>{formatToDate(injectionDateSecond)}</span>\n  //         </>\n  //       ) : vaccineFirst ? (\n  //         <>\n  //           <Header sub>\n  //             <b style={{ color: '#DB2729' }}>Mũi 1</b>\n  //             {` | ${vaccineFirst}`}\n  //           </Header>\n  //           <span>{formatToDate(injectionDateFirst)}</span>\n  //         </>\n  //       ) : (\n  //         <Header sub>Chưa tiêm</Header>\n  //       )}\n  //     </div>\n  //   ),\n  // },\n  // {\n  //   Header: 'Xét nghiệm lần 1',\n  //   formatter: ({ dateOfExamFirst, resultOfExamFirst }) =>\n  //     resultOfExamFirst ? (\n  //       <div>\n  //         <Header sub>\n  //           {resultOfExamFirst.includes(deburr('Dương')) ? (\n  //             <b style={{ color: '#DB2729' }}>{resultOfExamFirst}</b>\n  //           ) : (\n  //             resultOfExamFirst\n  //           )}\n  //         </Header>\n  //         <span>{formatToDate(dateOfExamFirst)}</span>\n  //       </div>\n  //     ) : null,\n  // },\n  // {\n  //   Header: 'Xét nghiệm lần 2',\n  //   formatter: ({ dateOfExamSecond, resultOfExamSecond }) =>\n  //     resultOfExamSecond ? (\n  //       <div>\n  //         <Header sub>\n  //           {resultOfExamSecond.includes(deburr('Dương')) ? (\n  //             <b style={{ color: '#DB2729' }}>{resultOfExamSecond}</b>\n  //           ) : (\n  //             resultOfExamSecond\n  //           )}\n  //         </Header>\n  //         <span>{formatToDate(dateOfExamSecond)}</span>\n  //       </div>\n  //     ) : null,\n  // },\n  ], []);\n  const errorColumns = useMemo(() => [{\n    Header: 'Hàng',\n    formatter: _ref4 => {\n      let {\n        errors\n      } = _ref4;\n      return /*#__PURE__*/React.createElement(Header, {\n        sub: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 986,\n          columnNumber: 38\n        }\n      }, errors === null || errors === void 0 ? void 0 : errors.row);\n    }\n  }, {\n    Header: ' ',\n    formatter: _ref5 => {\n      let {\n        errors\n      } = _ref5;\n      return (errors === null || errors === void 0 ? void 0 : errors.messages) ? /*#__PURE__*/React.createElement(List, {\n        divided: true,\n        relaxed: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 992,\n          columnNumber: 15\n        }\n      }, errors.messages.map(m => /*#__PURE__*/React.createElement(List.Item, {\n        key: m,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 994,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(List.Icon, {\n        name: \"x\",\n        color: \"red\",\n        verticalAlign: \"middle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 995,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(List.Content, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 996,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(List.Description, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 997,\n          columnNumber: 23\n        }\n      }, m))))) : null;\n    }\n  }], []);\n  const jsx_menuTable = useMemo(() => {\n    const panes = [{\n      menuItem: `Dữ liệu đọc được (${data.length})`,\n      render: () => /*#__PURE__*/React.createElement(Tab.Pane, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1012,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(DataTable, {\n        columns: dataColumns,\n        data: data.map((d, i) => ({\n          ...d,\n          index: i + 1\n        })),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1013,\n          columnNumber: 15\n        }\n      }))\n    }, {\n      menuItem: `Dữ liệu bị lỗi (${error.length})`,\n      render: () => /*#__PURE__*/React.createElement(Tab.Pane, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1023,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(DataTable, {\n        columns: errorColumns,\n        data: error.map((e, i) => ({\n          ...e,\n          index: i + 1\n        })),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1024,\n          columnNumber: 15\n        }\n      }))\n    }];\n    return /*#__PURE__*/React.createElement(MenuWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1034,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Tab, {\n      panes: panes,\n      renderActiveOnly: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1035,\n        columnNumber: 11\n      }\n    }));\n  }, [data, error, dataColumns, errorColumns]);\n  const resultColumns = useMemo(() => [{\n    Header: '#',\n    accessor: 'index'\n  }, {\n    Header: 'Họ tên',\n    accessor: 'name'\n  }, {\n    Header: 'Ngày sinh',\n    formatter: _ref6 => {\n      let {\n        dateOfBirth\n      } = _ref6;\n      return formatToDate(dateOfBirth);\n    }\n  }, {\n    Header: 'Số điện thoại',\n    accessor: 'phoneNumber'\n  }, {\n    Header: 'Địa chỉ',\n    formatter: _ref7 => {\n      let {\n        streetHouseNumber,\n        provinceValue,\n        districtValue,\n        wardValue\n      } = _ref7;\n      return formatAddressToString({\n        streetHouseNumber,\n        provinceValue,\n        districtValue,\n        wardValue\n      });\n    }\n  },\n  // {\n  //   Header: 'Tiền sử tiêm chủng',\n  //   formatter: ({\n  //     vaccineFirst,\n  //     injectionDateFirst,\n  //     vaccineSecond,\n  //     injectionDateSecond,\n  //   }) => (\n  //     <div>\n  //       {vaccineSecond ? (\n  //         <>\n  //           <Header sub>\n  //             <b style={{ color: '#DB2729' }}>Mũi 2</b>\n  //             {` | ${vaccineSecond}`}\n  //           </Header>\n  //           <span>{formatToTime(injectionDateSecond)}</span>\n  //         </>\n  //       ) : vaccineFirst ? (\n  //         <>\n  //           <Header sub>\n  //             <b style={{ color: '#DB2729' }}>Mũi 1</b>\n  //             {` | ${vaccineFirst}`}\n  //           </Header>\n  //           <span>{formatToTime(injectionDateFirst)}</span>\n  //         </>\n  //       ) : (\n  //         <Header sub>Chưa tiêm</Header>\n  //       )}\n  //     </div>\n  //   ),\n  // },\n  // {\n  //   Header: 'Xét nghiệm lần 1',\n  //   formatter: ({ dateOfExamFirst, resultOfExamFirst }) =>\n  //     resultOfExamFirst ? (\n  //       <div>\n  //         <Header sub>\n  //           {resultOfExamFirst.includes(deburr('Dương')) ? (\n  //             <b style={{ color: '#DB2729' }}>{resultOfExamFirst}</b>\n  //           ) : (\n  //             resultOfExamFirst\n  //           )}\n  //         </Header>\n  //         <span>{formatToTime(dateOfExamFirst)}</span>\n  //       </div>\n  //     ) : null,\n  // },\n  // {\n  //   Header: 'Xét nghiệm lần 2',\n  //   formatter: ({ dateOfExamSecond, resultOfExamSecond }) =>\n  //     resultOfExamSecond ? (\n  //       <div>\n  //         <Header sub>\n  //           {resultOfExamSecond.includes(deburr('Dương')) ? (\n  //             <b style={{ color: '#DB2729' }}>{resultOfExamSecond}</b>\n  //           ) : (\n  //             resultOfExamSecond\n  //           )}\n  //         </Header>\n  //         <span>{formatToTime(dateOfExamSecond)}</span>\n  //       </div>\n  //     ) : null,\n  // },\n  {\n    Header: ' ',\n    formatter: r => {\n      var _r$result, _r$result2;\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Icon, {\n        name: \"info circle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1140,\n          columnNumber: 15\n        }\n      }), ' ', (r === null || r === void 0 ? void 0 : (_r$result = r.result) === null || _r$result === void 0 ? void 0 : _r$result.succeed) ? 'Thành công' : r === null || r === void 0 ? void 0 : (_r$result2 = r.result) === null || _r$result2 === void 0 ? void 0 : _r$result2.message);\n    }\n  }], []);\n  const jsx_resultTable = useMemo(() => /*#__PURE__*/React.createElement(DataTable, {\n    title: `Kết quả đã nạp ${result.reduce((c, t) => {\n      var _t$result;\n      return (t === null || t === void 0 ? void 0 : (_t$result = t.result) === null || _t$result === void 0 ? void 0 : _t$result.succeed) ? c + 1 : c;\n    }, 0)}/${result.length} hồ sơ`,\n    columns: resultColumns,\n    data: result.map((d, i) => ({\n      ...d,\n      index: i + 1\n    })),\n    rowError: r => {\n      var _r$result3;\n      return !(r === null || r === void 0 ? void 0 : (_r$result3 = r.result) === null || _r$result3 === void 0 ? void 0 : _r$result3.succeed);\n    },\n    rowSucceed: r => {\n      var _r$result4;\n      return r === null || r === void 0 ? void 0 : (_r$result4 = r.result) === null || _r$result4 === void 0 ? void 0 : _r$result4.succeed;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1150,\n      columnNumber: 9\n    }\n  }), [result, resultColumns]);\n  const jsx_downloadTemplate = useMemo(() => /*#__PURE__*/React.createElement(Message, {\n    info: true,\n    icon: true,\n    style: {\n      marginBottom: 0,\n      cursor: 'pointer'\n    },\n    onClick: () => downloadFile(excelTemplate),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1166,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    name: \"download\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1172,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Message.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1173,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Message.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1174,\n      columnNumber: 13\n    }\n  }, \"T\\u1EA3i t\\u1EC7p tin m\\u1EABu\"), \"S\\u1EED d\\u1EE5ng t\\u1EC7p tin m\\u1EABu, \\u0111\\u1EC3 \\u0111\\u1EA3m b\\u1EA3o d\\u1EEF li\\u1EC7u ch\\xEDnh x\\xE1c\")), []);\n  const jsx_content = useMemo(() => {\n    switch (step) {\n      case steps.downloadTemplate:\n        return jsx_downloadTemplate;\n      case steps.reviewData:\n        return jsx_menuTable;\n      case steps.result:\n        return jsx_resultTable;\n      default:\n        return jsx_downloadTemplate;\n    }\n  }, [step, jsx_downloadTemplate, jsx_menuTable, jsx_resultTable]);\n  // #endregion\n\n  useEffect(() => {\n    if (!underlyingDiseaseList || underlyingDiseaseList.length === 0) {\n      dispatch(getUnderlyingDiseases({}));\n    }\n    // eslint-disable-next-line\n  }, [dispatch]);\n  useEffect(() => {\n    if (error.length === 0) {\n      setDisabled(false);\n    } else {\n      setDisabled(true);\n    }\n  }, [error]);\n  return /*#__PURE__*/React.createElement(Modal, {\n    open: open,\n    size: step !== steps.downloadTemplate ? 'fullscreen' : undefined,\n    onClose: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1212,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1217,\n      columnNumber: 9\n    }\n  }, \"N\\u1EA1p d\\u1EEF li\\u1EC7u t\\u1EEB file Excel\"), /*#__PURE__*/React.createElement(Modal.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1218,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1219,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Dimmer, {\n    inverted: true,\n    active: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1220,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1221,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1223,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    icon: \"upload\",\n    labelPosition: \"right\",\n    color: \"green\",\n    content: \"Ch\\u1ECDn File\",\n    onClick: () => {\n      refresh();\n      fileInputRef.current.click();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1224,\n      columnNumber: 15\n    }\n  }), selectedFile ? /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      marginLeft: '10px',\n      fontWeight: '700'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1235,\n      columnNumber: 17\n    }\n  }, selectedFile.name) : null), /*#__PURE__*/React.createElement(\"input\", {\n    hidden: true,\n    type: \"file\",\n    ref: fileInputRef,\n    onChange: e => {\n      setSelectedFile(e.target.files[0]);\n      setStep(steps.reviewData);\n    },\n    accept: \".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1240,\n      columnNumber: 13\n    }\n  }), jsx_content)), /*#__PURE__*/React.createElement(Modal.Actions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1253,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    positive: true,\n    labelPosition: \"right\",\n    icon: \"checkmark\",\n    content: \"X\\xE1c nh\\u1EADn\",\n    disabled: disabled,\n    loading: loading,\n    onClick: uploadData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1254,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    negative: true,\n    labelPosition: \"right\",\n    icon: \"close\",\n    content: \"\\u0110\\xF3ng\",\n    onClick: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1263,\n      columnNumber: 11\n    }\n  })));\n};\nImportModal.propTypes = {\n  open: PropTypes.bool,\n  onClose: PropTypes.func,\n  onRefresh: PropTypes.func\n};\nImportModal.defaultProps = {\n  open: false,\n  onClose: () => {},\n  onRefresh: () => {}\n};\nexport default ImportModal;","map":{"version":3,"names":["React","useState","useEffect","useMemo","useCallback","useRef","styled","toast","PropTypes","moment","xlsx","Modal","Button","Message","Icon","Header","Tab","List","Dimmer","Loader","DataTable","useDispatch","useSelector","importQuickTestJson","getUnderlyingDiseases","formatToDate","formatAddressToString","downloadFile","formatToTime","deburr","getExaminationError","formatGender","IMMUNIZATION_STATUSES","locations","excelTemplate","Wrapper","div","MenuWrapper","resultsOfExam","immunizationStatusOptions","key","value","NO_VACCINE","text","ONE_SHOT","TWO_SHOT","steps","downloadTemplate","reviewData","result","ImportModal","_ref","open","onClose","onCloseProp","onRefresh","step","setStep","disabled","setDisabled","fileInputRef","selectedFile","setSelectedFile","data","setData","error","setError","setResult","dispatch","underlyingDiseaseData","underlyingDiseaseList","state","profile","importQuickTestJsonLoading","medicalTest","loading","model","header","assign","formatter","toUpperCase","trim","validate","__","format","date","beforeDate","afterDate","endOf","_locations$find","find","p","_p$label","_p$label$toLowerCase","label","toLowerCase","includes","province","_p$label2","_p$label2$toLowerCase","obj","_locations$find2","_locations$find2$dist","_locations$find2$dist2","_p$value","_p$value$toLowerCase","provinceValue","districts","d","_d$label","_d$label$toLowerCase","_locations$find3","_locations$find3$dist","district","_p$value2","_p$value2$toLowerCase","_d$label2","_d$label2$toLowerCase","_locations$find4","_locations$find4$dist","_locations$find4$dist2","_locations$find4$dist3","_locations$find4$dist4","_p$value3","_p$value3$toLowerCase","_d$value","_d$value$toLowerCase","districtValue","wards","_d$label3","_d$label3$toLowerCase","_locations$find5","_locations$find5$dist","_locations$find5$dist2","_locations$find5$dist3","ward","_p$value4","_p$value4$toLowerCase","_d$value2","_d$value2$toLowerCase","_d$label4","_d$label4$toLowerCase","toString","split","filter","v","u","index","parseInt","map","id","underlyingDiseaseIndexList","difference","Array","isArray","length","refresh","parseData","binary","book","read","type","cellDates","cellNF","cellText","sheet","Sheets","SheetNames","rawData","utils","sheet_to_json","row","Object","keys","reduce","replace","parserData","props","resultOfValidation","errors","messages","push","e","warn","reader","FileReader","readAsBinaryString","onload","formatRequest","_d$underlyingDiseases","_d$dateOfExamFirst","_d$resultOfExamFirst","_d$dateOfExamSecond","_d$resultOfExamSecond","url","window","location","href","profileModel","fullName","name","gender","cmnd","identityCard","cccd","phoneNumber","dateOfBirth","hasYearOfBirthOnly","profileCreationReason","workAddresses","addressesInVietnam","wardValue","quarter","quarterGroup","streetHouseNumber","underlyingDiseases","createdFrom","newImmunization","additionalImmunizationStatus","immunizationStatus","injectionDate","additionalInjectionDate","vaccine","additionalVaccine","disease","curImmunizations","injectionDateSecond","vaccineSecond","injectionDateFirst","vaccineFirst","treatment","infectedDate","fromDate","contents","DCGTC","LFDCLTN","quickTestModel","date1","dateOfExamFirst","result1","resultOfExamFirst","date2","dateOfExamSecond","result2","resultOfExamSecond","createProfileMqExchangeName","indexOf","process","env","NODE_ENV","getImportError","_errorResponse$respon","errorResponse","arguments","undefined","response","resultError","succeed","message","examinationError","uploadData","rl","dataColumns","accessor","_ref2","_ref3","errorColumns","_ref4","createElement","sub","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","_ref5","divided","relaxed","m","Item","color","verticalAlign","Content","Description","jsx_menuTable","panes","menuItem","render","Pane","columns","i","renderActiveOnly","resultColumns","_ref6","_ref7","r","_r$result","_r$result2","Fragment","jsx_resultTable","title","c","t","_t$result","rowError","_r$result3","rowSucceed","_r$result4","jsx_downloadTemplate","info","icon","style","marginBottom","cursor","onClick","jsx_content","size","inverted","active","labelPosition","content","current","click","marginLeft","fontWeight","hidden","ref","onChange","target","files","accept","Actions","positive","negative","propTypes","bool","func","defaultProps"],"sources":["H:/BAKCO/pj/data reconciliation/src/profile-train/components/ImportModal.js"],"sourcesContent":["/* eslint-disable no-restricted-syntax */\r\n/* eslint-disable no-await-in-loop */\r\n/* eslint-disable camelcase */\r\n/* eslint-disable no-unused-vars */\r\n/* eslint-disable react/prop-types */\r\n/* eslint-disable no-param-reassign */\r\nimport React, {\r\n    useState,\r\n    useEffect,\r\n    useMemo,\r\n    useCallback,\r\n    useRef,\r\n  } from 'react';\r\n  import styled from 'styled-components';\r\n  import { toast } from 'react-toastify';\r\n  import PropTypes from 'prop-types';\r\n  import moment from 'moment';\r\n  import xlsx from 'xlsx';\r\n  \r\n  import {\r\n    Modal,\r\n    Button,\r\n    Message,\r\n    Icon,\r\n    Header,\r\n    Tab,\r\n    List,\r\n    Dimmer,\r\n    Loader,\r\n  } from 'semantic-ui-react';\r\n  import { DataTable } from 'app/components/shared';\r\n  \r\n  import { useDispatch, useSelector } from 'react-redux';\r\n  import { importQuickTestJson } from 'medical-test/actions/medical-test';\r\n  import { getUnderlyingDiseases } from 'profile/actions/profile';\r\n  import {\r\n    formatToDate,\r\n    formatAddressToString,\r\n    downloadFile,\r\n    formatToTime,\r\n    deburr,\r\n    getExaminationError,\r\n  } from 'app/utils/helpers';\r\n  import { formatGender } from 'profile/utils/helpers';\r\n  import { IMMUNIZATION_STATUSES } from 'profile/utils/constants';\r\n  \r\n  import locations from 'app/assets/mock/locations';\r\n  import excelTemplate from 'app/assets/excels/Mẫu import hồ sơ thuộc nhóm nguy cơ.xlsx';\r\n  \r\n  const Wrapper = styled.div`\r\n    position: relative;\r\n  `;\r\n  \r\n  const MenuWrapper = styled.div`\r\n    margin-top: 15px;\r\n    & .tab {\r\n      padding-top: 0.1em !important;\r\n    }\r\n    & .fVDZkI {\r\n      margin-top: 0 !important;\r\n    }\r\n  `;\r\n  \r\n  const resultsOfExam = ['Dương tính', 'Âm tính'];\r\n  const immunizationStatusOptions = [\r\n    { key: 1, value: IMMUNIZATION_STATUSES.NO_VACCINE, text: 'Chưa tiêm' },\r\n    { key: 2, value: IMMUNIZATION_STATUSES.ONE_SHOT, text: 'Tiêm 1 mũi' },\r\n    { key: 3, value: IMMUNIZATION_STATUSES.TWO_SHOT, text: 'Tiêm 2 mũi' },\r\n  ];\r\n  \r\n  const steps = {\r\n    downloadTemplate: 0,\r\n    reviewData: 1,\r\n    result: 2,\r\n  };\r\n  \r\n  const ImportModal = ({\r\n    open,\r\n    onClose: onCloseProp,\r\n    onRefresh,\r\n  }) => {\r\n    const [step, setStep] = useState(steps.downloadTemplate);\r\n    const [disabled, setDisabled] = useState(false);\r\n  \r\n    const fileInputRef = useRef();\r\n    const [selectedFile, setSelectedFile] = useState(null);\r\n  \r\n    const [data, setData] = useState([]);\r\n    const [error, setError] = useState([]);\r\n    const [result, setResult] = useState([]);\r\n  \r\n    const dispatch = useDispatch();\r\n    const {\r\n      underlyingDiseaseData: { data: underlyingDiseaseList },\r\n    } = useSelector((state) => state.profile);\r\n    const { importQuickTestJsonLoading } = useSelector(\r\n      (state) => state.medicalTest,\r\n    );\r\n  \r\n    const loading = importQuickTestJsonLoading;\r\n  \r\n    const model = useMemo(\r\n      () => [\r\n        {\r\n          header: 'Họ tên(*)',\r\n          assign: 'name',\r\n          formatter: (value) => value.toUpperCase().trim(),\r\n          validate: (__, value) => {\r\n            if (!value) {\r\n              return 'Bắt buộc nhập tên';\r\n            }\r\n            return false;\r\n          },\r\n        },\r\n        {\r\n          header: 'Ngày sinh(*)',\r\n          assign: 'dateOfBirth',\r\n          formatter: (value) =>\r\n            moment(value, 'DD/MM/YYYY').format('YYYY-MM-DDT07:00:00'),\r\n          validate: (__, value) => {\r\n            if (!value) {\r\n              return 'Bắt buộc nhập ngày sinh';\r\n            }\r\n  \r\n            const date = moment(value, 'DD/MM/YYYY');\r\n            const beforeDate = moment('01/01/1921', 'DD/MM/YYYY');\r\n            const afterDate = moment().endOf('day');\r\n            if (date > afterDate || date < beforeDate) {\r\n              return `Ngày sinh phải nằm trong khoảng từ ${beforeDate.format(\r\n                'DD/MM/YYYY',\r\n              )} đến ${afterDate.format('DD/MM/YYYY')}`;\r\n            }\r\n            return false;\r\n          },\r\n        },\r\n        {\r\n          header: 'Giới tính  (Nữ/Nam)(*)',\r\n          assign: 'gender',\r\n          formatter: (value) => formatGender(value),\r\n        },\r\n        {\r\n          header: 'CMND /CCCD(*)',\r\n          assign: 'identityCard',\r\n          validate: (__, value) => {\r\n            if (!value) {\r\n              return 'Bắt buộc nhập CMND/CCCD';\r\n            }\r\n            return false;\r\n          },\r\n        },\r\n        {\r\n          header: 'Điện thoại (*)',\r\n          assign: 'phoneNumber',\r\n          formatter: (value) => (typeof value === 'number' ? `0${value}` : value),\r\n          validate: (__, value) => {\r\n            if (!value) {\r\n              return 'Bắt buộc nhập số điện thoại';\r\n            }\r\n            return false;\r\n          },\r\n        },\r\n        {\r\n          header: 'Số nhà, tên đường (*)',\r\n          assign: 'streetHouseNumber',\r\n          validate: (__, value) => {\r\n            if (!value) {\r\n              return 'Bắt buộc nhập địa chỉ';\r\n            }\r\n            return false;\r\n          },\r\n        },\r\n        {\r\n          header: 'Tỉnh/Thành phố (*)',\r\n          assign: 'provinceValue',\r\n          formatter: (__, value) =>\r\n            locations?.find((p) =>\r\n              p?.label?.toLowerCase()?.includes(`${value}`.toLowerCase()),\r\n            )?.value,\r\n          validate: (__, value) => {\r\n            if (!value) {\r\n              return 'Bắt buộc nhập tỉnh/thành phố';\r\n            }\r\n            const province = locations?.find((p) =>\r\n              p?.label?.toLowerCase()?.includes(`${value}`.toLowerCase()),\r\n            );\r\n            if (!province) {\r\n              return 'Tỉnh/Thành phố không hợp lệ';\r\n            }\r\n            return false;\r\n          },\r\n        },\r\n        {\r\n          header: 'Quận/Huyện/ TP/TX (*)',\r\n          assign: 'districtValue',\r\n          formatter: (obj, value) =>\r\n            locations\r\n              ?.find((p) =>\r\n                p?.value\r\n                  ?.toLowerCase()\r\n                  ?.includes(`${obj.provinceValue}`.toLowerCase()),\r\n              )\r\n              ?.districts?.find((d) =>\r\n                d?.label?.toLowerCase()?.includes(`${value}`.toLowerCase()),\r\n              )?.value,\r\n          validate: (obj, value) => {\r\n            if (!value) {\r\n              return 'Bắt buộc nhập quận/huyện/thành phố/thị xã';\r\n            }\r\n            if (obj?.provinceValue) {\r\n              const district = locations\r\n                ?.find((p) =>\r\n                  p.value\r\n                    ?.toLowerCase()\r\n                    ?.includes(`${obj.provinceValue}`.toLowerCase()),\r\n                )\r\n                ?.districts?.find((d) =>\r\n                  d.label?.toLowerCase()?.includes(`${value}`.toLowerCase()),\r\n                );\r\n              if (!district) {\r\n                return 'Quận/Huyện/Thành phố/Thị xã không hợp lệ';\r\n              }\r\n            }\r\n            return false;\r\n          },\r\n        },\r\n        {\r\n          header: 'Phường/Xã/ Thị trấn (*)',\r\n          assign: 'wardValue',\r\n          formatter: (obj, value) =>\r\n            locations\r\n              ?.find((p) =>\r\n                p?.value\r\n                  ?.toLowerCase()\r\n                  ?.includes(`${obj.provinceValue}`.toLowerCase()),\r\n              )\r\n              ?.districts?.find((d) =>\r\n                d?.value\r\n                  ?.toLowerCase()\r\n                  ?.includes(`${obj.districtValue}`.toLowerCase()),\r\n              )\r\n              ?.wards?.find((d) =>\r\n                d?.label?.toLowerCase()?.includes(`${value}`.toLowerCase()),\r\n              )?.value,\r\n          validate: (obj, value) => {\r\n            if (!value) {\r\n              return 'Bắt buộc nhập phường/xã/thị trấn';\r\n            }\r\n            if (obj?.provinceValue && obj?.districtValue) {\r\n              const ward = locations\r\n                ?.find((p) =>\r\n                  p?.value\r\n                    ?.toLowerCase()\r\n                    ?.includes(`${obj.provinceValue}`.toLowerCase()),\r\n                )\r\n                ?.districts?.find((d) =>\r\n                  d?.value\r\n                    ?.toLowerCase()\r\n                    ?.includes(`${obj.districtValue}`.toLowerCase()),\r\n                )\r\n                ?.wards?.find((d) =>\r\n                  d?.label?.toLowerCase()?.includes(`${value}`.toLowerCase()),\r\n                );\r\n              if (!ward) {\r\n                return 'Phường/Xã/Thị trấn không hợp lệ';\r\n              }\r\n            }\r\n            return false;\r\n          },\r\n        },\r\n        {\r\n          header: 'KP/ấp',\r\n          assign: 'quarter',\r\n          validate: (__, value) => {\r\n            if (!value) {\r\n              return 'Bắt buộc nhập khu phố/ấp';\r\n            }\r\n            return false;\r\n          },\r\n        },\r\n        {\r\n          header: 'Tổ(*)',\r\n          assign: 'quarterGroup',\r\n          validate: (__, value) => {\r\n            if (!value) {\r\n              return 'Bắt buộc nhập tổ dân phố';\r\n            }\r\n            return false;\r\n          },\r\n        },\r\n        // {\r\n        //   header: 'Tiêm vắc xin (1 mũi/2 mũi/ chưa tiêm)(*)',\r\n        //   assign: 'immunizationStatus',\r\n        //   formatter: (value) => {\r\n        //     const status = immunizationStatusOptions.find(\r\n        //       (p) => p.text.toUpperCase() === value.toUpperCase(),\r\n        //     );\r\n        //     return status?.value;\r\n        //   },\r\n        //   validate: (__, value) => {\r\n        //     if (!value) {\r\n        //       return 'Bắt buộc chọn trạng thái tiêm vắc xin';\r\n        //     }\r\n  \r\n        //     const status = immunizationStatusOptions.find(\r\n        //       (p) => p.text.toUpperCase() === value.toUpperCase(),\r\n        //     );\r\n        //     if (!status) {\r\n        //       return 'Trạng thái tiêm vắc xin không đúng định dạng';\r\n        //     }\r\n        //     return false;\r\n        //   },\r\n        // },\r\n        // {\r\n        //   header: 'Loại Vaccine (mũi 1)',\r\n        //   assign: 'vaccineFirst',\r\n        //   validate: (obj, value) => {\r\n        //     if (typeof obj.immunizationStatus === 'number') {\r\n        //       if (\r\n        //         !value &&\r\n        //         obj.immunizationStatus >= IMMUNIZATION_STATUSES.ONE_SHOT\r\n        //       ) {\r\n        //         return 'Bắt buộc nhập loại vắc xin (mũi 1)';\r\n        //       }\r\n        //     }\r\n        //     return false;\r\n        //   },\r\n        // },\r\n        // {\r\n        //   header: 'Ngày tiêm mũi 1',\r\n        //   assign: 'injectionDateFirst',\r\n        //   formatter: (value) =>\r\n        //     moment(value, 'DD/MM/YYYY').format('YYYY-MM-DDT07:00:00'),\r\n        //   validate: (obj, value) => {\r\n        //     if (typeof obj.immunizationStatus === 'number') {\r\n        //       if (\r\n        //         !value &&\r\n        //         obj.immunizationStatus >= IMMUNIZATION_STATUSES.ONE_SHOT\r\n        //       ) {\r\n        //         return 'Bắt buộc nhập ngày tiêm (mũi 1)';\r\n        //       }\r\n  \r\n        //       const date = moment(value, 'DD/MM/YYYY');\r\n        //       const beforeDate = moment('01/01/2021', 'DD/MM/YYYY');\r\n        //       const afterDate = moment().endOf('day');\r\n        //       if (date > afterDate || date < beforeDate) {\r\n        //         return `Ngày tiêm phải nằm trong khoảng từ ${beforeDate.format(\r\n        //           'DD/MM/YYYY',\r\n        //         )} đến ${afterDate.format('DD/MM/YYYY')}`;\r\n        //       }\r\n        //     }\r\n        //     return false;\r\n        //   },\r\n        // },\r\n        // {\r\n        //   header: 'Loại Vaccine (mũi 2)',\r\n        //   assign: 'vaccineSecond',\r\n        //   validate: (obj, value) => {\r\n        //     if (typeof obj.immunizationStatus === 'number') {\r\n        //       if (\r\n        //         !value &&\r\n        //         obj.immunizationStatus >= IMMUNIZATION_STATUSES.TWO_SHOT\r\n        //       ) {\r\n        //         return 'Bắt buộc nhập loại vắc xin (mũi 2)';\r\n        //       }\r\n        //     }\r\n        //     return false;\r\n        //   },\r\n        // },\r\n        // {\r\n        //   header: 'Ngày tiêm mũi 2',\r\n        //   assign: 'injectionDateSecond',\r\n        //   formatter: (value) =>\r\n        //     moment(value, 'DD/MM/YYYY').format('YYYY-MM-DDT07:00:00'),\r\n        //   validate: (obj, value) => {\r\n        //     if (typeof obj.immunizationStatus === 'number') {\r\n        //       if (\r\n        //         !value &&\r\n        //         obj.immunizationStatus >= IMMUNIZATION_STATUSES.TWO_SHOT\r\n        //       ) {\r\n        //         return 'Bắt buộc nhập ngày tiêm (mũi 2)';\r\n        //       }\r\n  \r\n        //       const date = moment(value, 'DD/MM/YYYY');\r\n        //       const beforeDate = moment('01/01/2021', 'DD/MM/YYYY');\r\n        //       const afterDate = moment().endOf('day');\r\n        //       if (date > afterDate || date < beforeDate) {\r\n        //         return `Ngày tiêm phải nằm trong khoảng từ ${beforeDate.format(\r\n        //           'DD/MM/YYYY',\r\n        //         )} đến ${afterDate.format('DD/MM/YYYY')}`;\r\n        //       }\r\n        //     }\r\n        //     return false;\r\n        //   },\r\n        // },\r\n        {\r\n          header: 'Có bệnh lý nền(*)',\r\n          assign: 'underlyingDiseases',\r\n          formatter: (value) =>\r\n            value.toString().includes(';')\r\n              ? value\r\n                .toString()\r\n                .split(';')\r\n                .filter((v) =>\r\n                  (underlyingDiseaseList || []).find(\r\n                    (u) => u.index === parseInt(v, 10),\r\n                  ),\r\n                )\r\n                .map((u) => u.id)\r\n              : (underlyingDiseaseList || [])\r\n                .filter((u) => u.index === parseInt(value.toString(), 10))\r\n                .map((u) => u.id),\r\n          validate: (__, value) => {\r\n            if (typeof value === 'undefined') {\r\n              return 'Bắt buộc phải nhập có bệnh lý nền';\r\n            }\r\n            const underlyingDiseaseIndexList = (underlyingDiseaseList || []).map(\r\n              (u) => u.index,\r\n            );\r\n            const difference = value.toString().includes(';')\r\n              ? value\r\n                .toString()\r\n                .split(';')\r\n                .filter(\r\n                  (v) =>\r\n                    v && !underlyingDiseaseIndexList.includes(parseInt(v, 10)),\r\n                )\r\n              : !underlyingDiseaseIndexList.includes(parseInt(value, 10))\r\n                ? [value]\r\n                : [];\r\n            if (Array.isArray(difference) && difference.length > 0) {\r\n              return 'Bệnh nền không hợp lệ';\r\n            }\r\n            return false;\r\n          },\r\n        },\r\n        // {\r\n        //   header: 'Thời gian nhiễm(mm/yyyy)',\r\n        //   assign: 'infectedDate',\r\n        //   formatter: (value) =>\r\n        //     moment(value, 'DD/MM/YYYY').format('YYYY-MM-DDT07:00:00'),\r\n        //   validate: (value) => {\r\n        //     if (value) {\r\n        //       const date = moment(value, 'DD/MM/YYYY');\r\n        //       const afterDate = moment().endOf('day');\r\n        //       if (date > afterDate) {\r\n        //         return `Ngày xét nghiệm không được lớn hơn ${afterDate.format(\r\n        //           'DD/MM/YYYY',\r\n        //         )}`;\r\n        //       }\r\n        //     }\r\n        //     return false;\r\n        //   },\r\n        // },\r\n        // {\r\n        //   header: 'Ngày XN  lần 1',\r\n        //   assign: 'dateOfExamFirst',\r\n        //   formatter: (value) =>\r\n        //     moment(value, 'DD/MM/YYYY').format('YYYY-MM-DDT07:00:00'),\r\n        //   validate: (value) => {\r\n        //     if (value) {\r\n        //       const date = moment(value, 'DD/MM/YYYY');\r\n        //       const afterDate = moment().endOf('day');\r\n        //       if (date > afterDate) {\r\n        //         return `Ngày xét nghiệm không được lớn hơn ${afterDate.format(\r\n        //           'DD/MM/YYYY',\r\n        //         )}`;\r\n        //       }\r\n        //     }\r\n        //     return false;\r\n        //   },\r\n        // },\r\n        // {\r\n        //   header: 'Kết quả XN lần 1',\r\n        //   assign: 'resultOfExamFirst',\r\n        //   validate: (obj, value) => {\r\n        //     if (typeof obj.dateOfExamFirst !== 'undefined') {\r\n        //       if (\r\n        //         !resultsOfExam.find(\r\n        //           (r) => r.toUpperCase() === value.toUpperCase(),\r\n        //         )\r\n        //       ) {\r\n        //         return 'Kết quả xét nghiệm (lần 1) không đúng định dạng';\r\n        //       }\r\n        //     }\r\n        //     return false;\r\n        //   },\r\n        // },\r\n        // {\r\n        //   header: 'Ngày XN  lần 2',\r\n        //   assign: 'dateOfExamSecond',\r\n        //   formatter: (value) =>\r\n        //     moment(value, 'DD/MM/YYYY').format('YYYY-MM-DDT07:00:00'),\r\n        //   validate: (value) => {\r\n        //     if (value) {\r\n        //       const date = moment(value, 'DD/MM/YYYY');\r\n        //       const afterDate = moment().endOf('day');\r\n        //       if (date > afterDate) {\r\n        //         return `Ngày xét nghiệm không được lớn hơn ${afterDate.format(\r\n        //           'DD/MM/YYYY',\r\n        //         )}`;\r\n        //       }\r\n        //     }\r\n        //     return false;\r\n        //   },\r\n        // },\r\n        // {\r\n        //   header: 'Kết quả XN lần 2',\r\n        //   assign: 'resultOfExamSecond',\r\n        //   validate: (obj, value) => {\r\n        //     if (typeof obj.dateOfExamSecond !== 'undefined') {\r\n        //       if (\r\n        //         !resultsOfExam.find(\r\n        //           (r) => r.toUpperCase() === value.toUpperCase(),\r\n        //         )\r\n        //       ) {\r\n        //         return 'Kết quả xét nghiệm (lần 1) không đúng định dạng';\r\n        //       }\r\n        //     }\r\n        //     return false;\r\n        //   },\r\n        // },\r\n        // {\r\n        //   header: 'Loại Vaccine (Mũi bổ sung hoặc nhắc lại)',\r\n        //   assign: 'additionalVaccine',\r\n        //   validate: (obj, value) => {\r\n        //     if (value) {\r\n        //       if (typeof obj.additionalVaccine !== 'undefined') {\r\n        //         return 'Chỉ được điền 1 trong 3 mũi tiêm (mũi cơ bản 1/mũi cơ bản 2/mũi bổ sung (mũi nhắc lại))';\r\n        //       }\r\n        //       if (\r\n        //         typeof obj.immunizationStatus !== 'number' ||\r\n        //         obj.immunizationStatus !== IMMUNIZATION_STATUSES.TWO_SHOT\r\n        //       ) {\r\n        //         return 'Yêu cầu phải tiêm đủ 2 mũi trước khi tiêm mũi bổ sung (mũi nhắc lại)';\r\n        //       }\r\n        //     }\r\n        //     return false;\r\n        //   },\r\n        // },\r\n        // {\r\n        //   header: 'Ngày tiêm (Mũi bổ sung hoặc nhắc lại)',\r\n        //   assign: 'additionalInjectionDate',\r\n        //   validate: (obj, value) => {\r\n        //     if (\r\n        //       typeof obj.additionalVaccine !== 'undefined' &&\r\n        //       obj.immunizationStatus === IMMUNIZATION_STATUSES.TWO_SHOT\r\n        //     ) {\r\n        //       if (!value) {\r\n        //         return 'Bắt buộc phải nhập ngày tiêm (mũi bổ sung hoặc nhắc lại)';\r\n        //       }\r\n  \r\n        //       const date = moment(value, 'DD/MM/YYYY');\r\n        //       const beforeDate = moment('01/01/2021', 'DD/MM/YYYY');\r\n        //       const afterDate = moment().endOf('day');\r\n        //       if (date > afterDate || date < beforeDate) {\r\n        //         return `Ngày tiêm phải nằm trong khoảng từ ${beforeDate.format(\r\n        //           'DD/MM/YYYY',\r\n        //         )} đến ${afterDate.format('DD/MM/YYYY')}`;\r\n        //       }\r\n        //     }\r\n        //     return false;\r\n        //   },\r\n        // },\r\n        // {\r\n        //   header: 'Loại Vaccine (Mũi CB 1)',\r\n        //   assign: 'additionalVaccine',\r\n        //   validate: (obj, value) => {\r\n        //     if (value) {\r\n        //       if (typeof obj.additionalVaccine !== 'undefined') {\r\n        //         return 'Chỉ được điền 1 trong 3 mũi tiêm (mũi cơ bản 1/mũi cơ bản 2/mũi bổ sung (mũi nhắc lại))';\r\n        //       }\r\n        //       if (\r\n        //         typeof obj.immunizationStatus !== 'number' ||\r\n        //         obj.immunizationStatus !== IMMUNIZATION_STATUSES.NO_VACCINE\r\n        //       ) {\r\n        //         return 'Yêu cầu chưa tiêm mũi nào trước khi tiêm mũi cơ bản 1';\r\n        //       }\r\n        //     }\r\n        //     return false;\r\n        //   },\r\n        // },\r\n        // {\r\n        //   header: 'Ngày tiêm (Mũi CB 1)',\r\n        //   assign: 'additionalInjectionDate',\r\n        //   validate: (obj, value) => {\r\n        //     if (\r\n        //       typeof obj.additionalVaccine !== 'undefined' &&\r\n        //       obj.immunizationStatus === IMMUNIZATION_STATUSES.NO_VACCINE\r\n        //     ) {\r\n        //       if (!value) {\r\n        //         return 'Bắt buộc phải nhập ngày tiêm (mũi cơ bản 1)';\r\n        //       }\r\n  \r\n        //       const date = moment(value, 'DD/MM/YYYY');\r\n        //       const beforeDate = moment('01/01/2021', 'DD/MM/YYYY');\r\n        //       const afterDate = moment().endOf('day');\r\n        //       if (date > afterDate || date < beforeDate) {\r\n        //         return `Ngày tiêm phải nằm trong khoảng từ ${beforeDate.format(\r\n        //           'DD/MM/YYYY',\r\n        //         )} đến ${afterDate.format('DD/MM/YYYY')}`;\r\n        //       }\r\n        //     }\r\n        //     return false;\r\n        //   },\r\n        // },\r\n        // {\r\n        //   header: 'Loại Vaccine (Mũi CB 2)',\r\n        //   assign: 'additionalVaccine',\r\n        //   validate: (obj, value) => {\r\n        //     if (value) {\r\n        //       if (typeof obj.additionalVaccine !== 'undefined') {\r\n        //         return 'Chỉ được điền 1 trong 3 mũi tiêm (mũi cơ bản 1/mũi cơ bản 2/mũi bổ sung (mũi nhắc lại))';\r\n        //       }\r\n        //       if (\r\n        //         typeof obj.immunizationStatus !== 'number' ||\r\n        //         obj.immunizationStatus !== IMMUNIZATION_STATUSES.ONE_SHOT\r\n        //       ) {\r\n        //         return 'Yêu cầu phải tiêm mũi 1 trước khi tiêm mũi cơ bản 2';\r\n        //       }\r\n        //     }\r\n        //     return false;\r\n        //   },\r\n        // },\r\n        // {\r\n        //   header: 'Ngày tiêm (Mũi CB 2)',\r\n        //   assign: 'additionalInjectionDate',\r\n        //   validate: (obj, value) => {\r\n        //     if (\r\n        //       typeof obj.additionalVaccine !== 'undefined' &&\r\n        //       obj.immunizationStatus === IMMUNIZATION_STATUSES.ONE_SHOT\r\n        //     ) {\r\n        //       if (!value) {\r\n        //         return 'Bắt buộc phải nhập ngày tiêm (mũi cơ bản 2)';\r\n        //       }\r\n  \r\n        //       const date = moment(value, 'DD/MM/YYYY');\r\n        //       const beforeDate = moment('01/01/2021', 'DD/MM/YYYY');\r\n        //       const afterDate = moment().endOf('day');\r\n        //       if (date > afterDate || date < beforeDate) {\r\n        //         return `Ngày tiêm phải nằm trong khoảng từ ${beforeDate.format(\r\n        //           'DD/MM/YYYY',\r\n        //         )} đến ${afterDate.format('DD/MM/YYYY')}`;\r\n        //       }\r\n        //     }\r\n        //     return false;\r\n        //   },\r\n        // },\r\n        // {\r\n        //   header: 'Được cấp gói thuốc C',\r\n        //   assign: 'DCGTC',\r\n        //   validate: (obj, value) => {\r\n        //     if (obj.infectedDate) {\r\n        //       if (value) {\r\n        //         if (!['CÓ', 'KHÔNG'].indexOf(value.toUpperCase())) {\r\n        //           return 'Được cấp gói thuốc C không đúng định dạng';\r\n        //         }\r\n        //       }\r\n        //     }\r\n        //     return false;\r\n        //   },\r\n        // },\r\n        // {\r\n        //   header: 'Là F0 được cách ly tại nhà',\r\n        //   assign: 'LFDCLTN',\r\n        //   validate: (obj, value) => {\r\n        //     if (obj.infectedDate) {\r\n        //       if (value) {\r\n        //         if (!['CÓ', 'KHÔNG'].indexOf(value.toUpperCase())) {\r\n        //           return 'Không đúng định dạng cột (Là F0 được cách lý tại nhà)';\r\n        //         }\r\n        //       }\r\n        //     }\r\n        //     return false;\r\n        //   },\r\n        // },\r\n      ],\r\n      [underlyingDiseaseList],\r\n    );\r\n  \r\n    const refresh = () => {\r\n      setStep(steps.downloadTemplate);\r\n      setDisabled(false);\r\n      setSelectedFile(null);\r\n      setData([]);\r\n      setError([]);\r\n      setResult([]);\r\n    };\r\n  \r\n    const onClose = () => {\r\n      refresh();\r\n      onCloseProp();\r\n      onRefresh();\r\n    };\r\n  \r\n    // #region parse data\r\n    const parseData = useCallback(\r\n      (binary) => {\r\n        try {\r\n          const book = xlsx.read(binary, {\r\n            type: 'binary',\r\n            cellDates: true,\r\n            cellNF: false,\r\n            cellText: false,\r\n          });\r\n  \r\n          const sheet = book.Sheets[book.SheetNames[0]];\r\n          const rawData = xlsx.utils.sheet_to_json(sheet).map((row) =>\r\n            Object.keys(row).reduce((obj, key) => {\r\n              obj[key.replace(/(\\r\\n|\\n|\\r)/gm, '').trim()] = row[key];\r\n              return obj;\r\n            }, {}),\r\n          );\r\n          const parserData = rawData.map((row, index) =>\r\n            model.reduce((obj, props) => {\r\n              const resultOfValidation = props?.validate\r\n                ? props.validate(obj, row[props.header])\r\n                : false;\r\n              if (resultOfValidation) {\r\n                if (typeof obj.errors === 'undefined') {\r\n                  obj.errors = {\r\n                    row: index + 1,\r\n                    messages: [],\r\n                  };\r\n                }\r\n                obj.errors.messages.push(resultOfValidation);\r\n              } else if (\r\n                typeof row[props.header] !== 'undefined' &&\r\n                row[props.header] !== ''\r\n              ) {\r\n                obj[props.assign] = props?.formatter\r\n                  ? props.formatter(row[props.header])\r\n                  : row[props.header];\r\n              }\r\n              return obj;\r\n            }, {}),\r\n          );\r\n          setData(parserData.filter((d) => !d?.errors));\r\n          setError(parserData.filter((d) => d?.errors));\r\n        } catch (e) {\r\n          toast.warn('Tệp tin không đúng định dạng');\r\n        }\r\n      },\r\n      [model],\r\n    );\r\n    useEffect(() => {\r\n      if (selectedFile) {\r\n        const reader = new FileReader();\r\n        if (reader.readAsBinaryString) {\r\n          reader.onload = () => parseData(reader.result);\r\n          reader.readAsBinaryString(selectedFile);\r\n        }\r\n      }\r\n      // eslint-disable-next-line\r\n    }, [selectedFile]);\r\n    // #endregion\r\n  \r\n    // #region upload data\r\n    const formatRequest = (d) => {\r\n      const url = window.location.href;\r\n      return {\r\n        profileModel: {\r\n          profile: {\r\n            fullName: d.name,\r\n            gender: d.gender,\r\n            cmnd: d.identityCard.length !== 12 ? `${d.identityCard}` : null,\r\n            cccd: d.identityCard.length === 12 ? `${d.identityCard}` : null,\r\n            phoneNumber: d.phoneNumber,\r\n            dateOfBirth: d.dateOfBirth,\r\n            hasYearOfBirthOnly: false,\r\n            profileCreationReason: {},\r\n            workAddresses: [],\r\n            addressesInVietnam: [\r\n              {\r\n                provinceValue: d.provinceValue,\r\n                districtValue: d.districtValue,\r\n                wardValue: d.wardValue,\r\n                quarter: d.quarter,\r\n                quarterGroup: d.quarterGroup,\r\n                streetHouseNumber: d.streetHouseNumber,\r\n              },\r\n            ],\r\n            underlyingDiseases: d?.underlyingDiseases ?? null,\r\n            createdFrom: 6,\r\n          },\r\n          newImmunization: d?.additionalImmunizationStatus\r\n            ? {\r\n              immunizationStatus: d.additionalImmunizationStatus,\r\n              injectionDate: d.additionalInjectionDate,\r\n              vaccine: d.additionalVaccine,\r\n              disease: 'Covid-19',\r\n            }\r\n            : null,\r\n          curImmunizations: d?.injectionDateSecond\r\n            ? [\r\n              {\r\n                immunizationStatus: IMMUNIZATION_STATUSES.TWO_SHOT,\r\n                injectionDate: d.injectionDateSecond,\r\n                vaccine: d.vaccineSecond,\r\n                disease: 'Covid-19',\r\n              },\r\n              {\r\n                immunizationStatus: IMMUNIZATION_STATUSES.ONE_SHOT,\r\n                injectionDate: d.injectionDateFirst,\r\n                vaccine: d.vaccineFirst,\r\n                disease: 'Covid-19',\r\n              },\r\n            ]\r\n            : d?.injectionDateFirst\r\n              ? [\r\n                {\r\n                  immunizationStatus: IMMUNIZATION_STATUSES.ONE_SHOT,\r\n                  injectionDate: d.injectionDateFirst,\r\n                  vaccine: d.vaccineFirst,\r\n                  disease: 'Covid-19',\r\n                },\r\n              ]\r\n              : [],\r\n          treatment: d?.infectedDate\r\n            ? {\r\n              fromDate: d?.infectedDate,\r\n              contents: {\r\n                DCGTC: d?.DCGTC,\r\n                LFDCLTN: d?.LFDCLTN,\r\n              },\r\n            }\r\n            : null,\r\n        },\r\n        quickTestModel: {\r\n          date1: d?.dateOfExamFirst ?? null,\r\n          result1: d?.resultOfExamFirst ?? null,\r\n          date2: d?.dateOfExamSecond ?? null,\r\n          result2: d?.resultOfExamSecond ?? null,\r\n        },\r\n        createProfileMqExchangeName:\r\n          url.indexOf('abcde') > -1 || process.env.NODE_ENV === 'development'\r\n            ? 'NewProfileQueue1'\r\n            : 'NewProfileQueue',\r\n      };\r\n    };\r\n    const getImportError = (errorResponse = { response: {} }) => {\r\n      const resultError = {\r\n        succeed: false,\r\n        message: 'Lỗi không xác định',\r\n      };\r\n      if (errorResponse.response?.data) {\r\n        if (typeof errorResponse.response.data === 'string') {\r\n          if (\r\n            errorResponse.response.data.includes(\r\n              'Record is existed or only update',\r\n            )\r\n          ) {\r\n            resultError.message = 'Xung đột thông tin tiền sử tiêm chủng';\r\n          } else {\r\n            const examinationError = getExaminationError(\r\n              errorResponse.response.data,\r\n            );\r\n            if (examinationError) {\r\n              resultError.message = examinationError;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return resultError;\r\n    };\r\n    const uploadData = async () => {\r\n      for (const profile of data) {\r\n        try {\r\n          await dispatch(importQuickTestJson([formatRequest(profile)]));\r\n          setResult((rl) => [...rl, { ...profile, result: { succeed: true } }]);\r\n        } catch (e) {\r\n          setResult((rl) => [\r\n            ...rl,\r\n            { ...profile, result: { ...getImportError(e) } },\r\n          ]);\r\n        }\r\n      }\r\n  \r\n      setStep(steps.result);\r\n    };\r\n    // #endregion\r\n  \r\n    // #region component\r\n    const dataColumns = useMemo(\r\n      () => [\r\n        {\r\n          Header: '#',\r\n          accessor: 'index',\r\n        },\r\n        {\r\n          Header: 'Họ tên',\r\n          accessor: 'name',\r\n        },\r\n        {\r\n          Header: 'Ngày sinh',\r\n          formatter: ({ dateOfBirth }) => formatToDate(dateOfBirth),\r\n        },\r\n        {\r\n          Header: 'Số điện thoại',\r\n          accessor: 'phoneNumber',\r\n        },\r\n        {\r\n          Header: 'Địa chỉ',\r\n          formatter: ({\r\n            streetHouseNumber,\r\n            provinceValue,\r\n            districtValue,\r\n            wardValue,\r\n          }) =>\r\n            formatAddressToString({\r\n              streetHouseNumber,\r\n              provinceValue,\r\n              districtValue,\r\n              wardValue,\r\n            }),\r\n        },\r\n        // {\r\n        //   Header: 'Tiền sử tiêm chủng',\r\n        //   formatter: ({\r\n        //     vaccineFirst,\r\n        //     injectionDateFirst,\r\n        //     vaccineSecond,\r\n        //     injectionDateSecond,\r\n        //   }) => (\r\n        //     <div>\r\n        //       {vaccineSecond ? (\r\n        //         <>\r\n        //           <Header sub>\r\n        //             <b style={{ color: '#DB2729' }}>Mũi 2</b>\r\n        //             {` | ${vaccineSecond}`}\r\n        //           </Header>\r\n        //           <span>{formatToDate(injectionDateSecond)}</span>\r\n        //         </>\r\n        //       ) : vaccineFirst ? (\r\n        //         <>\r\n        //           <Header sub>\r\n        //             <b style={{ color: '#DB2729' }}>Mũi 1</b>\r\n        //             {` | ${vaccineFirst}`}\r\n        //           </Header>\r\n        //           <span>{formatToDate(injectionDateFirst)}</span>\r\n        //         </>\r\n        //       ) : (\r\n        //         <Header sub>Chưa tiêm</Header>\r\n        //       )}\r\n        //     </div>\r\n        //   ),\r\n        // },\r\n        // {\r\n        //   Header: 'Xét nghiệm lần 1',\r\n        //   formatter: ({ dateOfExamFirst, resultOfExamFirst }) =>\r\n        //     resultOfExamFirst ? (\r\n        //       <div>\r\n        //         <Header sub>\r\n        //           {resultOfExamFirst.includes(deburr('Dương')) ? (\r\n        //             <b style={{ color: '#DB2729' }}>{resultOfExamFirst}</b>\r\n        //           ) : (\r\n        //             resultOfExamFirst\r\n        //           )}\r\n        //         </Header>\r\n        //         <span>{formatToDate(dateOfExamFirst)}</span>\r\n        //       </div>\r\n        //     ) : null,\r\n        // },\r\n        // {\r\n        //   Header: 'Xét nghiệm lần 2',\r\n        //   formatter: ({ dateOfExamSecond, resultOfExamSecond }) =>\r\n        //     resultOfExamSecond ? (\r\n        //       <div>\r\n        //         <Header sub>\r\n        //           {resultOfExamSecond.includes(deburr('Dương')) ? (\r\n        //             <b style={{ color: '#DB2729' }}>{resultOfExamSecond}</b>\r\n        //           ) : (\r\n        //             resultOfExamSecond\r\n        //           )}\r\n        //         </Header>\r\n        //         <span>{formatToDate(dateOfExamSecond)}</span>\r\n        //       </div>\r\n        //     ) : null,\r\n        // },\r\n      ],\r\n      [],\r\n    );\r\n    const errorColumns = useMemo(\r\n      () => [\r\n        {\r\n          Header: 'Hàng',\r\n          formatter: ({ errors }) => <Header sub>{errors?.row}</Header>,\r\n        },\r\n        {\r\n          Header: ' ',\r\n          formatter: ({ errors }) =>\r\n            errors?.messages ? (\r\n              <List divided relaxed>\r\n                {errors.messages.map((m) => (\r\n                  <List.Item key={m}>\r\n                    <List.Icon name=\"x\" color=\"red\" verticalAlign=\"middle\" />\r\n                    <List.Content>\r\n                      <List.Description>{m}</List.Description>\r\n                    </List.Content>\r\n                  </List.Item>\r\n                ))}\r\n              </List>\r\n            ) : null,\r\n        },\r\n      ],\r\n      [],\r\n    );\r\n    const jsx_menuTable = useMemo(() => {\r\n      const panes = [\r\n        {\r\n          menuItem: `Dữ liệu đọc được (${data.length})`,\r\n          render: () => (\r\n            <Tab.Pane>\r\n              <DataTable\r\n                columns={dataColumns}\r\n                data={data.map((d, i) => ({ ...d, index: i + 1 }))}\r\n              />\r\n            </Tab.Pane>\r\n          ),\r\n        },\r\n        {\r\n          menuItem: `Dữ liệu bị lỗi (${error.length})`,\r\n          render: () => (\r\n            <Tab.Pane>\r\n              <DataTable\r\n                columns={errorColumns}\r\n                data={error.map((e, i) => ({ ...e, index: i + 1 }))}\r\n              />\r\n            </Tab.Pane>\r\n          ),\r\n        },\r\n      ];\r\n  \r\n      return (\r\n        <MenuWrapper>\r\n          <Tab panes={panes} renderActiveOnly />\r\n        </MenuWrapper>\r\n      );\r\n    }, [data, error, dataColumns, errorColumns]);\r\n  \r\n    const resultColumns = useMemo(\r\n      () => [\r\n        {\r\n          Header: '#',\r\n          accessor: 'index',\r\n        },\r\n        {\r\n          Header: 'Họ tên',\r\n          accessor: 'name',\r\n        },\r\n        {\r\n          Header: 'Ngày sinh',\r\n          formatter: ({ dateOfBirth }) => formatToDate(dateOfBirth),\r\n        },\r\n        {\r\n          Header: 'Số điện thoại',\r\n          accessor: 'phoneNumber',\r\n        },\r\n        {\r\n          Header: 'Địa chỉ',\r\n          formatter: ({\r\n            streetHouseNumber,\r\n            provinceValue,\r\n            districtValue,\r\n            wardValue,\r\n          }) =>\r\n            formatAddressToString({\r\n              streetHouseNumber,\r\n              provinceValue,\r\n              districtValue,\r\n              wardValue,\r\n            }),\r\n        },\r\n        // {\r\n        //   Header: 'Tiền sử tiêm chủng',\r\n        //   formatter: ({\r\n        //     vaccineFirst,\r\n        //     injectionDateFirst,\r\n        //     vaccineSecond,\r\n        //     injectionDateSecond,\r\n        //   }) => (\r\n        //     <div>\r\n        //       {vaccineSecond ? (\r\n        //         <>\r\n        //           <Header sub>\r\n        //             <b style={{ color: '#DB2729' }}>Mũi 2</b>\r\n        //             {` | ${vaccineSecond}`}\r\n        //           </Header>\r\n        //           <span>{formatToTime(injectionDateSecond)}</span>\r\n        //         </>\r\n        //       ) : vaccineFirst ? (\r\n        //         <>\r\n        //           <Header sub>\r\n        //             <b style={{ color: '#DB2729' }}>Mũi 1</b>\r\n        //             {` | ${vaccineFirst}`}\r\n        //           </Header>\r\n        //           <span>{formatToTime(injectionDateFirst)}</span>\r\n        //         </>\r\n        //       ) : (\r\n        //         <Header sub>Chưa tiêm</Header>\r\n        //       )}\r\n        //     </div>\r\n        //   ),\r\n        // },\r\n        // {\r\n        //   Header: 'Xét nghiệm lần 1',\r\n        //   formatter: ({ dateOfExamFirst, resultOfExamFirst }) =>\r\n        //     resultOfExamFirst ? (\r\n        //       <div>\r\n        //         <Header sub>\r\n        //           {resultOfExamFirst.includes(deburr('Dương')) ? (\r\n        //             <b style={{ color: '#DB2729' }}>{resultOfExamFirst}</b>\r\n        //           ) : (\r\n        //             resultOfExamFirst\r\n        //           )}\r\n        //         </Header>\r\n        //         <span>{formatToTime(dateOfExamFirst)}</span>\r\n        //       </div>\r\n        //     ) : null,\r\n        // },\r\n        // {\r\n        //   Header: 'Xét nghiệm lần 2',\r\n        //   formatter: ({ dateOfExamSecond, resultOfExamSecond }) =>\r\n        //     resultOfExamSecond ? (\r\n        //       <div>\r\n        //         <Header sub>\r\n        //           {resultOfExamSecond.includes(deburr('Dương')) ? (\r\n        //             <b style={{ color: '#DB2729' }}>{resultOfExamSecond}</b>\r\n        //           ) : (\r\n        //             resultOfExamSecond\r\n        //           )}\r\n        //         </Header>\r\n        //         <span>{formatToTime(dateOfExamSecond)}</span>\r\n        //       </div>\r\n        //     ) : null,\r\n        // },\r\n        {\r\n          Header: ' ',\r\n          formatter: (r) => (\r\n            <>\r\n              <Icon name=\"info circle\" />{' '}\r\n              {r?.result?.succeed ? 'Thành công' : r?.result?.message}\r\n            </>\r\n          ),\r\n        },\r\n      ],\r\n      [],\r\n    );\r\n    const jsx_resultTable = useMemo(\r\n      () => (\r\n        <DataTable\r\n          title={`Kết quả đã nạp ${result.reduce(\r\n            (c, t) => (t?.result?.succeed ? c + 1 : c),\r\n            0,\r\n          )}/${result.length} hồ sơ`}\r\n          columns={resultColumns}\r\n          data={result.map((d, i) => ({ ...d, index: i + 1 }))}\r\n          rowError={(r) => !r?.result?.succeed}\r\n          rowSucceed={(r) => r?.result?.succeed}\r\n        />\r\n      ),\r\n      [result, resultColumns],\r\n    );\r\n  \r\n    const jsx_downloadTemplate = useMemo(\r\n      () => (\r\n        <Message\r\n          info\r\n          icon\r\n          style={{ marginBottom: 0, cursor: 'pointer' }}\r\n          onClick={() => downloadFile(excelTemplate)}\r\n        >\r\n          <Icon name=\"download\" />\r\n          <Message.Content>\r\n            <Message.Header>Tải tệp tin mẫu</Message.Header>\r\n            Sử dụng tệp tin mẫu, để đảm bảo dữ liệu chính xác\r\n          </Message.Content>\r\n        </Message>\r\n      ),\r\n      [],\r\n    );\r\n  \r\n    const jsx_content = useMemo(() => {\r\n      switch (step) {\r\n        case steps.downloadTemplate:\r\n          return jsx_downloadTemplate;\r\n        case steps.reviewData:\r\n          return jsx_menuTable;\r\n        case steps.result:\r\n          return jsx_resultTable;\r\n        default:\r\n          return jsx_downloadTemplate;\r\n      }\r\n    }, [step, jsx_downloadTemplate, jsx_menuTable, jsx_resultTable]);\r\n    // #endregion\r\n  \r\n    useEffect(() => {\r\n      if (!underlyingDiseaseList || underlyingDiseaseList.length === 0) {\r\n        dispatch(getUnderlyingDiseases({}));\r\n      }\r\n      // eslint-disable-next-line\r\n    }, [dispatch]);\r\n  \r\n    useEffect(() => {\r\n      if (error.length === 0) {\r\n        setDisabled(false);\r\n      } else {\r\n        setDisabled(true);\r\n      }\r\n    }, [error]);\r\n  \r\n    return (\r\n      <Modal\r\n        open={open}\r\n        size={step !== steps.downloadTemplate ? 'fullscreen' : undefined}\r\n        onClose={onClose}\r\n      >\r\n        <Modal.Header>Nạp dữ liệu từ file Excel</Modal.Header>\r\n        <Modal.Content>\r\n          <Wrapper>\r\n            <Dimmer inverted active={loading}>\r\n              <Loader />\r\n            </Dimmer>\r\n            <div>\r\n              <Button\r\n                icon=\"upload\"\r\n                labelPosition=\"right\"\r\n                color=\"green\"\r\n                content=\"Chọn File\"\r\n                onClick={() => {\r\n                  refresh();\r\n                  fileInputRef.current.click();\r\n                }}\r\n              />\r\n              {selectedFile ? (\r\n                <span style={{ marginLeft: '10px', fontWeight: '700' }}>\r\n                  {selectedFile.name}\r\n                </span>\r\n              ) : null}\r\n            </div>\r\n            <input\r\n              hidden\r\n              type=\"file\"\r\n              ref={fileInputRef}\r\n              onChange={(e) => {\r\n                setSelectedFile(e.target.files[0]);\r\n                setStep(steps.reviewData);\r\n              }}\r\n              accept=\".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\"\r\n            />\r\n            {jsx_content}\r\n          </Wrapper>\r\n        </Modal.Content>\r\n        <Modal.Actions>\r\n          <Button\r\n            positive\r\n            labelPosition=\"right\"\r\n            icon=\"checkmark\"\r\n            content=\"Xác nhận\"\r\n            disabled={disabled}\r\n            loading={loading}\r\n            onClick={uploadData}\r\n          />\r\n          <Button\r\n            negative\r\n            labelPosition=\"right\"\r\n            icon=\"close\"\r\n            content=\"Đóng\"\r\n            onClick={onClose}\r\n          />\r\n        </Modal.Actions>\r\n      </Modal>\r\n    );\r\n  };\r\n  \r\n  ImportModal.propTypes = {\r\n    open: PropTypes.bool,\r\n    onClose: PropTypes.func,\r\n    onRefresh: PropTypes.func,\r\n  };\r\n  \r\n  ImportModal.defaultProps = {\r\n    open: false,\r\n    onClose: () => { },\r\n    onRefresh: () => { },\r\n  };\r\n  \r\n  export default ImportModal;\r\n  "],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,IACRC,QAAQ,EACRC,SAAS,EACTC,OAAO,EACPC,WAAW,EACXC,MAAM,QACD,OAAO;AACd,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,KAAK,QAAQ,gBAAgB;AACtC,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,MAAM,MAAM,QAAQ;AAC3B,OAAOC,IAAI,MAAM,MAAM;AAEvB,SACEC,KAAK,EACLC,MAAM,EACNC,OAAO,EACPC,IAAI,EACJC,MAAM,EACNC,GAAG,EACHC,IAAI,EACJC,MAAM,EACNC,MAAM,QACD,mBAAmB;AAC1B,SAASC,SAAS,QAAQ,uBAAuB;AAEjD,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,mBAAmB,QAAQ,mCAAmC;AACvE,SAASC,qBAAqB,QAAQ,yBAAyB;AAC/D,SACEC,YAAY,EACZC,qBAAqB,EACrBC,YAAY,EACZC,YAAY,EACZC,MAAM,EACNC,mBAAmB,QACd,mBAAmB;AAC1B,SAASC,YAAY,QAAQ,uBAAuB;AACpD,SAASC,qBAAqB,QAAQ,yBAAyB;AAE/D,OAAOC,SAAS,MAAM,2BAA2B;AACjD,OAAOC,aAAa,MAAM,4DAA4D;AAEtF,MAAMC,OAAO,GAAG7B,MAAM,CAAC8B,GAAI;AAC7B;AACA,GAAG;AAED,MAAMC,WAAW,GAAG/B,MAAM,CAAC8B,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AAED,MAAME,aAAa,GAAG,CAAC,YAAY,EAAE,SAAS,CAAC;AAC/C,MAAMC,yBAAyB,GAAG,CAChC;EAAEC,GAAG,EAAE,CAAC;EAAEC,KAAK,EAAET,qBAAqB,CAACU,UAAU;EAAEC,IAAI,EAAE;AAAY,CAAC,EACtE;EAAEH,GAAG,EAAE,CAAC;EAAEC,KAAK,EAAET,qBAAqB,CAACY,QAAQ;EAAED,IAAI,EAAE;AAAa,CAAC,EACrE;EAAEH,GAAG,EAAE,CAAC;EAAEC,KAAK,EAAET,qBAAqB,CAACa,QAAQ;EAAEF,IAAI,EAAE;AAAa,CAAC,CACtE;AAED,MAAMG,KAAK,GAAG;EACZC,gBAAgB,EAAE,CAAC;EACnBC,UAAU,EAAE,CAAC;EACbC,MAAM,EAAE;AACV,CAAC;AAED,MAAMC,WAAW,GAAGC,IAAA,IAId;EAAA,IAJe;IACnBC,IAAI;IACJC,OAAO,EAAEC,WAAW;IACpBC;EACF,CAAC,GAAAJ,IAAA;EACC,MAAM,CAACK,IAAI,EAAEC,OAAO,CAAC,GAAGxD,QAAQ,CAAC6C,KAAK,CAACC,gBAAgB,CAAC;EACxD,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAG1D,QAAQ,CAAC,KAAK,CAAC;EAE/C,MAAM2D,YAAY,GAAGvD,MAAM,EAAE;EAC7B,MAAM,CAACwD,YAAY,EAAEC,eAAe,CAAC,GAAG7D,QAAQ,CAAC,IAAI,CAAC;EAEtD,MAAM,CAAC8D,IAAI,EAAEC,OAAO,CAAC,GAAG/D,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACgE,KAAK,EAAEC,QAAQ,CAAC,GAAGjE,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACgD,MAAM,EAAEkB,SAAS,CAAC,GAAGlE,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAMmE,QAAQ,GAAG/C,WAAW,EAAE;EAC9B,MAAM;IACJgD,qBAAqB,EAAE;MAAEN,IAAI,EAAEO;IAAsB;EACvD,CAAC,GAAGhD,WAAW,CAAEiD,KAAK,IAAKA,KAAK,CAACC,OAAO,CAAC;EACzC,MAAM;IAAEC;EAA2B,CAAC,GAAGnD,WAAW,CAC/CiD,KAAK,IAAKA,KAAK,CAACG,WAAW,CAC7B;EAED,MAAMC,OAAO,GAAGF,0BAA0B;EAE1C,MAAMG,KAAK,GAAGzE,OAAO,CACnB,MAAM,CACJ;IACE0E,MAAM,EAAE,WAAW;IACnBC,MAAM,EAAE,MAAM;IACdC,SAAS,EAAGtC,KAAK,IAAKA,KAAK,CAACuC,WAAW,EAAE,CAACC,IAAI,EAAE;IAChDC,QAAQ,EAAEA,CAACC,EAAE,EAAE1C,KAAK,KAAK;MACvB,IAAI,CAACA,KAAK,EAAE;QACV,OAAO,mBAAmB;MAC5B;MACA,OAAO,KAAK;IACd;EACF,CAAC,EACD;IACEoC,MAAM,EAAE,cAAc;IACtBC,MAAM,EAAE,aAAa;IACrBC,SAAS,EAAGtC,KAAK,IACfhC,MAAM,CAACgC,KAAK,EAAE,YAAY,CAAC,CAAC2C,MAAM,CAAC,qBAAqB,CAAC;IAC3DF,QAAQ,EAAEA,CAACC,EAAE,EAAE1C,KAAK,KAAK;MACvB,IAAI,CAACA,KAAK,EAAE;QACV,OAAO,yBAAyB;MAClC;MAEA,MAAM4C,IAAI,GAAG5E,MAAM,CAACgC,KAAK,EAAE,YAAY,CAAC;MACxC,MAAM6C,UAAU,GAAG7E,MAAM,CAAC,YAAY,EAAE,YAAY,CAAC;MACrD,MAAM8E,SAAS,GAAG9E,MAAM,EAAE,CAAC+E,KAAK,CAAC,KAAK,CAAC;MACvC,IAAIH,IAAI,GAAGE,SAAS,IAAIF,IAAI,GAAGC,UAAU,EAAE;QACzC,OAAQ,sCAAqCA,UAAU,CAACF,MAAM,CAC5D,YAAY,CACZ,QAAOG,SAAS,CAACH,MAAM,CAAC,YAAY,CAAE,EAAC;MAC3C;MACA,OAAO,KAAK;IACd;EACF,CAAC,EACD;IACEP,MAAM,EAAE,wBAAwB;IAChCC,MAAM,EAAE,QAAQ;IAChBC,SAAS,EAAGtC,KAAK,IAAKV,YAAY,CAACU,KAAK;EAC1C,CAAC,EACD;IACEoC,MAAM,EAAE,eAAe;IACvBC,MAAM,EAAE,cAAc;IACtBI,QAAQ,EAAEA,CAACC,EAAE,EAAE1C,KAAK,KAAK;MACvB,IAAI,CAACA,KAAK,EAAE;QACV,OAAO,yBAAyB;MAClC;MACA,OAAO,KAAK;IACd;EACF,CAAC,EACD;IACEoC,MAAM,EAAE,gBAAgB;IACxBC,MAAM,EAAE,aAAa;IACrBC,SAAS,EAAGtC,KAAK,IAAM,OAAOA,KAAK,KAAK,QAAQ,GAAI,IAAGA,KAAM,EAAC,GAAGA,KAAM;IACvEyC,QAAQ,EAAEA,CAACC,EAAE,EAAE1C,KAAK,KAAK;MACvB,IAAI,CAACA,KAAK,EAAE;QACV,OAAO,6BAA6B;MACtC;MACA,OAAO,KAAK;IACd;EACF,CAAC,EACD;IACEoC,MAAM,EAAE,uBAAuB;IAC/BC,MAAM,EAAE,mBAAmB;IAC3BI,QAAQ,EAAEA,CAACC,EAAE,EAAE1C,KAAK,KAAK;MACvB,IAAI,CAACA,KAAK,EAAE;QACV,OAAO,uBAAuB;MAChC;MACA,OAAO,KAAK;IACd;EACF,CAAC,EACD;IACEoC,MAAM,EAAE,oBAAoB;IAC5BC,MAAM,EAAE,eAAe;IACvBC,SAAS,EAAEA,CAACI,EAAE,EAAE1C,KAAK;MAAA,IAAAgD,eAAA;MAAA,OACnBxD,SAAS,aAATA,SAAS,wBAAAwD,eAAA,GAATxD,SAAS,CAAEyD,IAAI,CAAEC,CAAC;QAAA,IAAAC,QAAA,EAAAC,oBAAA;QAAA,OAChBF,CAAC,aAADA,CAAC,wBAAAC,QAAA,GAADD,CAAC,CAAEG,KAAK,cAAAF,QAAA,wBAAAC,oBAAA,GAARD,QAAA,CAAUG,WAAW,EAAE,cAAAF,oBAAA,uBAAvBA,oBAAA,CAAyBG,QAAQ,CAAE,GAAEvD,KAAM,EAAC,CAACsD,WAAW,EAAE,CAAC;MAAA,EAC5D,cAAAN,eAAA,uBAFDA,eAAA,CAEGhD,KAAK;IAAA;IACVyC,QAAQ,EAAEA,CAACC,EAAE,EAAE1C,KAAK,KAAK;MACvB,IAAI,CAACA,KAAK,EAAE;QACV,OAAO,8BAA8B;MACvC;MACA,MAAMwD,QAAQ,GAAGhE,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEyD,IAAI,CAAEC,CAAC;QAAA,IAAAO,SAAA,EAAAC,qBAAA;QAAA,OACjCR,CAAC,aAADA,CAAC,wBAAAO,SAAA,GAADP,CAAC,CAAEG,KAAK,cAAAI,SAAA,wBAAAC,qBAAA,GAARD,SAAA,CAAUH,WAAW,EAAE,cAAAI,qBAAA,uBAAvBA,qBAAA,CAAyBH,QAAQ,CAAE,GAAEvD,KAAM,EAAC,CAACsD,WAAW,EAAE,CAAC;MAAA,EAC5D;MACD,IAAI,CAACE,QAAQ,EAAE;QACb,OAAO,6BAA6B;MACtC;MACA,OAAO,KAAK;IACd;EACF,CAAC,EACD;IACEpB,MAAM,EAAE,uBAAuB;IAC/BC,MAAM,EAAE,eAAe;IACvBC,SAAS,EAAEA,CAACqB,GAAG,EAAE3D,KAAK;MAAA,IAAA4D,gBAAA,EAAAC,qBAAA,EAAAC,sBAAA;MAAA,OACpBtE,SAAS,aAATA,SAAS,wBAAAoE,gBAAA,GAATpE,SAAS,CACLyD,IAAI,CAAEC,CAAC;QAAA,IAAAa,QAAA,EAAAC,oBAAA;QAAA,OACPd,CAAC,aAADA,CAAC,wBAAAa,QAAA,GAADb,CAAC,CAAElD,KAAK,cAAA+D,QAAA,wBAAAC,oBAAA,GAARD,QAAA,CACIT,WAAW,EAAE,cAAAU,oBAAA,uBADjBA,oBAAA,CAEIT,QAAQ,CAAE,GAAEI,GAAG,CAACM,aAAc,EAAC,CAACX,WAAW,EAAE,CAAC;MAAA,EACnD,cAAAM,gBAAA,wBAAAC,qBAAA,GALHD,gBAAA,CAMIM,SAAS,cAAAL,qBAAA,wBAAAC,sBAAA,GANbD,qBAAA,CAMeZ,IAAI,CAAEkB,CAAC;QAAA,IAAAC,QAAA,EAAAC,oBAAA;QAAA,OAClBF,CAAC,aAADA,CAAC,wBAAAC,QAAA,GAADD,CAAC,CAAEd,KAAK,cAAAe,QAAA,wBAAAC,oBAAA,GAARD,QAAA,CAAUd,WAAW,EAAE,cAAAe,oBAAA,uBAAvBA,oBAAA,CAAyBd,QAAQ,CAAE,GAAEvD,KAAM,EAAC,CAACsD,WAAW,EAAE,CAAC;MAAA,EAC5D,cAAAQ,sBAAA,uBARHA,sBAAA,CAQK9D,KAAK;IAAA;IACZyC,QAAQ,EAAEA,CAACkB,GAAG,EAAE3D,KAAK,KAAK;MACxB,IAAI,CAACA,KAAK,EAAE;QACV,OAAO,2CAA2C;MACpD;MACA,IAAI2D,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEM,aAAa,EAAE;QAAA,IAAAK,gBAAA,EAAAC,qBAAA;QACtB,MAAMC,QAAQ,GAAGhF,SAAS,aAATA,SAAS,wBAAA8E,gBAAA,GAAT9E,SAAS,CACtByD,IAAI,CAAEC,CAAC;UAAA,IAAAuB,SAAA,EAAAC,qBAAA;UAAA,QAAAD,SAAA,GACPvB,CAAC,CAAClD,KAAK,cAAAyE,SAAA,wBAAAC,qBAAA,GAAPD,SAAA,CACInB,WAAW,EAAE,cAAAoB,qBAAA,uBADjBA,qBAAA,CAEInB,QAAQ,CAAE,GAAEI,GAAG,CAACM,aAAc,EAAC,CAACX,WAAW,EAAE,CAAC;QAAA,EACnD,cAAAgB,gBAAA,wBAAAC,qBAAA,GALcD,gBAAA,CAMbJ,SAAS,cAAAK,qBAAA,uBANIA,qBAAA,CAMFtB,IAAI,CAAEkB,CAAC;UAAA,IAAAQ,SAAA,EAAAC,qBAAA;UAAA,QAAAD,SAAA,GAClBR,CAAC,CAACd,KAAK,cAAAsB,SAAA,wBAAAC,qBAAA,GAAPD,SAAA,CAASrB,WAAW,EAAE,cAAAsB,qBAAA,uBAAtBA,qBAAA,CAAwBrB,QAAQ,CAAE,GAAEvD,KAAM,EAAC,CAACsD,WAAW,EAAE,CAAC;QAAA,EAC3D;QACH,IAAI,CAACkB,QAAQ,EAAE;UACb,OAAO,0CAA0C;QACnD;MACF;MACA,OAAO,KAAK;IACd;EACF,CAAC,EACD;IACEpC,MAAM,EAAE,yBAAyB;IACjCC,MAAM,EAAE,WAAW;IACnBC,SAAS,EAAEA,CAACqB,GAAG,EAAE3D,KAAK;MAAA,IAAA6E,gBAAA,EAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA;MAAA,OACpBzF,SAAS,aAATA,SAAS,wBAAAqF,gBAAA,GAATrF,SAAS,CACLyD,IAAI,CAAEC,CAAC;QAAA,IAAAgC,SAAA,EAAAC,qBAAA;QAAA,OACPjC,CAAC,aAADA,CAAC,wBAAAgC,SAAA,GAADhC,CAAC,CAAElD,KAAK,cAAAkF,SAAA,wBAAAC,qBAAA,GAARD,SAAA,CACI5B,WAAW,EAAE,cAAA6B,qBAAA,uBADjBA,qBAAA,CAEI5B,QAAQ,CAAE,GAAEI,GAAG,CAACM,aAAc,EAAC,CAACX,WAAW,EAAE,CAAC;MAAA,EACnD,cAAAuB,gBAAA,wBAAAC,qBAAA,GALHD,gBAAA,CAMIX,SAAS,cAAAY,qBAAA,wBAAAC,sBAAA,GANbD,qBAAA,CAMe7B,IAAI,CAAEkB,CAAC;QAAA,IAAAiB,QAAA,EAAAC,oBAAA;QAAA,OAClBlB,CAAC,aAADA,CAAC,wBAAAiB,QAAA,GAADjB,CAAC,CAAEnE,KAAK,cAAAoF,QAAA,wBAAAC,oBAAA,GAARD,QAAA,CACI9B,WAAW,EAAE,cAAA+B,oBAAA,uBADjBA,oBAAA,CAEI9B,QAAQ,CAAE,GAAEI,GAAG,CAAC2B,aAAc,EAAC,CAAChC,WAAW,EAAE,CAAC;MAAA,EACnD,cAAAyB,sBAAA,wBAAAC,sBAAA,GAVHD,sBAAA,CAWIQ,KAAK,cAAAP,sBAAA,wBAAAC,sBAAA,GAXTD,sBAAA,CAWW/B,IAAI,CAAEkB,CAAC;QAAA,IAAAqB,SAAA,EAAAC,qBAAA;QAAA,OACdtB,CAAC,aAADA,CAAC,wBAAAqB,SAAA,GAADrB,CAAC,CAAEd,KAAK,cAAAmC,SAAA,wBAAAC,qBAAA,GAARD,SAAA,CAAUlC,WAAW,EAAE,cAAAmC,qBAAA,uBAAvBA,qBAAA,CAAyBlC,QAAQ,CAAE,GAAEvD,KAAM,EAAC,CAACsD,WAAW,EAAE,CAAC;MAAA,EAC5D,cAAA2B,sBAAA,uBAbHA,sBAAA,CAaKjF,KAAK;IAAA;IACZyC,QAAQ,EAAEA,CAACkB,GAAG,EAAE3D,KAAK,KAAK;MACxB,IAAI,CAACA,KAAK,EAAE;QACV,OAAO,kCAAkC;MAC3C;MACA,IAAI,CAAA2D,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEM,aAAa,MAAIN,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAE2B,aAAa,GAAE;QAAA,IAAAI,gBAAA,EAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA;QAC5C,MAAMC,IAAI,GAAGtG,SAAS,aAATA,SAAS,wBAAAkG,gBAAA,GAATlG,SAAS,CAClByD,IAAI,CAAEC,CAAC;UAAA,IAAA6C,SAAA,EAAAC,qBAAA;UAAA,OACP9C,CAAC,aAADA,CAAC,wBAAA6C,SAAA,GAAD7C,CAAC,CAAElD,KAAK,cAAA+F,SAAA,wBAAAC,qBAAA,GAARD,SAAA,CACIzC,WAAW,EAAE,cAAA0C,qBAAA,uBADjBA,qBAAA,CAEIzC,QAAQ,CAAE,GAAEI,GAAG,CAACM,aAAc,EAAC,CAACX,WAAW,EAAE,CAAC;QAAA,EACnD,cAAAoC,gBAAA,wBAAAC,qBAAA,GALUD,gBAAA,CAMTxB,SAAS,cAAAyB,qBAAA,wBAAAC,sBAAA,GANAD,qBAAA,CAME1C,IAAI,CAAEkB,CAAC;UAAA,IAAA8B,SAAA,EAAAC,qBAAA;UAAA,OAClB/B,CAAC,aAADA,CAAC,wBAAA8B,SAAA,GAAD9B,CAAC,CAAEnE,KAAK,cAAAiG,SAAA,wBAAAC,qBAAA,GAARD,SAAA,CACI3C,WAAW,EAAE,cAAA4C,qBAAA,uBADjBA,qBAAA,CAEI3C,QAAQ,CAAE,GAAEI,GAAG,CAAC2B,aAAc,EAAC,CAAChC,WAAW,EAAE,CAAC;QAAA,EACnD,cAAAsC,sBAAA,wBAAAC,sBAAA,GAVUD,sBAAA,CAWTL,KAAK,cAAAM,sBAAA,uBAXIA,sBAAA,CAWF5C,IAAI,CAAEkB,CAAC;UAAA,IAAAgC,SAAA,EAAAC,qBAAA;UAAA,OACdjC,CAAC,aAADA,CAAC,wBAAAgC,SAAA,GAADhC,CAAC,CAAEd,KAAK,cAAA8C,SAAA,wBAAAC,qBAAA,GAARD,SAAA,CAAU7C,WAAW,EAAE,cAAA8C,qBAAA,uBAAvBA,qBAAA,CAAyB7C,QAAQ,CAAE,GAAEvD,KAAM,EAAC,CAACsD,WAAW,EAAE,CAAC;QAAA,EAC5D;QACH,IAAI,CAACwC,IAAI,EAAE;UACT,OAAO,iCAAiC;QAC1C;MACF;MACA,OAAO,KAAK;IACd;EACF,CAAC,EACD;IACE1D,MAAM,EAAE,OAAO;IACfC,MAAM,EAAE,SAAS;IACjBI,QAAQ,EAAEA,CAACC,EAAE,EAAE1C,KAAK,KAAK;MACvB,IAAI,CAACA,KAAK,EAAE;QACV,OAAO,0BAA0B;MACnC;MACA,OAAO,KAAK;IACd;EACF,CAAC,EACD;IACEoC,MAAM,EAAE,OAAO;IACfC,MAAM,EAAE,cAAc;IACtBI,QAAQ,EAAEA,CAACC,EAAE,EAAE1C,KAAK,KAAK;MACvB,IAAI,CAACA,KAAK,EAAE;QACV,OAAO,0BAA0B;MACnC;MACA,OAAO,KAAK;IACd;EACF,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;IACEoC,MAAM,EAAE,mBAAmB;IAC3BC,MAAM,EAAE,oBAAoB;IAC5BC,SAAS,EAAGtC,KAAK,IACfA,KAAK,CAACqG,QAAQ,EAAE,CAAC9C,QAAQ,CAAC,GAAG,CAAC,GAC1BvD,KAAK,CACJqG,QAAQ,EAAE,CACVC,KAAK,CAAC,GAAG,CAAC,CACVC,MAAM,CAAEC,CAAC,IACR,CAAC3E,qBAAqB,IAAI,EAAE,EAAEoB,IAAI,CAC/BwD,CAAC,IAAKA,CAAC,CAACC,KAAK,KAAKC,QAAQ,CAACH,CAAC,EAAE,EAAE,CAAC,CACnC,CACF,CACAI,GAAG,CAAEH,CAAC,IAAKA,CAAC,CAACI,EAAE,CAAC,GACjB,CAAChF,qBAAqB,IAAI,EAAE,EAC3B0E,MAAM,CAAEE,CAAC,IAAKA,CAAC,CAACC,KAAK,KAAKC,QAAQ,CAAC3G,KAAK,CAACqG,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC,CACzDO,GAAG,CAAEH,CAAC,IAAKA,CAAC,CAACI,EAAE,CAAC;IACvBpE,QAAQ,EAAEA,CAACC,EAAE,EAAE1C,KAAK,KAAK;MACvB,IAAI,OAAOA,KAAK,KAAK,WAAW,EAAE;QAChC,OAAO,mCAAmC;MAC5C;MACA,MAAM8G,0BAA0B,GAAG,CAACjF,qBAAqB,IAAI,EAAE,EAAE+E,GAAG,CACjEH,CAAC,IAAKA,CAAC,CAACC,KAAK,CACf;MACD,MAAMK,UAAU,GAAG/G,KAAK,CAACqG,QAAQ,EAAE,CAAC9C,QAAQ,CAAC,GAAG,CAAC,GAC7CvD,KAAK,CACJqG,QAAQ,EAAE,CACVC,KAAK,CAAC,GAAG,CAAC,CACVC,MAAM,CACJC,CAAC,IACAA,CAAC,IAAI,CAACM,0BAA0B,CAACvD,QAAQ,CAACoD,QAAQ,CAACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAC7D,GACD,CAACM,0BAA0B,CAACvD,QAAQ,CAACoD,QAAQ,CAAC3G,KAAK,EAAE,EAAE,CAAC,CAAC,GACvD,CAACA,KAAK,CAAC,GACP,EAAE;MACR,IAAIgH,KAAK,CAACC,OAAO,CAACF,UAAU,CAAC,IAAIA,UAAU,CAACG,MAAM,GAAG,CAAC,EAAE;QACtD,OAAO,uBAAuB;MAChC;MACA,OAAO,KAAK;IACdrF,qBAAqB,CAAC,CACxB;EAED,MAAMsF,OAAO,GAAGA,CAAA,KAAM;IACpBnG,OAAO,CAACX,KAAK,CAACC,gBAAgB,CAAC;IAC/BY,WAAW,CAAC,KAAK,CAAC;IAClBG,eAAe,CAAC,IAAI,CAAC;IACrBE,OAAO,CAAC,EAAE,CAAC;IACXE,QAAQ,CAAC,EAAE,CAAC;IACZC,SAAS,CAAC,EAAE,CAAC;EACf,CAAC;EAED,MAAMd,OAAO,GAAGA,CAAA,KAAM;IACpBuG,OAAO,EAAE;IACTtG,WAAW,EAAE;IACbC,SAAS,EAAE;EACb,CAAC;;EAED;EACA,MAAMsG,SAAS,GAAGzJ,WAAW,CAC1B0J,MAAM,IAAK;IACV,IAAI;MACF,MAAMC,IAAI,GAAGrJ,IAAI,CAACsJ,IAAI,CAACF,MAAM,EAAE;QAC7BG,IAAI,EAAE,QAAQ;QACdC,SAAS,EAAE,IAAI;QACfC,MAAM,EAAE,KAAK;QACbC,QAAQ,EAAE;MACZ,CAAC,CAAC;MAEF,MAAMC,KAAK,GAAGN,IAAI,CAACO,MAAM,CAACP,IAAI,CAACQ,UAAU,CAAC,CAAC,CAAC,CAAC;MAC7C,MAAMC,OAAO,GAAG9J,IAAI,CAAC+J,KAAK,CAACC,aAAa,CAACL,KAAK,CAAC,CAAChB,GAAG,CAAEsB,GAAG,IACtDC,MAAM,CAACC,IAAI,CAACF,GAAG,CAAC,CAACG,MAAM,CAAC,CAAC1E,GAAG,EAAE5D,GAAG,KAAK;QACpC4D,GAAG,CAAC5D,GAAG,CAACuI,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC9F,IAAI,EAAE,CAAC,GAAG0F,GAAG,CAACnI,GAAG,CAAC;QACxD,OAAO4D,GAAG;MACZ,CAAC,EAAE,CAAC,CAAC,CAAC,CACP;MACD,MAAM4E,UAAU,GAAGR,OAAO,CAACnB,GAAG,CAAC,CAACsB,GAAG,EAAExB,KAAK,KACxCvE,KAAK,CAACkG,MAAM,CAAC,CAAC1E,GAAG,EAAE6E,KAAK,KAAK;QAC3B,MAAMC,kBAAkB,GAAG,CAAAD,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAE/F,QAAQ,IACtC+F,KAAK,CAAC/F,QAAQ,CAACkB,GAAG,EAAEuE,GAAG,CAACM,KAAK,CAACpG,MAAM,CAAC,CAAC,GACtC,KAAK;QACT,IAAIqG,kBAAkB,EAAE;UACtB,IAAI,OAAO9E,GAAG,CAAC+E,MAAM,KAAK,WAAW,EAAE;YACrC/E,GAAG,CAAC+E,MAAM,GAAG;cACXR,GAAG,EAAExB,KAAK,GAAG,CAAC;cACdiC,QAAQ,EAAE;YACZ,CAAC;UACH;UACAhF,GAAG,CAAC+E,MAAM,CAACC,QAAQ,CAACC,IAAI,CAACH,kBAAkB,CAAC;QAC9C,CAAC,MAAM,IACL,OAAOP,GAAG,CAACM,KAAK,CAACpG,MAAM,CAAC,KAAK,WAAW,IACxC8F,GAAG,CAACM,KAAK,CAACpG,MAAM,CAAC,KAAK,EAAE,EACxB;UACAuB,GAAG,CAAC6E,KAAK,CAACnG,MAAM,CAAC,GAAG,CAAAmG,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAElG,SAAS,IAChCkG,KAAK,CAAClG,SAAS,CAAC4F,GAAG,CAACM,KAAK,CAACpG,MAAM,CAAC,CAAC,GAClC8F,GAAG,CAACM,KAAK,CAACpG,MAAM,CAAC;QACvB;QACA,OAAOuB,GAAG;MACZ,CAAC,EAAE,CAAC,CAAC,CAAC,CACP;MACDpC,OAAO,CAACgH,UAAU,CAAChC,MAAM,CAAEpC,CAAC,IAAK,EAACA,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAEuE,MAAM,EAAC,CAAC;MAC7CjH,QAAQ,CAAC8G,UAAU,CAAChC,MAAM,CAAEpC,CAAC,IAAKA,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAEuE,MAAM,CAAC,CAAC;IAC/C,CAAC,CAAC,OAAOG,CAAC,EAAE;MACV/K,KAAK,CAACgL,IAAI,CAAC,8BAA8B,CAAC;IAC5C;EACF,CAAC,EACD,CAAC3G,KAAK,CAAC,CACR;EACD1E,SAAS,CAAC,MAAM;IACd,IAAI2D,YAAY,EAAE;MAChB,MAAM2H,MAAM,GAAG,IAAIC,UAAU,EAAE;MAC/B,IAAID,MAAM,CAACE,kBAAkB,EAAE;QAC7BF,MAAM,CAACG,MAAM,GAAG,MAAM9B,SAAS,CAAC2B,MAAM,CAACvI,MAAM,CAAC;QAC9CuI,MAAM,CAACE,kBAAkB,CAAC7H,YAAY,CAAC;MACzC;IACF;IACA;EACF,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;EAClB;;EAEA;EACA,MAAM+H,aAAa,GAAIhF,CAAC,IAAK;IAAA,IAAAiF,qBAAA,EAAAC,kBAAA,EAAAC,oBAAA,EAAAC,mBAAA,EAAAC,qBAAA;IAC3B,MAAMC,GAAG,GAAGC,MAAM,CAACC,QAAQ,CAACC,IAAI;IAChC,OAAO;MACLC,YAAY,EAAE;QACZ9H,OAAO,EAAE;UACP+H,QAAQ,EAAE3F,CAAC,CAAC4F,IAAI;UAChBC,MAAM,EAAE7F,CAAC,CAAC6F,MAAM;UAChBC,IAAI,EAAE9F,CAAC,CAAC+F,YAAY,CAAChD,MAAM,KAAK,EAAE,GAAI,GAAE/C,CAAC,CAAC+F,YAAa,EAAC,GAAG,IAAI;UAC/DC,IAAI,EAAEhG,CAAC,CAAC+F,YAAY,CAAChD,MAAM,KAAK,EAAE,GAAI,GAAE/C,CAAC,CAAC+F,YAAa,EAAC,GAAG,IAAI;UAC/DE,WAAW,EAAEjG,CAAC,CAACiG,WAAW;UAC1BC,WAAW,EAAElG,CAAC,CAACkG,WAAW;UAC1BC,kBAAkB,EAAE,KAAK;UACzBC,qBAAqB,EAAE,CAAC,CAAC;UACzBC,aAAa,EAAE,EAAE;UACjBC,kBAAkB,EAAE,CAClB;YACExG,aAAa,EAAEE,CAAC,CAACF,aAAa;YAC9BqB,aAAa,EAAEnB,CAAC,CAACmB,aAAa;YAC9BoF,SAAS,EAAEvG,CAAC,CAACuG,SAAS;YACtBC,OAAO,EAAExG,CAAC,CAACwG,OAAO;YAClBC,YAAY,EAAEzG,CAAC,CAACyG,YAAY;YAC5BC,iBAAiB,EAAE1G,CAAC,CAAC0G;UACvB,CAAC,CACF;UACDC,kBAAkB,GAAA1B,qBAAA,GAAEjF,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAE2G,kBAAkB,cAAA1B,qBAAA,cAAAA,qBAAA,GAAI,IAAI;UACjD2B,WAAW,EAAE;QACf,CAAC;QACDC,eAAe,EAAE,CAAA7G,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAE8G,4BAA4B,IAC5C;UACAC,kBAAkB,EAAE/G,CAAC,CAAC8G,4BAA4B;UAClDE,aAAa,EAAEhH,CAAC,CAACiH,uBAAuB;UACxCC,OAAO,EAAElH,CAAC,CAACmH,iBAAiB;UAC5BC,OAAO,EAAE;QACX,CAAC,GACC,IAAI;QACRC,gBAAgB,EAAE,CAAArH,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAEsH,mBAAmB,IACpC,CACA;UACEP,kBAAkB,EAAE3L,qBAAqB,CAACa,QAAQ;UAClD+K,aAAa,EAAEhH,CAAC,CAACsH,mBAAmB;UACpCJ,OAAO,EAAElH,CAAC,CAACuH,aAAa;UACxBH,OAAO,EAAE;QACX,CAAC,EACD;UACEL,kBAAkB,EAAE3L,qBAAqB,CAACY,QAAQ;UAClDgL,aAAa,EAAEhH,CAAC,CAACwH,kBAAkB;UACnCN,OAAO,EAAElH,CAAC,CAACyH,YAAY;UACvBL,OAAO,EAAE;QACX,CAAC,CACF,GACC,CAAApH,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAEwH,kBAAkB,IACnB,CACA;UACET,kBAAkB,EAAE3L,qBAAqB,CAACY,QAAQ;UAClDgL,aAAa,EAAEhH,CAAC,CAACwH,kBAAkB;UACnCN,OAAO,EAAElH,CAAC,CAACyH,YAAY;UACvBL,OAAO,EAAE;QACX,CAAC,CACF,GACC,EAAE;QACRM,SAAS,EAAE,CAAA1H,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAE2H,YAAY,IACtB;UACAC,QAAQ,EAAE5H,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAE2H,YAAY;UACzBE,QAAQ,EAAE;YACRC,KAAK,EAAE9H,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAE8H,KAAK;YACfC,OAAO,EAAE/H,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAE+H;UACd;QACF,CAAC,GACC;MACN,CAAC;MACDC,cAAc,EAAE;QACdC,KAAK,GAAA/C,kBAAA,GAAElF,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAEkI,eAAe,cAAAhD,kBAAA,cAAAA,kBAAA,GAAI,IAAI;QACjCiD,OAAO,GAAAhD,oBAAA,GAAEnF,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAEoI,iBAAiB,cAAAjD,oBAAA,cAAAA,oBAAA,GAAI,IAAI;QACrCkD,KAAK,GAAAjD,mBAAA,GAAEpF,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAEsI,gBAAgB,cAAAlD,mBAAA,cAAAA,mBAAA,GAAI,IAAI;QAClCmD,OAAO,GAAAlD,qBAAA,GAAErF,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAEwI,kBAAkB,cAAAnD,qBAAA,cAAAA,qBAAA,GAAI;MACpC,CAAC;MACDoD,2BAA2B,EACzBnD,GAAG,CAACoD,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,GAC/D,kBAAkB,GAClB;IACR,CAAC;EACH,CAAC;EACD,MAAMC,cAAc,GAAG,SAAAA,CAAA,EAAsC;IAAA,IAAAC,qBAAA;IAAA,IAArCC,aAAa,GAAAC,SAAA,CAAAlG,MAAA,QAAAkG,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG;MAAEE,QAAQ,EAAE,CAAC;IAAE,CAAC;IACtD,MAAMC,WAAW,GAAG;MAClBC,OAAO,EAAE,KAAK;MACdC,OAAO,EAAE;IACX,CAAC;IACD,KAAAP,qBAAA,GAAIC,aAAa,CAACG,QAAQ,cAAAJ,qBAAA,uBAAtBA,qBAAA,CAAwB5L,IAAI,EAAE;MAChC,IAAI,OAAO6L,aAAa,CAACG,QAAQ,CAAChM,IAAI,KAAK,QAAQ,EAAE;QACnD,IACE6L,aAAa,CAACG,QAAQ,CAAChM,IAAI,CAACiC,QAAQ,CAClC,kCAAkC,CACnC,EACD;UACAgK,WAAW,CAACE,OAAO,GAAG,uCAAuC;QAC/D,CAAC,MAAM;UACL,MAAMC,gBAAgB,GAAGrO,mBAAmB,CAC1C8N,aAAa,CAACG,QAAQ,CAAChM,IAAI,CAC5B;UACD,IAAIoM,gBAAgB,EAAE;YACpBH,WAAW,CAACE,OAAO,GAAGC,gBAAgB;UACxC;QACF;MACF;IACF;IACA,OAAOH,WAAW;EACpB,CAAC;EACD,MAAMI,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,KAAK,MAAM5L,OAAO,IAAIT,IAAI,EAAE;MAC1B,IAAI;QACF,MAAMK,QAAQ,CAAC7C,mBAAmB,CAAC,CAACqK,aAAa,CAACpH,OAAO,CAAC,CAAC,CAAC,CAAC;QAC7DL,SAAS,CAAEkM,EAAE,IAAK,CAAC,GAAGA,EAAE,EAAE;UAAE,GAAG7L,OAAO;UAAEvB,MAAM,EAAE;YAAEgN,OAAO,EAAE;UAAK;QAAE,CAAC,CAAC,CAAC;MACvE,CAAC,CAAC,OAAO3E,CAAC,EAAE;QACVnH,SAAS,CAAEkM,EAAE,IAAK,CAChB,GAAGA,EAAE,EACL;UAAE,GAAG7L,OAAO;UAAEvB,MAAM,EAAE;YAAE,GAAGyM,cAAc,CAACpE,CAAC;UAAE;QAAE,CAAC,CACjD,CAAC;MACJ;IACF;IAEA7H,OAAO,CAACX,KAAK,CAACG,MAAM,CAAC;EACvB,CAAC;EACD;;EAEA;EACA,MAAMqN,WAAW,GAAGnQ,OAAO,CACzB,MAAM,CACJ;IACEY,MAAM,EAAE,GAAG;IACXwP,QAAQ,EAAE;EACZ,CAAC,EACD;IACExP,MAAM,EAAE,QAAQ;IAChBwP,QAAQ,EAAE;EACZ,CAAC,EACD;IACExP,MAAM,EAAE,WAAW;IACnBgE,SAAS,EAAEyL,KAAA;MAAA,IAAC;QAAE1D;MAAY,CAAC,GAAA0D,KAAA;MAAA,OAAK/O,YAAY,CAACqL,WAAW,CAAC;IAAA;EAC3D,CAAC,EACD;IACE/L,MAAM,EAAE,eAAe;IACvBwP,QAAQ,EAAE;EACZ,CAAC,EACD;IACExP,MAAM,EAAE,SAAS;IACjBgE,SAAS,EAAE0L,KAAA;MAAA,IAAC;QACVnD,iBAAiB;QACjB5G,aAAa;QACbqB,aAAa;QACboF;MACF,CAAC,GAAAsD,KAAA;MAAA,OACC/O,qBAAqB,CAAC;QACpB4L,iBAAiB;QACjB5G,aAAa;QACbqB,aAAa;QACboF;MACF,CAAC,CAAC;IAAA;EACN;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAAA,CACD,EACD,EAAE,CACH;EACD,MAAMuD,YAAY,GAAGvQ,OAAO,CAC1B,MAAM,CACJ;IACEY,MAAM,EAAE,MAAM;IACdgE,SAAS,EAAE4L,KAAA;MAAA,IAAC;QAAExF;MAAO,CAAC,GAAAwF,KAAA;MAAA,oBAAK3Q,KAAA,CAAA4Q,aAAA,CAAC7P,MAAM;QAAC8P,GAAG;QAAAC,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,GAAEhG,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAER,GAAG,CAAU;IAAA;EAC/D,CAAC,EACD;IACE5J,MAAM,EAAE,GAAG;IACXgE,SAAS,EAAEqM,KAAA;MAAA,IAAC;QAAEjG;MAAO,CAAC,GAAAiG,KAAA;MAAA,OACpB,CAAAjG,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEC,QAAQ,iBACdpL,KAAA,CAAA4Q,aAAA,CAAC3P,IAAI;QAACoQ,OAAO;QAACC,OAAO;QAAAR,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,GAClBhG,MAAM,CAACC,QAAQ,CAAC/B,GAAG,CAAEkI,CAAC,iBACrBvR,KAAA,CAAA4Q,aAAA,CAAC3P,IAAI,CAACuQ,IAAI;QAAChP,GAAG,EAAE+O,CAAE;QAAAT,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,gBAChBnR,KAAA,CAAA4Q,aAAA,CAAC3P,IAAI,CAACH,IAAI;QAAC0L,IAAI,EAAC,GAAG;QAACiF,KAAK,EAAC,KAAK;QAACC,aAAa,EAAC,QAAQ;QAAAZ,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,EAAG,eACzDnR,KAAA,CAAA4Q,aAAA,CAAC3P,IAAI,CAAC0Q,OAAO;QAAAb,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,gBACXnR,KAAA,CAAA4Q,aAAA,CAAC3P,IAAI,CAAC2Q,WAAW;QAAAd,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,GAAEI,CAAC,CAAoB,CAC3B,CAElB,CAAC,CACG,GACL,IAAI;IAAA;EACZ,CAAC,CACF,EACD,EAAE,CACH;EACD,MAAMM,aAAa,GAAG1R,OAAO,CAAC,MAAM;IAClC,MAAM2R,KAAK,GAAG,CACZ;MACEC,QAAQ,EAAG,qBAAoBhO,IAAI,CAAC4F,MAAO,GAAE;MAC7CqI,MAAM,EAAEA,CAAA,kBACNhS,KAAA,CAAA4Q,aAAA,CAAC5P,GAAG,CAACiR,IAAI;QAAAnB,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,gBACPnR,KAAA,CAAA4Q,aAAA,CAACxP,SAAS;QACR8Q,OAAO,EAAE5B,WAAY;QACrBvM,IAAI,EAAEA,IAAI,CAACsF,GAAG,CAAC,CAACzC,CAAC,EAAEuL,CAAC,MAAM;UAAE,GAAGvL,CAAC;UAAEuC,KAAK,EAAEgJ,CAAC,GAAG;QAAE,CAAC,CAAC,CAAE;QAAArB,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,EACnD;IAGR,CAAC,EACD;MACEY,QAAQ,EAAG,mBAAkB9N,KAAK,CAAC0F,MAAO,GAAE;MAC5CqI,MAAM,EAAEA,CAAA,kBACNhS,KAAA,CAAA4Q,aAAA,CAAC5P,GAAG,CAACiR,IAAI;QAAAnB,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,gBACPnR,KAAA,CAAA4Q,aAAA,CAACxP,SAAS;QACR8Q,OAAO,EAAExB,YAAa;QACtB3M,IAAI,EAAEE,KAAK,CAACoF,GAAG,CAAC,CAACiC,CAAC,EAAE6G,CAAC,MAAM;UAAE,GAAG7G,CAAC;UAAEnC,KAAK,EAAEgJ,CAAC,GAAG;QAAE,CAAC,CAAC,CAAE;QAAArB,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,EACpD;IAGR,CAAC,CACF;IAED,oBACEnR,KAAA,CAAA4Q,aAAA,CAACvO,WAAW;MAAAyO,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBACVnR,KAAA,CAAA4Q,aAAA,CAAC5P,GAAG;MAAC8Q,KAAK,EAAEA,KAAM;MAACM,gBAAgB;MAAAtB,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,EAAG,CAC1B;EAElB,CAAC,EAAE,CAACpN,IAAI,EAAEE,KAAK,EAAEqM,WAAW,EAAEI,YAAY,CAAC,CAAC;EAE5C,MAAM2B,aAAa,GAAGlS,OAAO,CAC3B,MAAM,CACJ;IACEY,MAAM,EAAE,GAAG;IACXwP,QAAQ,EAAE;EACZ,CAAC,EACD;IACExP,MAAM,EAAE,QAAQ;IAChBwP,QAAQ,EAAE;EACZ,CAAC,EACD;IACExP,MAAM,EAAE,WAAW;IACnBgE,SAAS,EAAEuN,KAAA;MAAA,IAAC;QAAExF;MAAY,CAAC,GAAAwF,KAAA;MAAA,OAAK7Q,YAAY,CAACqL,WAAW,CAAC;IAAA;EAC3D,CAAC,EACD;IACE/L,MAAM,EAAE,eAAe;IACvBwP,QAAQ,EAAE;EACZ,CAAC,EACD;IACExP,MAAM,EAAE,SAAS;IACjBgE,SAAS,EAAEwN,KAAA;MAAA,IAAC;QACVjF,iBAAiB;QACjB5G,aAAa;QACbqB,aAAa;QACboF;MACF,CAAC,GAAAoF,KAAA;MAAA,OACC7Q,qBAAqB,CAAC;QACpB4L,iBAAiB;QACjB5G,aAAa;QACbqB,aAAa;QACboF;MACF,CAAC,CAAC;IAAA;EACN,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;IACEpM,MAAM,EAAE,GAAG;IACXgE,SAAS,EAAGyN,CAAC;MAAA,IAAAC,SAAA,EAAAC,UAAA;MAAA,oBACX1S,KAAA,CAAA4Q,aAAA,CAAA5Q,KAAA,CAAA2S,QAAA,qBACE3S,KAAA,CAAA4Q,aAAA,CAAC9P,IAAI;QAAC0L,IAAI,EAAC,aAAa;QAAAsE,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,EAAG,EAAC,GAAG,EAC9B,CAAAqB,CAAC,aAADA,CAAC,wBAAAC,SAAA,GAADD,CAAC,CAAEvP,MAAM,cAAAwP,SAAA,uBAATA,SAAA,CAAWxC,OAAO,IAAG,YAAY,GAAGuC,CAAC,aAADA,CAAC,wBAAAE,UAAA,GAADF,CAAC,CAAEvP,MAAM,cAAAyP,UAAA,uBAATA,UAAA,CAAWxC,OAAO,CACtD;IAAA;EAEP,CAAC,CACF,EACD,EAAE,CACH;EACD,MAAM0C,eAAe,GAAGzS,OAAO,CAC7B,mBACEH,KAAA,CAAA4Q,aAAA,CAACxP,SAAS;IACRyR,KAAK,EAAG,kBAAiB5P,MAAM,CAAC6H,MAAM,CACpC,CAACgI,CAAC,EAAEC,CAAC;MAAA,IAAAC,SAAA;MAAA,OAAM,CAAAD,CAAC,aAADA,CAAC,wBAAAC,SAAA,GAADD,CAAC,CAAE9P,MAAM,cAAA+P,SAAA,uBAATA,SAAA,CAAW/C,OAAO,IAAG6C,CAAC,GAAG,CAAC,GAAGA,CAAC;IAAA,CAAC,EAC1C,CAAC,CACD,IAAG7P,MAAM,CAAC0G,MAAO,QAAQ;IAC3BuI,OAAO,EAAEG,aAAc;IACvBtO,IAAI,EAAEd,MAAM,CAACoG,GAAG,CAAC,CAACzC,CAAC,EAAEuL,CAAC,MAAM;MAAE,GAAGvL,CAAC;MAAEuC,KAAK,EAAEgJ,CAAC,GAAG;IAAE,CAAC,CAAC,CAAE;IACrDc,QAAQ,EAAGT,CAAC;MAAA,IAAAU,UAAA;MAAA,OAAK,EAACV,CAAC,aAADA,CAAC,wBAAAU,UAAA,GAADV,CAAC,CAAEvP,MAAM,cAAAiQ,UAAA,uBAATA,UAAA,CAAWjD,OAAO;IAAA,CAAC;IACrCkD,UAAU,EAAGX,CAAC;MAAA,IAAAY,UAAA;MAAA,OAAKZ,CAAC,aAADA,CAAC,wBAAAY,UAAA,GAADZ,CAAC,CAAEvP,MAAM,cAAAmQ,UAAA,uBAATA,UAAA,CAAWnD,OAAO;IAAA,CAAC;IAAAa,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,EAEzC,EACD,CAAClO,MAAM,EAAEoP,aAAa,CAAC,CACxB;EAED,MAAMgB,oBAAoB,GAAGlT,OAAO,CAClC,mBACEH,KAAA,CAAA4Q,aAAA,CAAC/P,OAAO;IACNyS,IAAI;IACJC,IAAI;IACJC,KAAK,EAAE;MAAEC,YAAY,EAAE,CAAC;MAAEC,MAAM,EAAE;IAAU,CAAE;IAC9CC,OAAO,EAAEA,CAAA,KAAMhS,YAAY,CAACO,aAAa,CAAE;IAAA4O,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAE3CnR,KAAA,CAAA4Q,aAAA,CAAC9P,IAAI;IAAC0L,IAAI,EAAC,UAAU;IAAAsE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,EAAG,eACxBnR,KAAA,CAAA4Q,aAAA,CAAC/P,OAAO,CAAC8Q,OAAO;IAAAb,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACdnR,KAAA,CAAA4Q,aAAA,CAAC/P,OAAO,CAACE,MAAM;IAAA+P,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,gCAAe,CAAiB,kHAElD,CAAkB,CAErB,EACD,EAAE,CACH;EAED,MAAMyC,WAAW,GAAGzT,OAAO,CAAC,MAAM;IAChC,QAAQqD,IAAI;MACV,KAAKV,KAAK,CAACC,gBAAgB;QACzB,OAAOsQ,oBAAoB;MAC7B,KAAKvQ,KAAK,CAACE,UAAU;QACnB,OAAO6O,aAAa;MACtB,KAAK/O,KAAK,CAACG,MAAM;QACf,OAAO2P,eAAe;MACxB;QACE,OAAOS,oBAAoB;IAAC;EAElC,CAAC,EAAE,CAAC7P,IAAI,EAAE6P,oBAAoB,EAAExB,aAAa,EAAEe,eAAe,CAAC,CAAC;EAChE;;EAEA1S,SAAS,CAAC,MAAM;IACd,IAAI,CAACoE,qBAAqB,IAAIA,qBAAqB,CAACqF,MAAM,KAAK,CAAC,EAAE;MAChEvF,QAAQ,CAAC5C,qBAAqB,CAAC,CAAC,CAAC,CAAC,CAAC;IACrC;IACA;EACF,CAAC,EAAE,CAAC4C,QAAQ,CAAC,CAAC;EAEdlE,SAAS,CAAC,MAAM;IACd,IAAI+D,KAAK,CAAC0F,MAAM,KAAK,CAAC,EAAE;MACtBhG,WAAW,CAAC,KAAK,CAAC;IACpB,CAAC,MAAM;MACLA,WAAW,CAAC,IAAI,CAAC;IACnB;EACF,CAAC,EAAE,CAACM,KAAK,CAAC,CAAC;EAEX,oBACEjE,KAAA,CAAA4Q,aAAA,CAACjQ,KAAK;IACJyC,IAAI,EAAEA,IAAK;IACXyQ,IAAI,EAAErQ,IAAI,KAAKV,KAAK,CAACC,gBAAgB,GAAG,YAAY,GAAG+M,SAAU;IACjEzM,OAAO,EAAEA,OAAQ;IAAAyN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAEjBnR,KAAA,CAAA4Q,aAAA,CAACjQ,KAAK,CAACI,MAAM;IAAA+P,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,+CAAyB,CAAe,eACtDnR,KAAA,CAAA4Q,aAAA,CAACjQ,KAAK,CAACgR,OAAO;IAAAb,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACZnR,KAAA,CAAA4Q,aAAA,CAACzO,OAAO;IAAA2O,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACNnR,KAAA,CAAA4Q,aAAA,CAAC1P,MAAM;IAAC4S,QAAQ;IAACC,MAAM,EAAEpP,OAAQ;IAAAmM,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC/BnR,KAAA,CAAA4Q,aAAA,CAACzP,MAAM;IAAA2P,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,EAAG,CACH,eACTnR,KAAA,CAAA4Q,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACEnR,KAAA,CAAA4Q,aAAA,CAAChQ,MAAM;IACL2S,IAAI,EAAC,QAAQ;IACbS,aAAa,EAAC,OAAO;IACrBvC,KAAK,EAAC,OAAO;IACbwC,OAAO,EAAC,gBAAW;IACnBN,OAAO,EAAEA,CAAA,KAAM;MACb/J,OAAO,EAAE;MACThG,YAAY,CAACsQ,OAAO,CAACC,KAAK,EAAE;IAC9B,CAAE;IAAArD,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,EACF,EACDtN,YAAY,gBACX7D,KAAA,CAAA4Q,aAAA;IAAM4C,KAAK,EAAE;MAAEY,UAAU,EAAE,MAAM;MAAEC,UAAU,EAAE;IAAM,CAAE;IAAAvD,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACpDtN,YAAY,CAAC2I,IAAI,CACb,GACL,IAAI,CACJ,eACNxM,KAAA,CAAA4Q,aAAA;IACE0D,MAAM;IACNrK,IAAI,EAAC,MAAM;IACXsK,GAAG,EAAE3Q,YAAa;IAClB4Q,QAAQ,EAAGlJ,CAAC,IAAK;MACfxH,eAAe,CAACwH,CAAC,CAACmJ,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;MAClCjR,OAAO,CAACX,KAAK,CAACE,UAAU,CAAC;IAC3B,CAAE;IACF2R,MAAM,EAAC,mGAAmG;IAAA7D,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,EAC1G,EACDyC,WAAW,CACJ,CACI,eAChB5T,KAAA,CAAA4Q,aAAA,CAACjQ,KAAK,CAACiU,OAAO;IAAA9D,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACZnR,KAAA,CAAA4Q,aAAA,CAAChQ,MAAM;IACLiU,QAAQ;IACRb,aAAa,EAAC,OAAO;IACrBT,IAAI,EAAC,WAAW;IAChBU,OAAO,EAAC,kBAAU;IAClBvQ,QAAQ,EAAEA,QAAS;IACnBiB,OAAO,EAAEA,OAAQ;IACjBgP,OAAO,EAAEvD,UAAW;IAAAU,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,EACpB,eACFnR,KAAA,CAAA4Q,aAAA,CAAChQ,MAAM;IACLkU,QAAQ;IACRd,aAAa,EAAC,OAAO;IACrBT,IAAI,EAAC,OAAO;IACZU,OAAO,EAAC,cAAM;IACdN,OAAO,EAAEtQ,OAAQ;IAAAyN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,EACjB,CACY,CACV;AAEZ,CAAC;AAEDjO,WAAW,CAAC6R,SAAS,GAAG;EACtB3R,IAAI,EAAE5C,SAAS,CAACwU,IAAI;EACpB3R,OAAO,EAAE7C,SAAS,CAACyU,IAAI;EACvB1R,SAAS,EAAE/C,SAAS,CAACyU;AACvB,CAAC;AAED/R,WAAW,CAACgS,YAAY,GAAG;EACzB9R,IAAI,EAAE,KAAK;EACXC,OAAO,EAAEA,CAAA,KAAM,CAAE,CAAC;EAClBE,SAAS,EAAEA,CAAA,KAAM,CAAE;AACrB,CAAC;AAED,eAAeL,WAAW"},"metadata":{},"sourceType":"module"}