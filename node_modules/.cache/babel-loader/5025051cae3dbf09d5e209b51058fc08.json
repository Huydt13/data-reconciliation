{"ast":null,"code":"import { toast } from 'react-toastify';\nimport httpClient from 'app/utils/http-client';\nimport apiLinks from 'app/utils/api-links';\nimport types from './types';\nconst getQuarantineRequestRequest = () => ({\n  type: types.GET_QUARANTINE_REQUEST_REQUEST\n});\nconst getQuarantineRequestSuccess = response => ({\n  type: types.GET_QUARANTINE_REQUEST_SUCCESS,\n  payload: response\n});\nconst getQuarantineRequestFailure = error => ({\n  type: types.GET_QUARANTINE_REQUEST_FAILURE,\n  payload: error\n});\nconst getQuarantineRequests = _ref => {\n  let {\n    // managerId = '',\n    pageIndex = 0,\n    pageSize = 10\n  } = _ref;\n  return dispatch => new Promise((resolve, reject) => {\n    dispatch(getQuarantineRequestRequest());\n    httpClient.callApi({\n      url: apiLinks.quarantineRequests.get,\n      params: {\n        // managerId,\n        pageIndex,\n        pageSize\n      }\n    }).then(response => {\n      dispatch(getQuarantineRequestSuccess(response.data));\n      resolve();\n    }).catch(error => {\n      dispatch(getQuarantineRequestFailure(error));\n      reject();\n    });\n  });\n};\nconst createQuarantineRequestRequest = () => ({\n  type: types.CREATE_QUARANTINE_REQUEST_REQUEST\n});\nconst createQuarantineRequestSuccess = response => ({\n  type: types.CREATE_QUARANTINE_REQUEST_SUCCESS,\n  payload: response\n});\nconst createQuarantineRequestFailure = error => ({\n  type: types.CREATE_QUARANTINE_REQUEST_FAILURE,\n  payload: error\n});\nconst createQuarantineRequest = data => dispatch => new Promise((resolve, reject) => {\n  dispatch(createQuarantineRequestRequest());\n  httpClient.callApi({\n    method: 'POST',\n    data,\n    url: apiLinks.quarantineRequests.create\n  }).then(response => {\n    dispatch(createQuarantineRequestSuccess(response));\n    toast.success('Thành công');\n    resolve();\n  }).catch(error => {\n    dispatch(createQuarantineRequestFailure(error));\n    reject();\n  });\n});\nconst updateQuarantineRequestRequest = () => ({\n  type: types.UPDATE_QUARANTINE_REQUEST_REQUEST\n});\nconst updateQuarantineRequestSuccess = response => ({\n  type: types.UPDATE_QUARANTINE_REQUEST_SUCCESS,\n  payload: response\n});\nconst updateQuarantineRequestFailure = error => ({\n  type: types.UPDATE_QUARANTINE_REQUEST_FAILURE,\n  payload: error\n});\nconst updateQuarantineRequest = data => dispatch => new Promise((resolve, reject) => {\n  dispatch(updateQuarantineRequestRequest());\n  httpClient.callApi({\n    method: 'PUT',\n    url: `${apiLinks.quarantineRequests.update}/${data.id}`,\n    data\n  }).then(response => {\n    dispatch(updateQuarantineRequestSuccess(response));\n    toast.success('Thành công');\n    resolve();\n  }).catch(error => {\n    dispatch(updateQuarantineRequestFailure(error));\n    reject();\n  });\n});\nconst deleteQuarantineRequestRequest = () => ({\n  type: types.DELETE_QUARANTINE_REQUEST_REQUEST\n});\nconst deleteQuarantineRequestSuccess = () => ({\n  type: types.DELETE_QUARANTINE_REQUEST_SUCCESS\n});\nconst deleteQuarantineRequestFailure = () => ({\n  type: types.DELETE_QUARANTINE_REQUEST_FAILURE\n});\nconst deleteQuarantineRequest = id => dispatch => new Promise((resolve, reject) => {\n  dispatch(deleteQuarantineRequestRequest());\n  httpClient.callApi({\n    method: 'DELETE',\n    url: `${apiLinks.quarantineRequests.delete}/${id}`\n  }).then(response => {\n    dispatch(deleteQuarantineRequestSuccess(response));\n    toast.success('Thành công');\n    resolve();\n  }).catch(error => {\n    dispatch(deleteQuarantineRequestFailure(error));\n    reject();\n  });\n});\nconst getQuarantineRequestDetailRequest = () => ({\n  type: types.GET_QUARANTINE_REQUEST_DETAIL_REQUEST\n});\nconst getQuarantineRequestDetailSuccess = response => ({\n  type: types.GET_QUARANTINE_REQUEST_DETAIL_SUCCESS,\n  payload: response\n});\nconst getQuarantineRequestDetailFailure = error => ({\n  type: types.GET_QUARANTINE_REQUEST_DETAIL_FAILURE,\n  payload: error\n});\nconst getQuarantineRequestDetail = id => dispatch => new Promise((resolve, reject) => {\n  dispatch(getQuarantineRequestDetailRequest());\n  httpClient.callApi({\n    url: `${apiLinks.quarantineRequests.get}/${id}`\n  }).then(response => {\n    dispatch(getQuarantineRequestDetailSuccess(response.data));\n    resolve();\n  }).catch(error => {\n    dispatch(getQuarantineRequestDetailFailure(error));\n    reject();\n  });\n});\nexport { getQuarantineRequests, createQuarantineRequest, updateQuarantineRequest, deleteQuarantineRequest, getQuarantineRequestDetail };","map":{"version":3,"names":["toast","httpClient","apiLinks","types","getQuarantineRequestRequest","type","GET_QUARANTINE_REQUEST_REQUEST","getQuarantineRequestSuccess","response","GET_QUARANTINE_REQUEST_SUCCESS","payload","getQuarantineRequestFailure","error","GET_QUARANTINE_REQUEST_FAILURE","getQuarantineRequests","_ref","pageIndex","pageSize","dispatch","Promise","resolve","reject","callApi","url","quarantineRequests","get","params","then","data","catch","createQuarantineRequestRequest","CREATE_QUARANTINE_REQUEST_REQUEST","createQuarantineRequestSuccess","CREATE_QUARANTINE_REQUEST_SUCCESS","createQuarantineRequestFailure","CREATE_QUARANTINE_REQUEST_FAILURE","createQuarantineRequest","method","create","success","updateQuarantineRequestRequest","UPDATE_QUARANTINE_REQUEST_REQUEST","updateQuarantineRequestSuccess","UPDATE_QUARANTINE_REQUEST_SUCCESS","updateQuarantineRequestFailure","UPDATE_QUARANTINE_REQUEST_FAILURE","updateQuarantineRequest","update","id","deleteQuarantineRequestRequest","DELETE_QUARANTINE_REQUEST_REQUEST","deleteQuarantineRequestSuccess","DELETE_QUARANTINE_REQUEST_SUCCESS","deleteQuarantineRequestFailure","DELETE_QUARANTINE_REQUEST_FAILURE","deleteQuarantineRequest","delete","getQuarantineRequestDetailRequest","GET_QUARANTINE_REQUEST_DETAIL_REQUEST","getQuarantineRequestDetailSuccess","GET_QUARANTINE_REQUEST_DETAIL_SUCCESS","getQuarantineRequestDetailFailure","GET_QUARANTINE_REQUEST_DETAIL_FAILURE","getQuarantineRequestDetail"],"sources":["H:/BAKCO/pj/cds/src/quarantine/actions/quarantine-request.js"],"sourcesContent":["import { toast } from 'react-toastify';\n\nimport httpClient from 'app/utils/http-client';\nimport apiLinks from 'app/utils/api-links';\n\nimport types from './types';\n\nconst getQuarantineRequestRequest = () => ({ type: types.GET_QUARANTINE_REQUEST_REQUEST });\nconst getQuarantineRequestSuccess = (response) => ({ type: types.GET_QUARANTINE_REQUEST_SUCCESS, payload: response });\nconst getQuarantineRequestFailure = (error) => ({ type: types.GET_QUARANTINE_REQUEST_FAILURE, payload: error });\n\nconst getQuarantineRequests = ({\n  // managerId = '',\n  pageIndex = 0,\n  pageSize = 10,\n}) => (dispatch) => new Promise((resolve, reject) => {\n  dispatch(getQuarantineRequestRequest());\n  httpClient.callApi({\n    url: apiLinks.quarantineRequests.get,\n    params: {\n      // managerId,\n      pageIndex,\n      pageSize,\n    },\n  }).then((response) => {\n    dispatch(getQuarantineRequestSuccess(response.data));\n    resolve();\n  }).catch((error) => {\n    dispatch(getQuarantineRequestFailure(error));\n    reject();\n  });\n});\n\nconst createQuarantineRequestRequest = () => ({ type: types.CREATE_QUARANTINE_REQUEST_REQUEST });\nconst createQuarantineRequestSuccess = (response) => ({ type: types.CREATE_QUARANTINE_REQUEST_SUCCESS, payload: response });\nconst createQuarantineRequestFailure = (error) => ({ type: types.CREATE_QUARANTINE_REQUEST_FAILURE, payload: error });\n\nconst createQuarantineRequest = (data) => (dispatch) => new Promise((resolve, reject) => {\n  dispatch(createQuarantineRequestRequest());\n  httpClient.callApi({\n    method: 'POST',\n    data,\n    url: apiLinks.quarantineRequests.create,\n  }).then((response) => {\n    dispatch(createQuarantineRequestSuccess(response));\n    toast.success('Thành công');\n    resolve();\n  }).catch((error) => {\n    dispatch(createQuarantineRequestFailure(error));\n    reject();\n  });\n});\n\nconst updateQuarantineRequestRequest = () => ({ type: types.UPDATE_QUARANTINE_REQUEST_REQUEST });\nconst updateQuarantineRequestSuccess = (response) => ({ type: types.UPDATE_QUARANTINE_REQUEST_SUCCESS, payload: response });\nconst updateQuarantineRequestFailure = (error) => ({ type: types.UPDATE_QUARANTINE_REQUEST_FAILURE, payload: error });\n\nconst updateQuarantineRequest = (data) => (dispatch) => new Promise((resolve, reject) => {\n  dispatch(updateQuarantineRequestRequest());\n  httpClient.callApi({\n    method: 'PUT',\n    url: `${apiLinks.quarantineRequests.update}/${data.id}`,\n    data,\n  }).then((response) => {\n    dispatch(updateQuarantineRequestSuccess(response));\n    toast.success('Thành công');\n    resolve();\n  }).catch((error) => {\n    dispatch(updateQuarantineRequestFailure(error));\n    reject();\n  });\n});\n\nconst deleteQuarantineRequestRequest = () => ({ type: types.DELETE_QUARANTINE_REQUEST_REQUEST });\nconst deleteQuarantineRequestSuccess = () => ({ type: types.DELETE_QUARANTINE_REQUEST_SUCCESS });\nconst deleteQuarantineRequestFailure = () => ({ type: types.DELETE_QUARANTINE_REQUEST_FAILURE });\n\nconst deleteQuarantineRequest = (id) => (dispatch) => new Promise((resolve, reject) => {\n  dispatch(deleteQuarantineRequestRequest());\n  httpClient.callApi({\n    method: 'DELETE',\n    url: `${apiLinks.quarantineRequests.delete}/${id}`,\n  }).then((response) => {\n    dispatch(deleteQuarantineRequestSuccess(response));\n    toast.success('Thành công');\n    resolve();\n  }).catch((error) => {\n    dispatch(deleteQuarantineRequestFailure(error));\n    reject();\n  });\n});\n\nconst getQuarantineRequestDetailRequest = () => ({ type: types.GET_QUARANTINE_REQUEST_DETAIL_REQUEST });\nconst getQuarantineRequestDetailSuccess = (response) => ({ type: types.GET_QUARANTINE_REQUEST_DETAIL_SUCCESS, payload: response });\nconst getQuarantineRequestDetailFailure = (error) => ({ type: types.GET_QUARANTINE_REQUEST_DETAIL_FAILURE, payload: error });\n\nconst getQuarantineRequestDetail = (id) => (dispatch) => new Promise((resolve, reject) => {\n  dispatch(getQuarantineRequestDetailRequest());\n  httpClient.callApi({\n    url: `${apiLinks.quarantineRequests.get}/${id}`,\n  }).then((response) => {\n    dispatch(getQuarantineRequestDetailSuccess(response.data));\n    resolve();\n  }).catch((error) => {\n    dispatch(getQuarantineRequestDetailFailure(error));\n    reject();\n  });\n});\nexport {\n  getQuarantineRequests,\n  createQuarantineRequest,\n  updateQuarantineRequest,\n  deleteQuarantineRequest,\n  getQuarantineRequestDetail,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}