{"ast":null,"code":"import { toast } from 'react-toastify';\nimport httpClient from 'app/utils/http-client';\nimport apiLinks from 'app/utils/api-links';\nimport { announceTreatmentError } from 'treatment/utils/helpers';\nimport types from './types';\nconst getFacilityInfoRequest = () => ({\n  type: types.TM_GET_FACILITY_INFO_REQUEST\n});\nconst getFacilityInfoSuccess = response => ({\n  type: types.TM_GET_FACILITY_INFO_SUCCESS,\n  payload: response\n});\nconst getFacilityInfoFailure = error => ({\n  type: types.TM_GET_FACILITY_INFO_FAILURE,\n  payload: error\n});\nconst getFacilityInfo = () => dispatch => new Promise((resolve, reject) => {\n  dispatch(getFacilityInfoRequest());\n  httpClient.callApi({\n    url: apiLinks.treatment.facility.get\n  }).then(response => {\n    dispatch(getFacilityInfoSuccess(response.data));\n    resolve();\n  }).catch(error => {\n    dispatch(getFacilityInfoFailure(error));\n    reject();\n  });\n});\nconst getFacilitiesRequest = () => ({\n  type: types.GET_FACILITY_LIST_REQUEST\n});\nconst getFacilitiesSuccess = response => ({\n  type: types.GET_FACILITY_LIST_SUCCESS,\n  payload: response\n});\nconst getFacilitiesFailure = error => ({\n  type: types.GET_FACILITY_LIST_FAILURE,\n  payload: error\n});\nconst getFacilities = arg => dispatch => new Promise((resolve, reject) => {\n  dispatch(getFacilitiesRequest());\n  httpClient.callApi({\n    url: apiLinks.treatment.facility.getFacilities,\n    params: {\n      ...arg\n    }\n  }).then(response => {\n    dispatch(getFacilitiesSuccess(response.data));\n    resolve();\n  }).catch(error => {\n    dispatch(getFacilitiesFailure(error));\n    reject();\n  });\n});\nconst getFacilityByIdRequest = () => ({\n  type: types.GET_FACILITY_DETAIL_REQUEST\n});\nconst getFacilityByIdSuccess = response => ({\n  type: types.GET_FACILITY_DETAIL_SUCCESS,\n  payload: response\n});\nconst getFacilityByIdFailure = error => ({\n  type: types.GET_FACILITY_DETAIL_FAILURE,\n  payload: error\n});\nconst getFacilityById = id => dispatch => new Promise((resolve, reject) => {\n  dispatch(getFacilityByIdRequest());\n  httpClient.callApi({\n    url: apiLinks.treatment.facility.getDetail + id\n  }).then(response => {\n    dispatch(getFacilityByIdSuccess(response.data));\n    resolve(response.data);\n  }).catch(error => {\n    dispatch(getFacilityByIdFailure(error));\n    reject();\n  });\n});\nconst createFacilityRequest = () => ({\n  type: types.CREATE_FACILITY_REQUEST\n});\nconst createFacilitySuccess = response => ({\n  type: types.CREATE_FACILITY_SUCCESS,\n  payload: response\n});\nconst createFacilityFailure = error => ({\n  type: types.CREATE_FACILITY_FAILURE,\n  payload: error\n});\nconst createFacility = data => dispatch => new Promise((resolve, reject) => {\n  dispatch(createFacilityRequest());\n  httpClient.callApi({\n    method: 'POST',\n    url: apiLinks.treatment.facility.create + data.id,\n    data\n  }).then(response => {\n    dispatch(createFacilitySuccess(response));\n    toast.success('Thành công');\n    resolve();\n  }).catch(error => {\n    announceTreatmentError(error);\n    dispatch(createFacilityFailure(error));\n    reject();\n  });\n});\nconst updateFacilityRequest = () => ({\n  type: types.UPDATE_FACILITY_REQUEST\n});\nconst updateFacilitySuccess = response => ({\n  type: types.UPDATE_FACILITY_SUCCESS,\n  payload: response\n});\nconst updateFacilityFailure = error => ({\n  type: types.UPDATE_FACILITY_FAILURE,\n  payload: error\n});\nconst updateFacility = data => dispatch => new Promise((resolve, reject) => {\n  dispatch(updateFacilityRequest());\n  httpClient.callApi({\n    method: 'PUT',\n    url: apiLinks.treatment.facility.update + data.id,\n    data\n  }).then(response => {\n    dispatch(updateFacilitySuccess(response));\n    toast.success('Thành công');\n    resolve();\n  }).catch(error => {\n    announceTreatmentError(error);\n    dispatch(updateFacilityFailure(error));\n    reject();\n  });\n});\nconst deleteFacilityRequest = () => ({\n  type: types.DELETE_FACILITY_REQUEST\n});\nconst deleteFacilitySuccess = response => ({\n  type: types.DELETE_FACILITY_SUCCESS,\n  payload: response\n});\nconst deleteFacilityFailure = error => ({\n  type: types.DELETE_FACILITY_FAILURE,\n  payload: error\n});\nconst deleteFacility = id => dispatch => new Promise((resolve, reject) => {\n  dispatch(deleteFacilityRequest());\n  httpClient.callApi({\n    method: 'DELETE',\n    url: apiLinks.treatment.facility.delete + id\n  }).then(response => {\n    dispatch(deleteFacilitySuccess(response));\n    toast.success('Thành công');\n    resolve();\n  }).catch(error => {\n    announceTreatmentError(error);\n    dispatch(deleteFacilityFailure(error));\n    reject();\n  });\n});\nconst getCompletedRequest = () => ({\n  type: types.TM_GET_COMPLETED_REQUEST\n});\nconst getCompletedSuccess = response => ({\n  type: types.TM_GET_COMPLETED_SUCCESS,\n  payload: response\n});\nconst getCompletedFailure = error => ({\n  type: types.TM_GET_COMPLETED_FAILURE,\n  payload: error\n});\nconst getCompleted = arg => dispatch => new Promise((resolve, reject) => {\n  dispatch(getCompletedRequest());\n  httpClient.callApi({\n    url: apiLinks.treatment.facility.getCompleted,\n    params: {\n      ...arg\n    }\n  }).then(response => {\n    dispatch(getCompletedSuccess(response.data));\n    resolve();\n  }).catch(error => {\n    dispatch(getCompletedFailure(error));\n    reject();\n  });\n});\nconst getTransitedRequest = () => ({\n  type: types.TM_GET_TRANSITED_REQUEST\n});\nconst getTransitedSuccess = response => ({\n  type: types.TM_GET_TRANSITED_SUCCESS,\n  payload: response\n});\nconst getTransitedFailure = error => ({\n  type: types.TM_GET_TRANSITED_FAILURE,\n  payload: error\n});\nconst getTransited = arg => dispatch => new Promise((resolve, reject) => {\n  dispatch(getTransitedRequest());\n  httpClient.callApi({\n    url: apiLinks.treatment.facility.getTransited,\n    params: {\n      ...arg\n    }\n  }).then(response => {\n    dispatch(getTransitedSuccess(response.data));\n    resolve();\n  }).catch(error => {\n    dispatch(getTransitedFailure(error));\n    reject();\n  });\n});\nconst getOutOfProcessRequest = () => ({\n  type: types.TM_GET_OUT_OF_PROCESS_REQUEST\n});\nconst getOutOfProcessSuccess = response => ({\n  type: types.TM_GET_OUT_OF_PROCESS_SUCCESS,\n  payload: response\n});\nconst getOutOfProcessFailure = error => ({\n  type: types.TM_GET_OUT_OF_PROCESS_FAILURE,\n  payload: error\n});\nconst getOutOfProcess = arg => dispatch => new Promise((resolve, reject) => {\n  dispatch(getOutOfProcessRequest());\n  httpClient.callApi({\n    url: apiLinks.treatment.facility.getOutOfProcess,\n    params: {\n      ...arg\n    }\n  }).then(response => {\n    dispatch(getOutOfProcessSuccess(response.data));\n    resolve();\n  }).catch(error => {\n    dispatch(getOutOfProcessFailure(error));\n    reject();\n  });\n});\nconst getTransferRequest = () => ({\n  type: types.TM_GET_TRANSFER_REQUEST\n});\nconst getTransferSuccess = response => ({\n  type: types.TM_GET_TRANSFER_SUCCESS,\n  payload: response\n});\nconst getTransferFailure = error => ({\n  type: types.TM_GET_TRANSFER_FAILURE,\n  payload: error\n});\nconst getTransfer = arg => dispatch => new Promise((resolve, reject) => {\n  dispatch(getTransferRequest());\n  httpClient.callApi({\n    url: apiLinks.treatment.facility.getTransfer,\n    params: {\n      ...arg\n    }\n  }).then(response => {\n    dispatch(getTransferSuccess(response.data));\n    resolve();\n  }).catch(error => {\n    dispatch(getTransferFailure(error));\n    reject();\n  });\n});\nconst approveTransferRequest = () => ({\n  type: types.TM_APPROVE_TRANSFER_REQUEST\n});\nconst approveTransferSuccess = response => ({\n  type: types.TM_APPROVE_TRANSFER_SUCCESS,\n  payload: response\n});\nconst approveTransferFailure = error => ({\n  type: types.TM_APPROVE_TRANSFER_FAILURE,\n  payload: error\n});\nconst approveTransfer = data => dispatch => new Promise((resolve, reject) => {\n  dispatch(approveTransferRequest());\n  httpClient.callApi({\n    method: 'POST',\n    url: apiLinks.treatment.facility.approveTransfer,\n    data\n  }).then(response => {\n    dispatch(approveTransferSuccess(response.data));\n    resolve();\n  }).catch(error => {\n    announceTreatmentError(error);\n    dispatch(approveTransferFailure(error));\n    reject();\n  });\n});\nconst undoTreatmentRequest = () => ({\n  type: types.TM_UNDO_REQUEST\n});\nconst undoTreatmentSuccess = response => ({\n  type: types.TM_UNDO_SUCCESS,\n  payload: response\n});\nconst undoTreatmentFailure = error => ({\n  type: types.TM_UNDO_FAILURE,\n  payload: error\n});\nconst undoTreatment = data => dispatch => new Promise((resolve, reject) => {\n  dispatch(undoTreatmentRequest());\n  httpClient.callApi({\n    method: 'PUT',\n    url: apiLinks.treatment.facility.undo,\n    data\n  }).then(response => {\n    dispatch(undoTreatmentSuccess(response.data));\n    resolve();\n  }).catch(error => {\n    announceTreatmentError(error);\n    dispatch(undoTreatmentFailure(error));\n    reject();\n  });\n});\nexport { getFacilityInfo, getFacilities, getFacilityById, createFacility, updateFacility, deleteFacility, getCompleted, getTransited, getOutOfProcess, getTransfer, approveTransfer, undoTreatment };","map":{"version":3,"names":["toast","httpClient","apiLinks","announceTreatmentError","types","getFacilityInfoRequest","type","TM_GET_FACILITY_INFO_REQUEST","getFacilityInfoSuccess","response","TM_GET_FACILITY_INFO_SUCCESS","payload","getFacilityInfoFailure","error","TM_GET_FACILITY_INFO_FAILURE","getFacilityInfo","dispatch","Promise","resolve","reject","callApi","url","treatment","facility","get","then","data","catch","getFacilitiesRequest","GET_FACILITY_LIST_REQUEST","getFacilitiesSuccess","GET_FACILITY_LIST_SUCCESS","getFacilitiesFailure","GET_FACILITY_LIST_FAILURE","getFacilities","arg","params","getFacilityByIdRequest","GET_FACILITY_DETAIL_REQUEST","getFacilityByIdSuccess","GET_FACILITY_DETAIL_SUCCESS","getFacilityByIdFailure","GET_FACILITY_DETAIL_FAILURE","getFacilityById","id","getDetail","createFacilityRequest","CREATE_FACILITY_REQUEST","createFacilitySuccess","CREATE_FACILITY_SUCCESS","createFacilityFailure","CREATE_FACILITY_FAILURE","createFacility","method","create","success","updateFacilityRequest","UPDATE_FACILITY_REQUEST","updateFacilitySuccess","UPDATE_FACILITY_SUCCESS","updateFacilityFailure","UPDATE_FACILITY_FAILURE","updateFacility","update","deleteFacilityRequest","DELETE_FACILITY_REQUEST","deleteFacilitySuccess","DELETE_FACILITY_SUCCESS","deleteFacilityFailure","DELETE_FACILITY_FAILURE","deleteFacility","delete","getCompletedRequest","TM_GET_COMPLETED_REQUEST","getCompletedSuccess","TM_GET_COMPLETED_SUCCESS","getCompletedFailure","TM_GET_COMPLETED_FAILURE","getCompleted","getTransitedRequest","TM_GET_TRANSITED_REQUEST","getTransitedSuccess","TM_GET_TRANSITED_SUCCESS","getTransitedFailure","TM_GET_TRANSITED_FAILURE","getTransited","getOutOfProcessRequest","TM_GET_OUT_OF_PROCESS_REQUEST","getOutOfProcessSuccess","TM_GET_OUT_OF_PROCESS_SUCCESS","getOutOfProcessFailure","TM_GET_OUT_OF_PROCESS_FAILURE","getOutOfProcess","getTransferRequest","TM_GET_TRANSFER_REQUEST","getTransferSuccess","TM_GET_TRANSFER_SUCCESS","getTransferFailure","TM_GET_TRANSFER_FAILURE","getTransfer","approveTransferRequest","TM_APPROVE_TRANSFER_REQUEST","approveTransferSuccess","TM_APPROVE_TRANSFER_SUCCESS","approveTransferFailure","TM_APPROVE_TRANSFER_FAILURE","approveTransfer","undoTreatmentRequest","TM_UNDO_REQUEST","undoTreatmentSuccess","TM_UNDO_SUCCESS","undoTreatmentFailure","TM_UNDO_FAILURE","undoTreatment","undo"],"sources":["H:/BAKCO/pj/data reconciliation/src/treatment/actions/facility.js"],"sourcesContent":["import { toast } from 'react-toastify';\n\nimport httpClient from 'app/utils/http-client';\nimport apiLinks from 'app/utils/api-links';\n\nimport { announceTreatmentError } from 'treatment/utils/helpers';\nimport types from './types';\n\nconst getFacilityInfoRequest = () => ({\n  type: types.TM_GET_FACILITY_INFO_REQUEST,\n});\nconst getFacilityInfoSuccess = (response) => ({\n  type: types.TM_GET_FACILITY_INFO_SUCCESS,\n  payload: response,\n});\nconst getFacilityInfoFailure = (error) => ({\n  type: types.TM_GET_FACILITY_INFO_FAILURE,\n  payload: error,\n});\n\nconst getFacilityInfo = () => (dispatch) =>\n  new Promise((resolve, reject) => {\n    dispatch(getFacilityInfoRequest());\n    httpClient\n      .callApi({\n        url: apiLinks.treatment.facility.get,\n      })\n      .then((response) => {\n        dispatch(getFacilityInfoSuccess(response.data));\n        resolve();\n      })\n      .catch((error) => {\n        dispatch(getFacilityInfoFailure(error));\n        reject();\n      });\n  });\n\nconst getFacilitiesRequest = () => ({\n  type: types.GET_FACILITY_LIST_REQUEST,\n});\nconst getFacilitiesSuccess = (response) => ({\n  type: types.GET_FACILITY_LIST_SUCCESS,\n  payload: response,\n});\nconst getFacilitiesFailure = (error) => ({\n  type: types.GET_FACILITY_LIST_FAILURE,\n  payload: error,\n});\n\nconst getFacilities = (arg) => (dispatch) =>\n  new Promise((resolve, reject) => {\n    dispatch(getFacilitiesRequest());\n    httpClient\n      .callApi({\n        url: apiLinks.treatment.facility.getFacilities,\n        params: { ...arg },\n      })\n      .then((response) => {\n        dispatch(getFacilitiesSuccess(response.data));\n        resolve();\n      })\n      .catch((error) => {\n        dispatch(getFacilitiesFailure(error));\n        reject();\n      });\n  });\n\nconst getFacilityByIdRequest = () => ({\n  type: types.GET_FACILITY_DETAIL_REQUEST,\n});\nconst getFacilityByIdSuccess = (response) => ({\n  type: types.GET_FACILITY_DETAIL_SUCCESS,\n  payload: response,\n});\nconst getFacilityByIdFailure = (error) => ({\n  type: types.GET_FACILITY_DETAIL_FAILURE,\n  payload: error,\n});\n\nconst getFacilityById = (id) => (dispatch) =>\n  new Promise((resolve, reject) => {\n    dispatch(getFacilityByIdRequest());\n    httpClient\n      .callApi({\n        url: apiLinks.treatment.facility.getDetail + id,\n      })\n      .then((response) => {\n        dispatch(getFacilityByIdSuccess(response.data));\n        resolve(response.data);\n      })\n      .catch((error) => {\n        dispatch(getFacilityByIdFailure(error));\n        reject();\n      });\n  });\n\nconst createFacilityRequest = () => ({\n  type: types.CREATE_FACILITY_REQUEST,\n});\nconst createFacilitySuccess = (response) => ({\n  type: types.CREATE_FACILITY_SUCCESS,\n  payload: response,\n});\nconst createFacilityFailure = (error) => ({\n  type: types.CREATE_FACILITY_FAILURE,\n  payload: error,\n});\n\nconst createFacility = (data) => (dispatch) =>\n  new Promise((resolve, reject) => {\n    dispatch(createFacilityRequest());\n    httpClient\n      .callApi({\n        method: 'POST',\n        url: apiLinks.treatment.facility.create + data.id,\n        data,\n      })\n      .then((response) => {\n        dispatch(createFacilitySuccess(response));\n        toast.success('Thành công');\n        resolve();\n      })\n      .catch((error) => {\n        announceTreatmentError(error);\n        dispatch(createFacilityFailure(error));\n        reject();\n      });\n  });\n\nconst updateFacilityRequest = () => ({\n  type: types.UPDATE_FACILITY_REQUEST,\n});\nconst updateFacilitySuccess = (response) => ({\n  type: types.UPDATE_FACILITY_SUCCESS,\n  payload: response,\n});\nconst updateFacilityFailure = (error) => ({\n  type: types.UPDATE_FACILITY_FAILURE,\n  payload: error,\n});\n\nconst updateFacility = (data) => (dispatch) =>\n  new Promise((resolve, reject) => {\n    dispatch(updateFacilityRequest());\n    httpClient\n      .callApi({\n        method: 'PUT',\n        url: apiLinks.treatment.facility.update + data.id,\n        data,\n      })\n      .then((response) => {\n        dispatch(updateFacilitySuccess(response));\n        toast.success('Thành công');\n        resolve();\n      })\n      .catch((error) => {\n        announceTreatmentError(error);\n        dispatch(updateFacilityFailure(error));\n        reject();\n      });\n  });\nconst deleteFacilityRequest = () => ({\n  type: types.DELETE_FACILITY_REQUEST,\n});\nconst deleteFacilitySuccess = (response) => ({\n  type: types.DELETE_FACILITY_SUCCESS,\n  payload: response,\n});\nconst deleteFacilityFailure = (error) => ({\n  type: types.DELETE_FACILITY_FAILURE,\n  payload: error,\n});\n\nconst deleteFacility = (id) => (dispatch) =>\n  new Promise((resolve, reject) => {\n    dispatch(deleteFacilityRequest());\n    httpClient\n      .callApi({\n        method: 'DELETE',\n        url: apiLinks.treatment.facility.delete + id,\n      })\n      .then((response) => {\n        dispatch(deleteFacilitySuccess(response));\n        toast.success('Thành công');\n        resolve();\n      })\n      .catch((error) => {\n        announceTreatmentError(error);\n        dispatch(deleteFacilityFailure(error));\n        reject();\n      });\n  });\n\nconst getCompletedRequest = () => ({\n  type: types.TM_GET_COMPLETED_REQUEST,\n});\nconst getCompletedSuccess = (response) => ({\n  type: types.TM_GET_COMPLETED_SUCCESS,\n  payload: response,\n});\nconst getCompletedFailure = (error) => ({\n  type: types.TM_GET_COMPLETED_FAILURE,\n  payload: error,\n});\n\nconst getCompleted = (arg) => (dispatch) =>\n  new Promise((resolve, reject) => {\n    dispatch(getCompletedRequest());\n    httpClient\n      .callApi({\n        url: apiLinks.treatment.facility.getCompleted,\n        params: { ...arg },\n      })\n      .then((response) => {\n        dispatch(getCompletedSuccess(response.data));\n        resolve();\n      })\n      .catch((error) => {\n        dispatch(getCompletedFailure(error));\n        reject();\n      });\n  });\n\nconst getTransitedRequest = () => ({\n  type: types.TM_GET_TRANSITED_REQUEST,\n});\nconst getTransitedSuccess = (response) => ({\n  type: types.TM_GET_TRANSITED_SUCCESS,\n  payload: response,\n});\nconst getTransitedFailure = (error) => ({\n  type: types.TM_GET_TRANSITED_FAILURE,\n  payload: error,\n});\n\nconst getTransited = (arg) => (dispatch) =>\n  new Promise((resolve, reject) => {\n    dispatch(getTransitedRequest());\n    httpClient\n      .callApi({\n        url: apiLinks.treatment.facility.getTransited,\n        params: { ...arg },\n      })\n      .then((response) => {\n        dispatch(getTransitedSuccess(response.data));\n        resolve();\n      })\n      .catch((error) => {\n        dispatch(getTransitedFailure(error));\n        reject();\n      });\n  });\n\nconst getOutOfProcessRequest = () => ({\n  type: types.TM_GET_OUT_OF_PROCESS_REQUEST,\n});\nconst getOutOfProcessSuccess = (response) => ({\n  type: types.TM_GET_OUT_OF_PROCESS_SUCCESS,\n  payload: response,\n});\nconst getOutOfProcessFailure = (error) => ({\n  type: types.TM_GET_OUT_OF_PROCESS_FAILURE,\n  payload: error,\n});\n\nconst getOutOfProcess = (arg) => (dispatch) =>\n  new Promise((resolve, reject) => {\n    dispatch(getOutOfProcessRequest());\n    httpClient\n      .callApi({\n        url: apiLinks.treatment.facility.getOutOfProcess,\n        params: { ...arg },\n      })\n      .then((response) => {\n        dispatch(getOutOfProcessSuccess(response.data));\n        resolve();\n      })\n      .catch((error) => {\n        dispatch(getOutOfProcessFailure(error));\n        reject();\n      });\n  });\n\nconst getTransferRequest = () => ({\n  type: types.TM_GET_TRANSFER_REQUEST,\n});\nconst getTransferSuccess = (response) => ({\n  type: types.TM_GET_TRANSFER_SUCCESS,\n  payload: response,\n});\nconst getTransferFailure = (error) => ({\n  type: types.TM_GET_TRANSFER_FAILURE,\n  payload: error,\n});\n\nconst getTransfer = (arg) => (dispatch) =>\n  new Promise((resolve, reject) => {\n    dispatch(getTransferRequest());\n    httpClient\n      .callApi({\n        url: apiLinks.treatment.facility.getTransfer,\n        params: { ...arg },\n      })\n      .then((response) => {\n        dispatch(getTransferSuccess(response.data));\n        resolve();\n      })\n      .catch((error) => {\n        dispatch(getTransferFailure(error));\n        reject();\n      });\n  });\n\nconst approveTransferRequest = () => ({\n  type: types.TM_APPROVE_TRANSFER_REQUEST,\n});\nconst approveTransferSuccess = (response) => ({\n  type: types.TM_APPROVE_TRANSFER_SUCCESS,\n  payload: response,\n});\nconst approveTransferFailure = (error) => ({\n  type: types.TM_APPROVE_TRANSFER_FAILURE,\n  payload: error,\n});\n\nconst approveTransfer = (data) => (dispatch) =>\n  new Promise((resolve, reject) => {\n    dispatch(approveTransferRequest());\n    httpClient\n      .callApi({\n        method: 'POST',\n        url: apiLinks.treatment.facility.approveTransfer,\n        data,\n      })\n      .then((response) => {\n        dispatch(approveTransferSuccess(response.data));\n        resolve();\n      })\n      .catch((error) => {\n        announceTreatmentError(error);\n        dispatch(approveTransferFailure(error));\n        reject();\n      });\n  });\n\nconst undoTreatmentRequest = () => ({\n  type: types.TM_UNDO_REQUEST,\n});\nconst undoTreatmentSuccess = (response) => ({\n  type: types.TM_UNDO_SUCCESS,\n  payload: response,\n});\nconst undoTreatmentFailure = (error) => ({\n  type: types.TM_UNDO_FAILURE,\n  payload: error,\n});\n\nconst undoTreatment = (data) => (dispatch) =>\n  new Promise((resolve, reject) => {\n    dispatch(undoTreatmentRequest());\n    httpClient\n      .callApi({\n        method: 'PUT',\n        url: apiLinks.treatment.facility.undo,\n        data,\n      })\n      .then((response) => {\n        dispatch(undoTreatmentSuccess(response.data));\n        resolve();\n      })\n      .catch((error) => {\n        announceTreatmentError(error);\n        dispatch(undoTreatmentFailure(error));\n        reject();\n      });\n  });\n\nexport {\n  getFacilityInfo,\n  getFacilities,\n  getFacilityById,\n  createFacility,\n  updateFacility,\n  deleteFacility,\n  getCompleted,\n  getTransited,\n  getOutOfProcess,\n  getTransfer,\n  approveTransfer,\n  undoTreatment,\n};\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,gBAAgB;AAEtC,OAAOC,UAAU,MAAM,uBAAuB;AAC9C,OAAOC,QAAQ,MAAM,qBAAqB;AAE1C,SAASC,sBAAsB,QAAQ,yBAAyB;AAChE,OAAOC,KAAK,MAAM,SAAS;AAE3B,MAAMC,sBAAsB,GAAGA,CAAA,MAAO;EACpCC,IAAI,EAAEF,KAAK,CAACG;AACd,CAAC,CAAC;AACF,MAAMC,sBAAsB,GAAIC,QAAQ,KAAM;EAC5CH,IAAI,EAAEF,KAAK,CAACM,4BAA4B;EACxCC,OAAO,EAAEF;AACX,CAAC,CAAC;AACF,MAAMG,sBAAsB,GAAIC,KAAK,KAAM;EACzCP,IAAI,EAAEF,KAAK,CAACU,4BAA4B;EACxCH,OAAO,EAAEE;AACX,CAAC,CAAC;AAEF,MAAME,eAAe,GAAGA,CAAA,KAAOC,QAAQ,IACrC,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EAC/BH,QAAQ,CAACX,sBAAsB,EAAE,CAAC;EAClCJ,UAAU,CACPmB,OAAO,CAAC;IACPC,GAAG,EAAEnB,QAAQ,CAACoB,SAAS,CAACC,QAAQ,CAACC;EACnC,CAAC,CAAC,CACDC,IAAI,CAAEhB,QAAQ,IAAK;IAClBO,QAAQ,CAACR,sBAAsB,CAACC,QAAQ,CAACiB,IAAI,CAAC,CAAC;IAC/CR,OAAO,EAAE;EACX,CAAC,CAAC,CACDS,KAAK,CAAEd,KAAK,IAAK;IAChBG,QAAQ,CAACJ,sBAAsB,CAACC,KAAK,CAAC,CAAC;IACvCM,MAAM,EAAE;EACV,CAAC,CAAC;AACN,CAAC,CAAC;AAEJ,MAAMS,oBAAoB,GAAGA,CAAA,MAAO;EAClCtB,IAAI,EAAEF,KAAK,CAACyB;AACd,CAAC,CAAC;AACF,MAAMC,oBAAoB,GAAIrB,QAAQ,KAAM;EAC1CH,IAAI,EAAEF,KAAK,CAAC2B,yBAAyB;EACrCpB,OAAO,EAAEF;AACX,CAAC,CAAC;AACF,MAAMuB,oBAAoB,GAAInB,KAAK,KAAM;EACvCP,IAAI,EAAEF,KAAK,CAAC6B,yBAAyB;EACrCtB,OAAO,EAAEE;AACX,CAAC,CAAC;AAEF,MAAMqB,aAAa,GAAIC,GAAG,IAAMnB,QAAQ,IACtC,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EAC/BH,QAAQ,CAACY,oBAAoB,EAAE,CAAC;EAChC3B,UAAU,CACPmB,OAAO,CAAC;IACPC,GAAG,EAAEnB,QAAQ,CAACoB,SAAS,CAACC,QAAQ,CAACW,aAAa;IAC9CE,MAAM,EAAE;MAAE,GAAGD;IAAI;EACnB,CAAC,CAAC,CACDV,IAAI,CAAEhB,QAAQ,IAAK;IAClBO,QAAQ,CAACc,oBAAoB,CAACrB,QAAQ,CAACiB,IAAI,CAAC,CAAC;IAC7CR,OAAO,EAAE;EACX,CAAC,CAAC,CACDS,KAAK,CAAEd,KAAK,IAAK;IAChBG,QAAQ,CAACgB,oBAAoB,CAACnB,KAAK,CAAC,CAAC;IACrCM,MAAM,EAAE;EACV,CAAC,CAAC;AACN,CAAC,CAAC;AAEJ,MAAMkB,sBAAsB,GAAGA,CAAA,MAAO;EACpC/B,IAAI,EAAEF,KAAK,CAACkC;AACd,CAAC,CAAC;AACF,MAAMC,sBAAsB,GAAI9B,QAAQ,KAAM;EAC5CH,IAAI,EAAEF,KAAK,CAACoC,2BAA2B;EACvC7B,OAAO,EAAEF;AACX,CAAC,CAAC;AACF,MAAMgC,sBAAsB,GAAI5B,KAAK,KAAM;EACzCP,IAAI,EAAEF,KAAK,CAACsC,2BAA2B;EACvC/B,OAAO,EAAEE;AACX,CAAC,CAAC;AAEF,MAAM8B,eAAe,GAAIC,EAAE,IAAM5B,QAAQ,IACvC,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EAC/BH,QAAQ,CAACqB,sBAAsB,EAAE,CAAC;EAClCpC,UAAU,CACPmB,OAAO,CAAC;IACPC,GAAG,EAAEnB,QAAQ,CAACoB,SAAS,CAACC,QAAQ,CAACsB,SAAS,GAAGD;EAC/C,CAAC,CAAC,CACDnB,IAAI,CAAEhB,QAAQ,IAAK;IAClBO,QAAQ,CAACuB,sBAAsB,CAAC9B,QAAQ,CAACiB,IAAI,CAAC,CAAC;IAC/CR,OAAO,CAACT,QAAQ,CAACiB,IAAI,CAAC;EACxB,CAAC,CAAC,CACDC,KAAK,CAAEd,KAAK,IAAK;IAChBG,QAAQ,CAACyB,sBAAsB,CAAC5B,KAAK,CAAC,CAAC;IACvCM,MAAM,EAAE;EACV,CAAC,CAAC;AACN,CAAC,CAAC;AAEJ,MAAM2B,qBAAqB,GAAGA,CAAA,MAAO;EACnCxC,IAAI,EAAEF,KAAK,CAAC2C;AACd,CAAC,CAAC;AACF,MAAMC,qBAAqB,GAAIvC,QAAQ,KAAM;EAC3CH,IAAI,EAAEF,KAAK,CAAC6C,uBAAuB;EACnCtC,OAAO,EAAEF;AACX,CAAC,CAAC;AACF,MAAMyC,qBAAqB,GAAIrC,KAAK,KAAM;EACxCP,IAAI,EAAEF,KAAK,CAAC+C,uBAAuB;EACnCxC,OAAO,EAAEE;AACX,CAAC,CAAC;AAEF,MAAMuC,cAAc,GAAI1B,IAAI,IAAMV,QAAQ,IACxC,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EAC/BH,QAAQ,CAAC8B,qBAAqB,EAAE,CAAC;EACjC7C,UAAU,CACPmB,OAAO,CAAC;IACPiC,MAAM,EAAE,MAAM;IACdhC,GAAG,EAAEnB,QAAQ,CAACoB,SAAS,CAACC,QAAQ,CAAC+B,MAAM,GAAG5B,IAAI,CAACkB,EAAE;IACjDlB;EACF,CAAC,CAAC,CACDD,IAAI,CAAEhB,QAAQ,IAAK;IAClBO,QAAQ,CAACgC,qBAAqB,CAACvC,QAAQ,CAAC,CAAC;IACzCT,KAAK,CAACuD,OAAO,CAAC,YAAY,CAAC;IAC3BrC,OAAO,EAAE;EACX,CAAC,CAAC,CACDS,KAAK,CAAEd,KAAK,IAAK;IAChBV,sBAAsB,CAACU,KAAK,CAAC;IAC7BG,QAAQ,CAACkC,qBAAqB,CAACrC,KAAK,CAAC,CAAC;IACtCM,MAAM,EAAE;EACV,CAAC,CAAC;AACN,CAAC,CAAC;AAEJ,MAAMqC,qBAAqB,GAAGA,CAAA,MAAO;EACnClD,IAAI,EAAEF,KAAK,CAACqD;AACd,CAAC,CAAC;AACF,MAAMC,qBAAqB,GAAIjD,QAAQ,KAAM;EAC3CH,IAAI,EAAEF,KAAK,CAACuD,uBAAuB;EACnChD,OAAO,EAAEF;AACX,CAAC,CAAC;AACF,MAAMmD,qBAAqB,GAAI/C,KAAK,KAAM;EACxCP,IAAI,EAAEF,KAAK,CAACyD,uBAAuB;EACnClD,OAAO,EAAEE;AACX,CAAC,CAAC;AAEF,MAAMiD,cAAc,GAAIpC,IAAI,IAAMV,QAAQ,IACxC,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EAC/BH,QAAQ,CAACwC,qBAAqB,EAAE,CAAC;EACjCvD,UAAU,CACPmB,OAAO,CAAC;IACPiC,MAAM,EAAE,KAAK;IACbhC,GAAG,EAAEnB,QAAQ,CAACoB,SAAS,CAACC,QAAQ,CAACwC,MAAM,GAAGrC,IAAI,CAACkB,EAAE;IACjDlB;EACF,CAAC,CAAC,CACDD,IAAI,CAAEhB,QAAQ,IAAK;IAClBO,QAAQ,CAAC0C,qBAAqB,CAACjD,QAAQ,CAAC,CAAC;IACzCT,KAAK,CAACuD,OAAO,CAAC,YAAY,CAAC;IAC3BrC,OAAO,EAAE;EACX,CAAC,CAAC,CACDS,KAAK,CAAEd,KAAK,IAAK;IAChBV,sBAAsB,CAACU,KAAK,CAAC;IAC7BG,QAAQ,CAAC4C,qBAAqB,CAAC/C,KAAK,CAAC,CAAC;IACtCM,MAAM,EAAE;EACV,CAAC,CAAC;AACN,CAAC,CAAC;AACJ,MAAM6C,qBAAqB,GAAGA,CAAA,MAAO;EACnC1D,IAAI,EAAEF,KAAK,CAAC6D;AACd,CAAC,CAAC;AACF,MAAMC,qBAAqB,GAAIzD,QAAQ,KAAM;EAC3CH,IAAI,EAAEF,KAAK,CAAC+D,uBAAuB;EACnCxD,OAAO,EAAEF;AACX,CAAC,CAAC;AACF,MAAM2D,qBAAqB,GAAIvD,KAAK,KAAM;EACxCP,IAAI,EAAEF,KAAK,CAACiE,uBAAuB;EACnC1D,OAAO,EAAEE;AACX,CAAC,CAAC;AAEF,MAAMyD,cAAc,GAAI1B,EAAE,IAAM5B,QAAQ,IACtC,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EAC/BH,QAAQ,CAACgD,qBAAqB,EAAE,CAAC;EACjC/D,UAAU,CACPmB,OAAO,CAAC;IACPiC,MAAM,EAAE,QAAQ;IAChBhC,GAAG,EAAEnB,QAAQ,CAACoB,SAAS,CAACC,QAAQ,CAACgD,MAAM,GAAG3B;EAC5C,CAAC,CAAC,CACDnB,IAAI,CAAEhB,QAAQ,IAAK;IAClBO,QAAQ,CAACkD,qBAAqB,CAACzD,QAAQ,CAAC,CAAC;IACzCT,KAAK,CAACuD,OAAO,CAAC,YAAY,CAAC;IAC3BrC,OAAO,EAAE;EACX,CAAC,CAAC,CACDS,KAAK,CAAEd,KAAK,IAAK;IAChBV,sBAAsB,CAACU,KAAK,CAAC;IAC7BG,QAAQ,CAACoD,qBAAqB,CAACvD,KAAK,CAAC,CAAC;IACtCM,MAAM,EAAE;EACV,CAAC,CAAC;AACN,CAAC,CAAC;AAEJ,MAAMqD,mBAAmB,GAAGA,CAAA,MAAO;EACjClE,IAAI,EAAEF,KAAK,CAACqE;AACd,CAAC,CAAC;AACF,MAAMC,mBAAmB,GAAIjE,QAAQ,KAAM;EACzCH,IAAI,EAAEF,KAAK,CAACuE,wBAAwB;EACpChE,OAAO,EAAEF;AACX,CAAC,CAAC;AACF,MAAMmE,mBAAmB,GAAI/D,KAAK,KAAM;EACtCP,IAAI,EAAEF,KAAK,CAACyE,wBAAwB;EACpClE,OAAO,EAAEE;AACX,CAAC,CAAC;AAEF,MAAMiE,YAAY,GAAI3C,GAAG,IAAMnB,QAAQ,IACrC,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EAC/BH,QAAQ,CAACwD,mBAAmB,EAAE,CAAC;EAC/BvE,UAAU,CACPmB,OAAO,CAAC;IACPC,GAAG,EAAEnB,QAAQ,CAACoB,SAAS,CAACC,QAAQ,CAACuD,YAAY;IAC7C1C,MAAM,EAAE;MAAE,GAAGD;IAAI;EACnB,CAAC,CAAC,CACDV,IAAI,CAAEhB,QAAQ,IAAK;IAClBO,QAAQ,CAAC0D,mBAAmB,CAACjE,QAAQ,CAACiB,IAAI,CAAC,CAAC;IAC5CR,OAAO,EAAE;EACX,CAAC,CAAC,CACDS,KAAK,CAAEd,KAAK,IAAK;IAChBG,QAAQ,CAAC4D,mBAAmB,CAAC/D,KAAK,CAAC,CAAC;IACpCM,MAAM,EAAE;EACV,CAAC,CAAC;AACN,CAAC,CAAC;AAEJ,MAAM4D,mBAAmB,GAAGA,CAAA,MAAO;EACjCzE,IAAI,EAAEF,KAAK,CAAC4E;AACd,CAAC,CAAC;AACF,MAAMC,mBAAmB,GAAIxE,QAAQ,KAAM;EACzCH,IAAI,EAAEF,KAAK,CAAC8E,wBAAwB;EACpCvE,OAAO,EAAEF;AACX,CAAC,CAAC;AACF,MAAM0E,mBAAmB,GAAItE,KAAK,KAAM;EACtCP,IAAI,EAAEF,KAAK,CAACgF,wBAAwB;EACpCzE,OAAO,EAAEE;AACX,CAAC,CAAC;AAEF,MAAMwE,YAAY,GAAIlD,GAAG,IAAMnB,QAAQ,IACrC,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EAC/BH,QAAQ,CAAC+D,mBAAmB,EAAE,CAAC;EAC/B9E,UAAU,CACPmB,OAAO,CAAC;IACPC,GAAG,EAAEnB,QAAQ,CAACoB,SAAS,CAACC,QAAQ,CAAC8D,YAAY;IAC7CjD,MAAM,EAAE;MAAE,GAAGD;IAAI;EACnB,CAAC,CAAC,CACDV,IAAI,CAAEhB,QAAQ,IAAK;IAClBO,QAAQ,CAACiE,mBAAmB,CAACxE,QAAQ,CAACiB,IAAI,CAAC,CAAC;IAC5CR,OAAO,EAAE;EACX,CAAC,CAAC,CACDS,KAAK,CAAEd,KAAK,IAAK;IAChBG,QAAQ,CAACmE,mBAAmB,CAACtE,KAAK,CAAC,CAAC;IACpCM,MAAM,EAAE;EACV,CAAC,CAAC;AACN,CAAC,CAAC;AAEJ,MAAMmE,sBAAsB,GAAGA,CAAA,MAAO;EACpChF,IAAI,EAAEF,KAAK,CAACmF;AACd,CAAC,CAAC;AACF,MAAMC,sBAAsB,GAAI/E,QAAQ,KAAM;EAC5CH,IAAI,EAAEF,KAAK,CAACqF,6BAA6B;EACzC9E,OAAO,EAAEF;AACX,CAAC,CAAC;AACF,MAAMiF,sBAAsB,GAAI7E,KAAK,KAAM;EACzCP,IAAI,EAAEF,KAAK,CAACuF,6BAA6B;EACzChF,OAAO,EAAEE;AACX,CAAC,CAAC;AAEF,MAAM+E,eAAe,GAAIzD,GAAG,IAAMnB,QAAQ,IACxC,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EAC/BH,QAAQ,CAACsE,sBAAsB,EAAE,CAAC;EAClCrF,UAAU,CACPmB,OAAO,CAAC;IACPC,GAAG,EAAEnB,QAAQ,CAACoB,SAAS,CAACC,QAAQ,CAACqE,eAAe;IAChDxD,MAAM,EAAE;MAAE,GAAGD;IAAI;EACnB,CAAC,CAAC,CACDV,IAAI,CAAEhB,QAAQ,IAAK;IAClBO,QAAQ,CAACwE,sBAAsB,CAAC/E,QAAQ,CAACiB,IAAI,CAAC,CAAC;IAC/CR,OAAO,EAAE;EACX,CAAC,CAAC,CACDS,KAAK,CAAEd,KAAK,IAAK;IAChBG,QAAQ,CAAC0E,sBAAsB,CAAC7E,KAAK,CAAC,CAAC;IACvCM,MAAM,EAAE;EACV,CAAC,CAAC;AACN,CAAC,CAAC;AAEJ,MAAM0E,kBAAkB,GAAGA,CAAA,MAAO;EAChCvF,IAAI,EAAEF,KAAK,CAAC0F;AACd,CAAC,CAAC;AACF,MAAMC,kBAAkB,GAAItF,QAAQ,KAAM;EACxCH,IAAI,EAAEF,KAAK,CAAC4F,uBAAuB;EACnCrF,OAAO,EAAEF;AACX,CAAC,CAAC;AACF,MAAMwF,kBAAkB,GAAIpF,KAAK,KAAM;EACrCP,IAAI,EAAEF,KAAK,CAAC8F,uBAAuB;EACnCvF,OAAO,EAAEE;AACX,CAAC,CAAC;AAEF,MAAMsF,WAAW,GAAIhE,GAAG,IAAMnB,QAAQ,IACpC,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EAC/BH,QAAQ,CAAC6E,kBAAkB,EAAE,CAAC;EAC9B5F,UAAU,CACPmB,OAAO,CAAC;IACPC,GAAG,EAAEnB,QAAQ,CAACoB,SAAS,CAACC,QAAQ,CAAC4E,WAAW;IAC5C/D,MAAM,EAAE;MAAE,GAAGD;IAAI;EACnB,CAAC,CAAC,CACDV,IAAI,CAAEhB,QAAQ,IAAK;IAClBO,QAAQ,CAAC+E,kBAAkB,CAACtF,QAAQ,CAACiB,IAAI,CAAC,CAAC;IAC3CR,OAAO,EAAE;EACX,CAAC,CAAC,CACDS,KAAK,CAAEd,KAAK,IAAK;IAChBG,QAAQ,CAACiF,kBAAkB,CAACpF,KAAK,CAAC,CAAC;IACnCM,MAAM,EAAE;EACV,CAAC,CAAC;AACN,CAAC,CAAC;AAEJ,MAAMiF,sBAAsB,GAAGA,CAAA,MAAO;EACpC9F,IAAI,EAAEF,KAAK,CAACiG;AACd,CAAC,CAAC;AACF,MAAMC,sBAAsB,GAAI7F,QAAQ,KAAM;EAC5CH,IAAI,EAAEF,KAAK,CAACmG,2BAA2B;EACvC5F,OAAO,EAAEF;AACX,CAAC,CAAC;AACF,MAAM+F,sBAAsB,GAAI3F,KAAK,KAAM;EACzCP,IAAI,EAAEF,KAAK,CAACqG,2BAA2B;EACvC9F,OAAO,EAAEE;AACX,CAAC,CAAC;AAEF,MAAM6F,eAAe,GAAIhF,IAAI,IAAMV,QAAQ,IACzC,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EAC/BH,QAAQ,CAACoF,sBAAsB,EAAE,CAAC;EAClCnG,UAAU,CACPmB,OAAO,CAAC;IACPiC,MAAM,EAAE,MAAM;IACdhC,GAAG,EAAEnB,QAAQ,CAACoB,SAAS,CAACC,QAAQ,CAACmF,eAAe;IAChDhF;EACF,CAAC,CAAC,CACDD,IAAI,CAAEhB,QAAQ,IAAK;IAClBO,QAAQ,CAACsF,sBAAsB,CAAC7F,QAAQ,CAACiB,IAAI,CAAC,CAAC;IAC/CR,OAAO,EAAE;EACX,CAAC,CAAC,CACDS,KAAK,CAAEd,KAAK,IAAK;IAChBV,sBAAsB,CAACU,KAAK,CAAC;IAC7BG,QAAQ,CAACwF,sBAAsB,CAAC3F,KAAK,CAAC,CAAC;IACvCM,MAAM,EAAE;EACV,CAAC,CAAC;AACN,CAAC,CAAC;AAEJ,MAAMwF,oBAAoB,GAAGA,CAAA,MAAO;EAClCrG,IAAI,EAAEF,KAAK,CAACwG;AACd,CAAC,CAAC;AACF,MAAMC,oBAAoB,GAAIpG,QAAQ,KAAM;EAC1CH,IAAI,EAAEF,KAAK,CAAC0G,eAAe;EAC3BnG,OAAO,EAAEF;AACX,CAAC,CAAC;AACF,MAAMsG,oBAAoB,GAAIlG,KAAK,KAAM;EACvCP,IAAI,EAAEF,KAAK,CAAC4G,eAAe;EAC3BrG,OAAO,EAAEE;AACX,CAAC,CAAC;AAEF,MAAMoG,aAAa,GAAIvF,IAAI,IAAMV,QAAQ,IACvC,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EAC/BH,QAAQ,CAAC2F,oBAAoB,EAAE,CAAC;EAChC1G,UAAU,CACPmB,OAAO,CAAC;IACPiC,MAAM,EAAE,KAAK;IACbhC,GAAG,EAAEnB,QAAQ,CAACoB,SAAS,CAACC,QAAQ,CAAC2F,IAAI;IACrCxF;EACF,CAAC,CAAC,CACDD,IAAI,CAAEhB,QAAQ,IAAK;IAClBO,QAAQ,CAAC6F,oBAAoB,CAACpG,QAAQ,CAACiB,IAAI,CAAC,CAAC;IAC7CR,OAAO,EAAE;EACX,CAAC,CAAC,CACDS,KAAK,CAAEd,KAAK,IAAK;IAChBV,sBAAsB,CAACU,KAAK,CAAC;IAC7BG,QAAQ,CAAC+F,oBAAoB,CAAClG,KAAK,CAAC,CAAC;IACrCM,MAAM,EAAE;EACV,CAAC,CAAC;AACN,CAAC,CAAC;AAEJ,SACEJ,eAAe,EACfmB,aAAa,EACbS,eAAe,EACfS,cAAc,EACdU,cAAc,EACdQ,cAAc,EACdQ,YAAY,EACZO,YAAY,EACZO,eAAe,EACfO,WAAW,EACXO,eAAe,EACfO,aAAa"},"metadata":{},"sourceType":"module"}