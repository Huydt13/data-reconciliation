{"ast":null,"code":"import jwtDecode from 'jwt-decode';\nimport { setToken, login as li, logout as lo, getUserInfo, getPermission, checkCredential } from 'app/actions/auth';\nimport store from 'app/store';\nimport { toast } from 'react-toastify';\nimport { TOKEN, EXPIRED_TIME, CDS_AUTH_PERMISSION } from 'app/utils/constants';\nconst useAuth = () => {\n  var _getAuthInfo$Role, _getAuthInfo2, _getAuthInfo3, _getAuthInfo4, _getAuthInfo5, _getAuthInfo6, _getAuthInfo7, _getAuthInfo8, _getAuthInfo9, _getAuthInfo10;\n  /**\n   * Check and handle token from localStorage and return if the token is still validate\n   * @returns {boolean} token validate status\n   */\n\n  /**\n   * Logout and delete token from localStorage\n   */\n  const logout = () => {\n    localStorage.removeItem(TOKEN);\n    localStorage.removeItem(EXPIRED_TIME);\n    sessionStorage.removeItem(TOKEN);\n    sessionStorage.removeItem(EXPIRED_TIME);\n    store.dispatch(lo());\n  };\n  const isAuthenticated = () => {\n    const token = localStorage.getItem(TOKEN) || sessionStorage.getItem(TOKEN);\n    checkCredential(token).then(() => {\n      getPermission(token).catch(() => {\n        toast.warning('Phiên đăng nhập đã hết, vui lòng đăng nhập lại', {\n          toastId: 'token-expired'\n        });\n        logout();\n      });\n    });\n    const expiredTime = new Date(localStorage.getItem(EXPIRED_TIME) || sessionStorage.getItem(EXPIRED_TIME));\n    if (token && expiredTime > new Date()) {\n      store.dispatch(setToken(token, expiredTime, jwtDecode(token)));\n      if (!store.getState().auth.userInfo) {\n        store.dispatch(getUserInfo());\n      }\n      return true;\n    }\n    logout();\n    return false;\n  };\n  const getAuthInfo = () => store.getState().auth.userInfo;\n  const isUsername = username => {\n    var _getAuthInfo;\n    return ((_getAuthInfo = getAuthInfo()) === null || _getAuthInfo === void 0 ? void 0 : _getAuthInfo.Username) === username;\n  };\n\n  // admin role\n  const isAdmin = ((_getAuthInfo$Role = (_getAuthInfo2 = getAuthInfo()) === null || _getAuthInfo2 === void 0 ? void 0 : _getAuthInfo2.Role) !== null && _getAuthInfo$Role !== void 0 ? _getAuthInfo$Role : []).includes('admin');\n\n  // chain's role\n  const isMasterDte = ((_getAuthInfo3 = getAuthInfo()) === null || _getAuthInfo3 === void 0 ? void 0 : _getAuthInfo3.Username) === 'master.dte' || ((_getAuthInfo4 = getAuthInfo()) === null || _getAuthInfo4 === void 0 ? void 0 : _getAuthInfo4.Username) === 'hcdc';\n\n  // examination's role\n  const isMasterXng = ((_getAuthInfo5 = getAuthInfo()) === null || _getAuthInfo5 === void 0 ? void 0 : _getAuthInfo5.Username) === 'master.xng' || ((_getAuthInfo6 = getAuthInfo()) === null || _getAuthInfo6 === void 0 ? void 0 : _getAuthInfo6.Username) === 'hcdc';\n  const isHcdcXng = ((_getAuthInfo7 = getAuthInfo()) === null || _getAuthInfo7 === void 0 ? void 0 : _getAuthInfo7.Username) === 'hcdc' || ((_getAuthInfo8 = getAuthInfo()) === null || _getAuthInfo8 === void 0 ? void 0 : _getAuthInfo8.Username) === 'hcdc.xng';\n  const isHcdcDtr = ((_getAuthInfo9 = getAuthInfo()) === null || _getAuthInfo9 === void 0 ? void 0 : _getAuthInfo9.Username) === 'hcdc' || ((_getAuthInfo10 = getAuthInfo()) === null || _getAuthInfo10 === void 0 ? void 0 : _getAuthInfo10.Username) === 'hcdc.dtr';\n\n  /**\n   * Return a Promise which resolve when login successfully\n   * @param {string} username Username\n   * @param {string} password Password\n   * @param {boolean} remember Option to remember password\n   * @returns {Promise} Resolve if login successfully and reject if login failed\n   */\n  const login = function (username, password) {\n    let remember = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    return new Promise((resolve, reject) => {\n      store.dispatch(li(username, password)).then(response => {\n        const {\n          access_token: token,\n          expires_in: expiresIn\n        } = response;\n        getPermission(token).then(permissionList => {\n          if (permissionList && permissionList.map(p => p.code).includes(CDS_AUTH_PERMISSION)) {\n            if (remember) {\n              localStorage.setItem(TOKEN, token);\n              localStorage.setItem(EXPIRED_TIME, new Date(new Date().getTime() + expiresIn * 1000));\n            } else {\n              sessionStorage.setItem(TOKEN, token);\n              sessionStorage.setItem(EXPIRED_TIME, new Date(new Date().getTime() + expiresIn * 1000));\n            }\n            store.dispatch(getUserInfo());\n            resolve();\n          } else {\n            const error = {\n              type: 'Không có quyền truy cập!',\n              message: 'Tài khoản này không có quyền truy cập vào hệ thống'\n            };\n            reject(error);\n          }\n        });\n      }).catch(reject);\n    });\n  };\n  return {\n    isAuthenticated,\n    isAdmin,\n    isMasterDte,\n    isMasterXng,\n    isHcdcXng,\n    isUsername,\n    isHcdcDtr,\n    getAuthInfo,\n    login,\n    logout\n  };\n};\nexport default useAuth;","map":{"version":3,"names":["jwtDecode","setToken","login","li","logout","lo","getUserInfo","getPermission","checkCredential","store","toast","TOKEN","EXPIRED_TIME","CDS_AUTH_PERMISSION","useAuth","_getAuthInfo$Role","_getAuthInfo2","_getAuthInfo3","_getAuthInfo4","_getAuthInfo5","_getAuthInfo6","_getAuthInfo7","_getAuthInfo8","_getAuthInfo9","_getAuthInfo10","localStorage","removeItem","sessionStorage","dispatch","isAuthenticated","token","getItem","then","catch","warning","toastId","expiredTime","Date","getState","auth","userInfo","getAuthInfo","isUsername","username","_getAuthInfo","Username","isAdmin","Role","includes","isMasterDte","isMasterXng","isHcdcXng","isHcdcDtr","password","remember","arguments","length","undefined","Promise","resolve","reject","response","access_token","expires_in","expiresIn","permissionList","map","p","code","setItem","getTime","error","type","message"],"sources":["H:/BAKCO/pj/cds/src/app/hooks/use-auth.js"],"sourcesContent":["import jwtDecode from 'jwt-decode';\n\nimport {\n  setToken,\n  login as li,\n  logout as lo,\n  getUserInfo,\n  getPermission,\n  checkCredential,\n} from 'app/actions/auth';\nimport store from 'app/store';\n\nimport { toast } from 'react-toastify';\nimport { TOKEN, EXPIRED_TIME, CDS_AUTH_PERMISSION } from 'app/utils/constants';\n\nconst useAuth = () => {\n  /**\n   * Check and handle token from localStorage and return if the token is still validate\n   * @returns {boolean} token validate status\n   */\n\n  /**\n   * Logout and delete token from localStorage\n   */\n  const logout = () => {\n    localStorage.removeItem(TOKEN);\n    localStorage.removeItem(EXPIRED_TIME);\n    sessionStorage.removeItem(TOKEN);\n    sessionStorage.removeItem(EXPIRED_TIME);\n    store.dispatch(lo());\n  };\n\n  const isAuthenticated = () => {\n    const token = localStorage.getItem(TOKEN) || sessionStorage.getItem(TOKEN);\n    checkCredential(token).then(() => {\n      getPermission(token).catch(() => {\n        toast.warning('Phiên đăng nhập đã hết, vui lòng đăng nhập lại', {\n          toastId: 'token-expired',\n        });\n        logout();\n      });\n    });\n    const expiredTime = new Date(\n      localStorage.getItem(EXPIRED_TIME) ||\n        sessionStorage.getItem(EXPIRED_TIME),\n    );\n    if (token && expiredTime > new Date()) {\n      store.dispatch(setToken(token, expiredTime, jwtDecode(token)));\n      if (!store.getState().auth.userInfo) {\n        store.dispatch(getUserInfo());\n      }\n      return true;\n    }\n    logout();\n    return false;\n  };\n\n  const getAuthInfo = () => store.getState().auth.userInfo;\n  const isUsername = (username) => getAuthInfo()?.Username === username;\n\n  // admin role\n  const isAdmin = (getAuthInfo()?.Role ?? []).includes('admin');\n\n  // chain's role\n  const isMasterDte =\n    getAuthInfo()?.Username === 'master.dte' ||\n    getAuthInfo()?.Username === 'hcdc';\n\n  // examination's role\n  const isMasterXng =\n    getAuthInfo()?.Username === 'master.xng' ||\n    getAuthInfo()?.Username === 'hcdc';\n  const isHcdcXng =\n    getAuthInfo()?.Username === 'hcdc' ||\n    getAuthInfo()?.Username === 'hcdc.xng';\n\n  const isHcdcDtr =\n    getAuthInfo()?.Username === 'hcdc' ||\n    getAuthInfo()?.Username === 'hcdc.dtr';\n\n  /**\n   * Return a Promise which resolve when login successfully\n   * @param {string} username Username\n   * @param {string} password Password\n   * @param {boolean} remember Option to remember password\n   * @returns {Promise} Resolve if login successfully and reject if login failed\n   */\n  const login = (username, password, remember = true) =>\n    new Promise((resolve, reject) => {\n      store\n        .dispatch(li(username, password))\n        .then((response) => {\n          const { access_token: token, expires_in: expiresIn } = response;\n          getPermission(token).then((permissionList) => {\n            if (\n              permissionList &&\n              permissionList.map((p) => p.code).includes(CDS_AUTH_PERMISSION)\n            ) {\n              if (remember) {\n                localStorage.setItem(TOKEN, token);\n                localStorage.setItem(\n                  EXPIRED_TIME,\n                  new Date(new Date().getTime() + expiresIn * 1000),\n                );\n              } else {\n                sessionStorage.setItem(TOKEN, token);\n                sessionStorage.setItem(\n                  EXPIRED_TIME,\n                  new Date(new Date().getTime() + expiresIn * 1000),\n                );\n              }\n              store.dispatch(getUserInfo());\n              resolve();\n            } else {\n              const error = {\n                type: 'Không có quyền truy cập!',\n                message: 'Tài khoản này không có quyền truy cập vào hệ thống',\n              };\n              reject(error);\n            }\n          });\n        })\n        .catch(reject);\n    });\n\n  return {\n    isAuthenticated,\n    isAdmin,\n    isMasterDte,\n    isMasterXng,\n    isHcdcXng,\n    isUsername,\n    isHcdcDtr,\n    getAuthInfo,\n    login,\n    logout,\n  };\n};\n\nexport default useAuth;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}