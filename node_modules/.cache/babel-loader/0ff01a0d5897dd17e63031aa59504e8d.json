{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HIDE_TIMEOUT = undefined;\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nexports.OverlayComponent = OverlayComponent;\nexports.defaultFormat = defaultFormat;\nexports.defaultParse = defaultParse;\nvar _react = require('react');\nvar _react2 = _interopRequireDefault(_react);\nvar _DayPicker = require('./DayPicker');\nvar _DayPicker2 = _interopRequireDefault(_DayPicker);\nvar _DateUtils = require('./DateUtils');\nvar _ModifiersUtils = require('./ModifiersUtils');\nvar _keys = require('./keys');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n  return target;\n}\n\n// When clicking on a day cell, overlay will be hidden after this timeout\nvar HIDE_TIMEOUT = exports.HIDE_TIMEOUT = 100;\n\n/**\n * The default component used as Overlay.\n *\n * @param {Object} props\n */\nfunction OverlayComponent(_ref) {\n  var input = _ref.input,\n    selectedDay = _ref.selectedDay,\n    month = _ref.month,\n    children = _ref.children,\n    classNames = _ref.classNames,\n    props = _objectWithoutProperties(_ref, ['input', 'selectedDay', 'month', 'children', 'classNames']);\n  return _react2.default.createElement('div', _extends({\n    className: classNames.overlayWrapper\n  }, props), _react2.default.createElement('div', {\n    className: classNames.overlay\n  }, children));\n}\n\n/**\n * The default function used to format a Date to String, passed to the `format`\n * prop.\n * @param {Date} d\n * @return {String}\n */\nfunction defaultFormat(d) {\n  if ((0, _DateUtils.isDate)(d)) {\n    var year = d.getFullYear();\n    var month = '' + (d.getMonth() + 1);\n    var day = '' + d.getDate();\n    return year + '-' + month + '-' + day;\n  }\n  return '';\n}\n\n/**\n * The default function used to parse a String as Date, passed to the `parse`\n * prop.\n * @param {String} str\n * @return {Date}\n */\nfunction defaultParse(str) {\n  if (typeof str !== 'string') {\n    return undefined;\n  }\n  var split = str.split('-');\n  if (split.length !== 3) {\n    return undefined;\n  }\n  var year = parseInt(split[0], 10);\n  var month = parseInt(split[1], 10) - 1;\n  var day = parseInt(split[2], 10);\n  if (isNaN(year) || String(year).length > 4 || isNaN(month) || isNaN(day) || day <= 0 || day > 31 || month < 0 || month >= 12) {\n    return undefined;\n  }\n  return new Date(year, month, day, 12, 0, 0, 0); // always set noon to avoid time zone issues\n}\n\nvar DayPickerInput = function (_React$Component) {\n  _inherits(DayPickerInput, _React$Component);\n  function DayPickerInput(props) {\n    _classCallCheck(this, DayPickerInput);\n    var _this = _possibleConstructorReturn(this, (DayPickerInput.__proto__ || Object.getPrototypeOf(DayPickerInput)).call(this, props));\n    _this.input = null;\n    _this.daypicker = null;\n    _this.clickTimeout = null;\n    _this.hideTimeout = null;\n    _this.inputBlurTimeout = null;\n    _this.inputFocusTimeout = null;\n    _this.state = _this.getInitialStateFromProps(props);\n    _this.state.showOverlay = props.showOverlay;\n    _this.hideAfterDayClick = _this.hideAfterDayClick.bind(_this);\n    _this.handleInputClick = _this.handleInputClick.bind(_this);\n    _this.handleInputFocus = _this.handleInputFocus.bind(_this);\n    _this.handleInputBlur = _this.handleInputBlur.bind(_this);\n    _this.handleInputChange = _this.handleInputChange.bind(_this);\n    _this.handleInputKeyDown = _this.handleInputKeyDown.bind(_this);\n    _this.handleInputKeyUp = _this.handleInputKeyUp.bind(_this);\n    _this.handleDayClick = _this.handleDayClick.bind(_this);\n    _this.handleMonthChange = _this.handleMonthChange.bind(_this);\n    _this.handleOverlayFocus = _this.handleOverlayFocus.bind(_this);\n    _this.handleOverlayBlur = _this.handleOverlayBlur.bind(_this);\n    return _this;\n  }\n  _createClass(DayPickerInput, [{\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      var newState = {};\n\n      // Current props\n      var _props = this.props,\n        value = _props.value,\n        formatDate = _props.formatDate,\n        format = _props.format,\n        dayPickerProps = _props.dayPickerProps;\n\n      // Update the input value if `value`, `dayPickerProps.locale` or `format`\n      // props have changed\n\n      if (value !== prevProps.value || dayPickerProps.locale !== prevProps.dayPickerProps.locale || format !== prevProps.format) {\n        if ((0, _DateUtils.isDate)(value)) {\n          newState.value = formatDate(value, format, dayPickerProps.locale);\n        } else {\n          newState.value = value;\n        }\n      }\n\n      // Update the month if the months from props changed\n      var prevMonth = prevProps.dayPickerProps.month;\n      if (dayPickerProps.month && dayPickerProps.month !== prevMonth && !(0, _DateUtils.isSameMonth)(dayPickerProps.month, prevMonth)) {\n        newState.month = dayPickerProps.month;\n      }\n\n      // Updated the selected days from props if they changed\n      if (prevProps.dayPickerProps.selectedDays !== dayPickerProps.selectedDays) {\n        newState.selectedDays = dayPickerProps.selectedDays;\n      }\n      if (Object.keys(newState).length > 0) {\n        // eslint-disable-next-line react/no-did-update-set-state\n        this.setState(newState);\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      clearTimeout(this.clickTimeout);\n      clearTimeout(this.hideTimeout);\n      clearTimeout(this.inputFocusTimeout);\n      clearTimeout(this.inputBlurTimeout);\n      clearTimeout(this.overlayBlurTimeout);\n    }\n  }, {\n    key: 'getInitialMonthFromProps',\n    value: function getInitialMonthFromProps(props) {\n      var dayPickerProps = props.dayPickerProps,\n        format = props.format;\n      var day = void 0;\n      if (props.value) {\n        if ((0, _DateUtils.isDate)(props.value)) {\n          day = props.value;\n        } else {\n          day = props.parseDate(props.value, format, dayPickerProps.locale);\n        }\n      }\n      return dayPickerProps.initialMonth || dayPickerProps.month || day || new Date();\n    }\n  }, {\n    key: 'getInitialStateFromProps',\n    value: function getInitialStateFromProps(props) {\n      var dayPickerProps = props.dayPickerProps,\n        formatDate = props.formatDate,\n        format = props.format,\n        typedValue = props.typedValue;\n      var value = props.value;\n      if (props.value && (0, _DateUtils.isDate)(props.value)) {\n        value = formatDate(props.value, format, dayPickerProps.locale);\n      }\n      return {\n        value: value,\n        typedValue: typedValue,\n        month: this.getInitialMonthFromProps(props),\n        selectedDays: dayPickerProps.selectedDays\n      };\n    }\n  }, {\n    key: 'getInput',\n    value: function getInput() {\n      return this.input;\n    }\n  }, {\n    key: 'getDayPicker',\n    value: function getDayPicker() {\n      return this.daypicker;\n    }\n\n    /**\n     * Update the component's state and fire the `onDayChange` event passing the\n     * day's modifiers to it.\n     *\n     * @param {Date} day - Will be used for changing the month\n     * @param {String} value - Input field value\n     * @private\n     */\n  }, {\n    key: 'updateState',\n    value: function updateState(day, value, callback) {\n      var _this2 = this;\n      var _props2 = this.props,\n        dayPickerProps = _props2.dayPickerProps,\n        onDayChange = _props2.onDayChange;\n      this.setState({\n        month: day,\n        value: value,\n        typedValue: ''\n      }, function () {\n        if (callback) {\n          callback();\n        }\n        if (!onDayChange) {\n          return;\n        }\n        var modifiersObj = _extends({\n          disabled: dayPickerProps.disabledDays,\n          selected: dayPickerProps.selectedDays\n        }, dayPickerProps.modifiers);\n        var modifiers = (0, _ModifiersUtils.getModifiersForDay)(day, modifiersObj).reduce(function (obj, modifier) {\n          return _extends({}, obj, _defineProperty({}, modifier, true));\n        }, {});\n        onDayChange(day, modifiers, _this2);\n      });\n    }\n\n    /**\n     * Show the Day Picker overlay.\n     *\n     * @memberof DayPickerInput\n     */\n  }, {\n    key: 'showDayPicker',\n    value: function showDayPicker() {\n      var _this3 = this;\n      var _props3 = this.props,\n        parseDate = _props3.parseDate,\n        format = _props3.format,\n        dayPickerProps = _props3.dayPickerProps;\n      var _state = this.state,\n        value = _state.value,\n        showOverlay = _state.showOverlay;\n      if (showOverlay) {\n        return;\n      }\n      // Reset the current displayed month when showing the overlay\n      var month = value ? parseDate(value, format, dayPickerProps.locale) // Use the month in the input field\n      : this.getInitialMonthFromProps(this.props); // Restore the month from the props\n      this.setState(function (state) {\n        return {\n          showOverlay: true,\n          month: month || state.month\n        };\n      }, function () {\n        if (_this3.props.onDayPickerShow) _this3.props.onDayPickerShow();\n      });\n    }\n\n    /**\n     * Hide the Day Picker overlay\n     *\n     * @memberof DayPickerInput\n     */\n  }, {\n    key: 'hideDayPicker',\n    value: function hideDayPicker() {\n      var _this4 = this;\n      if (this.state.showOverlay === false) {\n        return;\n      }\n      this.setState({\n        showOverlay: false\n      }, function () {\n        if (_this4.props.onDayPickerHide) _this4.props.onDayPickerHide();\n      });\n    }\n  }, {\n    key: 'hideAfterDayClick',\n    value: function hideAfterDayClick() {\n      var _this5 = this;\n      if (!this.props.hideOnDayClick) {\n        return;\n      }\n      this.hideTimeout = setTimeout(function () {\n        _this5.overlayHasFocus = false;\n        _this5.hideDayPicker();\n      }, HIDE_TIMEOUT);\n    }\n  }, {\n    key: 'handleInputClick',\n    value: function handleInputClick(e) {\n      this.showDayPicker();\n      if (this.props.inputProps.onClick) {\n        e.persist();\n        this.props.inputProps.onClick(e);\n      }\n    }\n  }, {\n    key: 'handleInputFocus',\n    value: function handleInputFocus(e) {\n      var _this6 = this;\n      this.showDayPicker();\n      // Set `overlayHasFocus` after a timeout so the overlay can be hidden when\n      // the input is blurred\n      this.inputFocusTimeout = setTimeout(function () {\n        _this6.overlayHasFocus = false;\n      }, 2);\n      if (this.props.inputProps.onFocus) {\n        e.persist();\n        this.props.inputProps.onFocus(e);\n      }\n    }\n\n    // When the input is blurred, the overlay should disappear. However the input\n    // is blurred also when the user interacts with the overlay (e.g. the overlay\n    // get the focus by clicking it). In these cases, the overlay should not be\n    // hidden. There are different approaches to avoid hiding the overlay when\n    // this happens, but the only cross-browser hack we’ve found is to set all\n    // these timeouts in code before changing `overlayHasFocus`.\n  }, {\n    key: 'handleInputBlur',\n    value: function handleInputBlur(e) {\n      var _this7 = this;\n      this.inputBlurTimeout = setTimeout(function () {\n        if (!_this7.overlayHasFocus) {\n          _this7.hideDayPicker();\n        }\n      }, 1);\n      if (this.props.inputProps.onBlur) {\n        e.persist();\n        this.props.inputProps.onBlur(e);\n      }\n    }\n  }, {\n    key: 'handleOverlayFocus',\n    value: function handleOverlayFocus(e) {\n      e.preventDefault();\n      this.overlayHasFocus = true;\n      if (!this.props.keepFocus || !this.input || typeof this.input.focus !== 'function') {\n        return;\n      }\n      this.input.focus();\n    }\n  }, {\n    key: 'handleOverlayBlur',\n    value: function handleOverlayBlur() {\n      var _this8 = this;\n\n      // We need to set a timeout otherwise IE11 will hide the overlay when\n      // focusing it\n      this.overlayBlurTimeout = setTimeout(function () {\n        _this8.overlayHasFocus = false;\n      }, 3);\n    }\n  }, {\n    key: 'handleInputChange',\n    value: function handleInputChange(e) {\n      var _props4 = this.props,\n        dayPickerProps = _props4.dayPickerProps,\n        format = _props4.format,\n        inputProps = _props4.inputProps,\n        onDayChange = _props4.onDayChange,\n        parseDate = _props4.parseDate;\n      if (inputProps.onChange) {\n        e.persist();\n        inputProps.onChange(e);\n      }\n      var value = e.target.value;\n      if (value.trim() === '') {\n        this.setState({\n          value: value,\n          typedValue: ''\n        });\n        if (onDayChange) onDayChange(undefined, {}, this);\n        return;\n      }\n      var day = parseDate(value, format, dayPickerProps.locale);\n      if (!day) {\n        // Day is invalid: we save the value in the typedValue state\n        this.setState({\n          value: value,\n          typedValue: value\n        });\n        if (onDayChange) onDayChange(undefined, {}, this);\n        return;\n      }\n      this.updateState(day, value);\n    }\n  }, {\n    key: 'handleInputKeyDown',\n    value: function handleInputKeyDown(e) {\n      if (e.keyCode === _keys.TAB) {\n        this.hideDayPicker();\n      } else {\n        this.showDayPicker();\n      }\n      if (this.props.inputProps.onKeyDown) {\n        e.persist();\n        this.props.inputProps.onKeyDown(e);\n      }\n    }\n  }, {\n    key: 'handleInputKeyUp',\n    value: function handleInputKeyUp(e) {\n      if (e.keyCode === _keys.ESC) {\n        this.hideDayPicker();\n      } else {\n        this.showDayPicker();\n      }\n      if (this.props.inputProps.onKeyUp) {\n        e.persist();\n        this.props.inputProps.onKeyUp(e);\n      }\n    }\n  }, {\n    key: 'handleMonthChange',\n    value: function handleMonthChange(month) {\n      var _this9 = this;\n      this.setState({\n        month: month\n      }, function () {\n        if (_this9.props.dayPickerProps && _this9.props.dayPickerProps.onMonthChange) {\n          _this9.props.dayPickerProps.onMonthChange(month);\n        }\n      });\n    }\n  }, {\n    key: 'handleDayClick',\n    value: function handleDayClick(day, modifiers, e) {\n      var _this10 = this;\n      var _props5 = this.props,\n        clickUnselectsDay = _props5.clickUnselectsDay,\n        dayPickerProps = _props5.dayPickerProps,\n        onDayChange = _props5.onDayChange,\n        formatDate = _props5.formatDate,\n        format = _props5.format;\n      if (dayPickerProps.onDayClick) {\n        dayPickerProps.onDayClick(day, modifiers, e);\n      }\n\n      // Do nothing if the day is disabled\n      if (modifiers.disabled || dayPickerProps && dayPickerProps.classNames && modifiers[dayPickerProps.classNames.disabled]) {\n        return;\n      }\n\n      // If the clicked day is already selected, remove the clicked day\n      // from the selected days and empty the field value\n      if (modifiers.selected && clickUnselectsDay) {\n        var selectedDays = this.state.selectedDays;\n        if (Array.isArray(selectedDays)) {\n          selectedDays = selectedDays.slice(0);\n          var selectedDayIdx = selectedDays.indexOf(day);\n          selectedDays.splice(selectedDayIdx, 1);\n        } else if (selectedDays) {\n          selectedDays = null;\n        }\n        this.setState({\n          value: '',\n          typedValue: '',\n          selectedDays: selectedDays\n        }, this.hideAfterDayClick);\n        if (onDayChange) {\n          onDayChange(undefined, modifiers, this);\n        }\n        return;\n      }\n      var value = formatDate(day, format, dayPickerProps.locale);\n      this.setState({\n        value: value,\n        typedValue: '',\n        month: day\n      }, function () {\n        if (onDayChange) {\n          onDayChange(day, modifiers, _this10);\n        }\n        _this10.hideAfterDayClick();\n      });\n    }\n  }, {\n    key: 'renderOverlay',\n    value: function renderOverlay() {\n      var _this11 = this;\n      var _props6 = this.props,\n        classNames = _props6.classNames,\n        dayPickerProps = _props6.dayPickerProps,\n        parseDate = _props6.parseDate,\n        formatDate = _props6.formatDate,\n        format = _props6.format;\n      var _state2 = this.state,\n        selectedDays = _state2.selectedDays,\n        value = _state2.value;\n      var selectedDay = void 0;\n      if (!selectedDays && value) {\n        var day = parseDate(value, format, dayPickerProps.locale);\n        if (day) {\n          selectedDay = day;\n        }\n      } else if (selectedDays) {\n        selectedDay = selectedDays;\n      }\n      var onTodayButtonClick = void 0;\n      if (dayPickerProps.todayButton) {\n        // Set the current day when clicking the today button\n        onTodayButtonClick = function onTodayButtonClick() {\n          return _this11.updateState(new Date(), formatDate(new Date(), format, dayPickerProps.locale), _this11.hideAfterDayClick);\n        };\n      }\n      var Overlay = this.props.overlayComponent;\n      return _react2.default.createElement(Overlay, {\n        classNames: classNames,\n        month: this.state.month,\n        selectedDay: selectedDay,\n        input: this.input,\n        tabIndex: 0 // tabIndex is necessary to catch focus/blur events on Safari\n        ,\n        onFocus: this.handleOverlayFocus,\n        onBlur: this.handleOverlayBlur\n      }, _react2.default.createElement(_DayPicker2.default, _extends({\n        ref: function ref(el) {\n          return _this11.daypicker = el;\n        },\n        onTodayButtonClick: onTodayButtonClick\n      }, dayPickerProps, {\n        month: this.state.month,\n        selectedDays: selectedDay,\n        onDayClick: this.handleDayClick,\n        onMonthChange: this.handleMonthChange\n      })));\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this12 = this;\n      var Input = this.props.component;\n      var inputProps = this.props.inputProps;\n      return _react2.default.createElement('div', {\n        className: this.props.classNames.container,\n        style: this.props.style\n      }, _react2.default.createElement(Input, _extends({\n        ref: function ref(el) {\n          return _this12.input = el;\n        },\n        placeholder: this.props.placeholder\n      }, inputProps, {\n        value: this.state.value || this.state.typedValue,\n        onChange: this.handleInputChange,\n        onFocus: this.handleInputFocus,\n        onBlur: this.handleInputBlur,\n        onKeyDown: this.handleInputKeyDown,\n        onKeyUp: this.handleInputKeyUp,\n        onClick: !inputProps.disabled ? this.handleInputClick : undefined\n      })), this.state.showOverlay && this.renderOverlay());\n    }\n  }]);\n  return DayPickerInput;\n}(_react2.default.Component);\nDayPickerInput.defaultProps = {\n  dayPickerProps: {},\n  value: '',\n  typedValue: '',\n  placeholder: 'YYYY-M-D',\n  format: 'L',\n  formatDate: defaultFormat,\n  parseDate: defaultParse,\n  showOverlay: false,\n  hideOnDayClick: true,\n  clickUnselectsDay: false,\n  keepFocus: true,\n  component: 'input',\n  inputProps: {},\n  overlayComponent: OverlayComponent,\n  classNames: {\n    container: 'DayPickerInput',\n    overlayWrapper: 'DayPickerInput-OverlayWrapper',\n    overlay: 'DayPickerInput-Overlay'\n  }\n};\nexports.default = DayPickerInput;","map":{"version":3,"sources":["../src/DayPickerInput.js"],"names":["HIDE_TIMEOUT","OverlayComponent","input","selectedDay","month","children","classNames","props","defaultFormat","d","year","getFullYear","getMonth","day","getDate","defaultParse","str","undefined","split","length","parseInt","isNaN","String","Date","DayPickerInput","React","Component","daypicker","clickTimeout","hideTimeout","inputBlurTimeout","inputFocusTimeout","defaultProps","dayPickerProps","value","typedValue","placeholder","format","formatDate","parseDate","showOverlay","hideOnDayClick","clickUnselectsDay","keepFocus","component","inputProps","overlayComponent","container","overlayWrapper","overlay","state","getInitialStateFromProps","hideAfterDayClick","bind","handleInputClick","handleInputFocus","handleInputBlur","handleInputChange","handleInputKeyDown","handleInputKeyUp","handleDayClick","handleMonthChange","handleOverlayFocus","handleOverlayBlur","prevProps","newState","locale","prevMonth","selectedDays","Object","keys","setState","clearTimeout","overlayBlurTimeout","initialMonth","getInitialMonthFromProps","callback","onDayChange","disabled","disabledDays","selected","modifiers","modifiersObj","reduce","obj","modifier","onDayPickerShow","onDayPickerHide","overlayHasFocus","hideDayPicker","e","showDayPicker","onClick","persist","onFocus","onBlur","preventDefault","focus","onChange","target","trim","updateState","keyCode","TAB","onKeyDown","ESC","onKeyUp","onMonthChange","onDayClick","Array","isArray","slice","selectedDayIdx","indexOf","splice","onTodayButtonClick","todayButton","Overlay","el","Input","renderOverlay"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport DayPicker from './DayPicker';\nimport { isSameMonth, isDate } from './DateUtils';\nimport { getModifiersForDay } from './ModifiersUtils';\nimport { ESC, TAB } from './keys';\n\n// When clicking on a day cell, overlay will be hidden after this timeout\nexport const HIDE_TIMEOUT = 100;\n\n/**\n * The default component used as Overlay.\n *\n * @param {Object} props\n */\nexport function OverlayComponent({\n  input,\n  selectedDay,\n  month,\n  children,\n  classNames,\n  ...props\n}) {\n  return (\n    <div className={classNames.overlayWrapper} {...props}>\n      <div className={classNames.overlay}>{children}</div>\n    </div>\n  );\n}\n\nOverlayComponent.propTypes = {\n  input: PropTypes.any,\n  selectedDay: PropTypes.any,\n  month: PropTypes.instanceOf(Date),\n  children: PropTypes.node,\n  classNames: PropTypes.object,\n};\n\n/**\n * The default function used to format a Date to String, passed to the `format`\n * prop.\n * @param {Date} d\n * @return {String}\n */\nexport function defaultFormat(d) {\n  if (isDate(d)) {\n    const year = d.getFullYear();\n    const month = `${d.getMonth() + 1}`;\n    const day = `${d.getDate()}`;\n    return `${year}-${month}-${day}`;\n  }\n  return '';\n}\n\n/**\n * The default function used to parse a String as Date, passed to the `parse`\n * prop.\n * @param {String} str\n * @return {Date}\n */\nexport function defaultParse(str) {\n  if (typeof str !== 'string') {\n    return undefined;\n  }\n  const split = str.split('-');\n  if (split.length !== 3) {\n    return undefined;\n  }\n  const year = parseInt(split[0], 10);\n  const month = parseInt(split[1], 10) - 1;\n  const day = parseInt(split[2], 10);\n  if (\n    isNaN(year) ||\n    String(year).length > 4 ||\n    isNaN(month) ||\n    isNaN(day) ||\n    day <= 0 ||\n    day > 31 ||\n    month < 0 ||\n    month >= 12\n  ) {\n    return undefined;\n  }\n\n  return new Date(year, month, day, 12, 0, 0, 0); // always set noon to avoid time zone issues\n}\n\nexport default class DayPickerInput extends React.Component {\n  input = null;\n\n  daypicker = null;\n\n  clickTimeout = null;\n\n  hideTimeout = null;\n\n  inputBlurTimeout = null;\n\n  inputFocusTimeout = null;\n\n  static propTypes = {\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]),\n    inputProps: PropTypes.object,\n    placeholder: PropTypes.string,\n\n    format: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.arrayOf(PropTypes.string),\n    ]),\n\n    formatDate: PropTypes.func,\n    parseDate: PropTypes.func,\n    typedValue: PropTypes.string,\n\n    showOverlay: PropTypes.bool,\n    dayPickerProps: PropTypes.object,\n    hideOnDayClick: PropTypes.bool,\n    clickUnselectsDay: PropTypes.bool,\n    keepFocus: PropTypes.bool,\n    component: PropTypes.any,\n    overlayComponent: PropTypes.any,\n\n    style: PropTypes.object,\n    classNames: PropTypes.shape({\n      container: PropTypes.string,\n      overlayWrapper: PropTypes.string,\n      overlay: PropTypes.string.isRequired,\n    }),\n\n    onDayChange: PropTypes.func,\n    onDayPickerHide: PropTypes.func,\n    onDayPickerShow: PropTypes.func,\n    onChange: PropTypes.func,\n    onClick: PropTypes.func,\n    onFocus: PropTypes.func,\n    onBlur: PropTypes.func,\n    onKeyUp: PropTypes.func,\n  };\n\n  static defaultProps = {\n    dayPickerProps: {},\n    value: '',\n    typedValue: '',\n    placeholder: 'YYYY-M-D',\n    format: 'L',\n    formatDate: defaultFormat,\n    parseDate: defaultParse,\n    showOverlay: false,\n    hideOnDayClick: true,\n    clickUnselectsDay: false,\n    keepFocus: true,\n    component: 'input',\n    inputProps: {},\n    overlayComponent: OverlayComponent,\n    classNames: {\n      container: 'DayPickerInput',\n      overlayWrapper: 'DayPickerInput-OverlayWrapper',\n      overlay: 'DayPickerInput-Overlay',\n    },\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = this.getInitialStateFromProps(props);\n    this.state.showOverlay = props.showOverlay;\n\n    this.hideAfterDayClick = this.hideAfterDayClick.bind(this);\n    this.handleInputClick = this.handleInputClick.bind(this);\n    this.handleInputFocus = this.handleInputFocus.bind(this);\n    this.handleInputBlur = this.handleInputBlur.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleInputKeyDown = this.handleInputKeyDown.bind(this);\n    this.handleInputKeyUp = this.handleInputKeyUp.bind(this);\n    this.handleDayClick = this.handleDayClick.bind(this);\n    this.handleMonthChange = this.handleMonthChange.bind(this);\n    this.handleOverlayFocus = this.handleOverlayFocus.bind(this);\n    this.handleOverlayBlur = this.handleOverlayBlur.bind(this);\n  }\n\n  componentDidUpdate(prevProps) {\n    const newState = {};\n\n    // Current props\n    const { value, formatDate, format, dayPickerProps } = this.props;\n\n    // Update the input value if `value`, `dayPickerProps.locale` or `format`\n    // props have changed\n    if (\n      value !== prevProps.value ||\n      dayPickerProps.locale !== prevProps.dayPickerProps.locale ||\n      format !== prevProps.format\n    ) {\n      if (isDate(value)) {\n        newState.value = formatDate(value, format, dayPickerProps.locale);\n      } else {\n        newState.value = value;\n      }\n    }\n\n    // Update the month if the months from props changed\n    const prevMonth = prevProps.dayPickerProps.month;\n    if (\n      dayPickerProps.month &&\n      dayPickerProps.month !== prevMonth &&\n      !isSameMonth(dayPickerProps.month, prevMonth)\n    ) {\n      newState.month = dayPickerProps.month;\n    }\n\n    // Updated the selected days from props if they changed\n    if (prevProps.dayPickerProps.selectedDays !== dayPickerProps.selectedDays) {\n      newState.selectedDays = dayPickerProps.selectedDays;\n    }\n\n    if (Object.keys(newState).length > 0) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState(newState);\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.clickTimeout);\n    clearTimeout(this.hideTimeout);\n    clearTimeout(this.inputFocusTimeout);\n    clearTimeout(this.inputBlurTimeout);\n    clearTimeout(this.overlayBlurTimeout);\n  }\n\n  getInitialMonthFromProps(props) {\n    const { dayPickerProps, format } = props;\n    let day;\n    if (props.value) {\n      if (isDate(props.value)) {\n        day = props.value;\n      } else {\n        day = props.parseDate(props.value, format, dayPickerProps.locale);\n      }\n    }\n    return (\n      dayPickerProps.initialMonth || dayPickerProps.month || day || new Date()\n    );\n  }\n\n  getInitialStateFromProps(props) {\n    const { dayPickerProps, formatDate, format, typedValue } = props;\n    let { value } = props;\n    if (props.value && isDate(props.value)) {\n      value = formatDate(props.value, format, dayPickerProps.locale);\n    }\n\n    return {\n      value,\n      typedValue,\n      month: this.getInitialMonthFromProps(props),\n      selectedDays: dayPickerProps.selectedDays,\n    };\n  }\n\n  getInput() {\n    return this.input;\n  }\n\n  getDayPicker() {\n    return this.daypicker;\n  }\n\n  /**\n   * Update the component's state and fire the `onDayChange` event passing the\n   * day's modifiers to it.\n   *\n   * @param {Date} day - Will be used for changing the month\n   * @param {String} value - Input field value\n   * @private\n   */\n  updateState(day, value, callback) {\n    const { dayPickerProps, onDayChange } = this.props;\n    this.setState({ month: day, value, typedValue: '' }, () => {\n      if (callback) {\n        callback();\n      }\n      if (!onDayChange) {\n        return;\n      }\n      const modifiersObj = {\n        disabled: dayPickerProps.disabledDays,\n        selected: dayPickerProps.selectedDays,\n        ...dayPickerProps.modifiers,\n      };\n      const modifiers = getModifiersForDay(day, modifiersObj).reduce(\n        (obj, modifier) => ({\n          ...obj,\n          [modifier]: true,\n        }),\n        {}\n      );\n      onDayChange(day, modifiers, this);\n    });\n  }\n\n  /**\n   * Show the Day Picker overlay.\n   *\n   * @memberof DayPickerInput\n   */\n  showDayPicker() {\n    const { parseDate, format, dayPickerProps } = this.props;\n    const { value, showOverlay } = this.state;\n    if (showOverlay) {\n      return;\n    }\n    // Reset the current displayed month when showing the overlay\n    const month = value\n      ? parseDate(value, format, dayPickerProps.locale) // Use the month in the input field\n      : this.getInitialMonthFromProps(this.props); // Restore the month from the props\n    this.setState(\n      state => ({\n        showOverlay: true,\n        month: month || state.month,\n      }),\n      () => {\n        if (this.props.onDayPickerShow) this.props.onDayPickerShow();\n      }\n    );\n  }\n\n  /**\n   * Hide the Day Picker overlay\n   *\n   * @memberof DayPickerInput\n   */\n  hideDayPicker() {\n    if (this.state.showOverlay === false) {\n      return;\n    }\n    this.setState({ showOverlay: false }, () => {\n      if (this.props.onDayPickerHide) this.props.onDayPickerHide();\n    });\n  }\n\n  hideAfterDayClick() {\n    if (!this.props.hideOnDayClick) {\n      return;\n    }\n    this.hideTimeout = setTimeout(() => {\n      this.overlayHasFocus = false;\n      this.hideDayPicker();\n    }, HIDE_TIMEOUT);\n  }\n\n  handleInputClick(e) {\n    this.showDayPicker();\n    if (this.props.inputProps.onClick) {\n      e.persist();\n      this.props.inputProps.onClick(e);\n    }\n  }\n\n  handleInputFocus(e) {\n    this.showDayPicker();\n    // Set `overlayHasFocus` after a timeout so the overlay can be hidden when\n    // the input is blurred\n    this.inputFocusTimeout = setTimeout(() => {\n      this.overlayHasFocus = false;\n    }, 2);\n    if (this.props.inputProps.onFocus) {\n      e.persist();\n      this.props.inputProps.onFocus(e);\n    }\n  }\n\n  // When the input is blurred, the overlay should disappear. However the input\n  // is blurred also when the user interacts with the overlay (e.g. the overlay\n  // get the focus by clicking it). In these cases, the overlay should not be\n  // hidden. There are different approaches to avoid hiding the overlay when\n  // this happens, but the only cross-browser hack we’ve found is to set all\n  // these timeouts in code before changing `overlayHasFocus`.\n  handleInputBlur(e) {\n    this.inputBlurTimeout = setTimeout(() => {\n      if (!this.overlayHasFocus) {\n        this.hideDayPicker();\n      }\n    }, 1);\n    if (this.props.inputProps.onBlur) {\n      e.persist();\n      this.props.inputProps.onBlur(e);\n    }\n  }\n\n  handleOverlayFocus(e) {\n    e.preventDefault();\n    this.overlayHasFocus = true;\n    if (\n      !this.props.keepFocus ||\n      !this.input ||\n      typeof this.input.focus !== 'function'\n    ) {\n      return;\n    }\n    this.input.focus();\n  }\n\n  handleOverlayBlur() {\n    // We need to set a timeout otherwise IE11 will hide the overlay when\n    // focusing it\n    this.overlayBlurTimeout = setTimeout(() => {\n      this.overlayHasFocus = false;\n    }, 3);\n  }\n\n  handleInputChange(e) {\n    const {\n      dayPickerProps,\n      format,\n      inputProps,\n      onDayChange,\n      parseDate,\n    } = this.props;\n    if (inputProps.onChange) {\n      e.persist();\n      inputProps.onChange(e);\n    }\n    const { value } = e.target;\n    if (value.trim() === '') {\n      this.setState({ value, typedValue: '' });\n      if (onDayChange) onDayChange(undefined, {}, this);\n      return;\n    }\n    const day = parseDate(value, format, dayPickerProps.locale);\n    if (!day) {\n      // Day is invalid: we save the value in the typedValue state\n      this.setState({ value, typedValue: value });\n      if (onDayChange) onDayChange(undefined, {}, this);\n      return;\n    }\n    this.updateState(day, value);\n  }\n\n  handleInputKeyDown(e) {\n    if (e.keyCode === TAB) {\n      this.hideDayPicker();\n    } else {\n      this.showDayPicker();\n    }\n    if (this.props.inputProps.onKeyDown) {\n      e.persist();\n      this.props.inputProps.onKeyDown(e);\n    }\n  }\n\n  handleInputKeyUp(e) {\n    if (e.keyCode === ESC) {\n      this.hideDayPicker();\n    } else {\n      this.showDayPicker();\n    }\n    if (this.props.inputProps.onKeyUp) {\n      e.persist();\n      this.props.inputProps.onKeyUp(e);\n    }\n  }\n\n  handleMonthChange(month) {\n    this.setState({ month }, () => {\n      if (\n        this.props.dayPickerProps &&\n        this.props.dayPickerProps.onMonthChange\n      ) {\n        this.props.dayPickerProps.onMonthChange(month);\n      }\n    });\n  }\n\n  handleDayClick(day, modifiers, e) {\n    const {\n      clickUnselectsDay,\n      dayPickerProps,\n      onDayChange,\n      formatDate,\n      format,\n    } = this.props;\n    if (dayPickerProps.onDayClick) {\n      dayPickerProps.onDayClick(day, modifiers, e);\n    }\n\n    // Do nothing if the day is disabled\n    if (\n      modifiers.disabled ||\n      (dayPickerProps &&\n        dayPickerProps.classNames &&\n        modifiers[dayPickerProps.classNames.disabled])\n    ) {\n      return;\n    }\n\n    // If the clicked day is already selected, remove the clicked day\n    // from the selected days and empty the field value\n    if (modifiers.selected && clickUnselectsDay) {\n      let { selectedDays } = this.state;\n      if (Array.isArray(selectedDays)) {\n        selectedDays = selectedDays.slice(0);\n        const selectedDayIdx = selectedDays.indexOf(day);\n        selectedDays.splice(selectedDayIdx, 1);\n      } else if (selectedDays) {\n        selectedDays = null;\n      }\n\n      this.setState(\n        { value: '', typedValue: '', selectedDays },\n        this.hideAfterDayClick\n      );\n\n      if (onDayChange) {\n        onDayChange(undefined, modifiers, this);\n      }\n      return;\n    }\n\n    const value = formatDate(day, format, dayPickerProps.locale);\n    this.setState({ value, typedValue: '', month: day }, () => {\n      if (onDayChange) {\n        onDayChange(day, modifiers, this);\n      }\n      this.hideAfterDayClick();\n    });\n  }\n\n  renderOverlay() {\n    const {\n      classNames,\n      dayPickerProps,\n      parseDate,\n      formatDate,\n      format,\n    } = this.props;\n    const { selectedDays, value } = this.state;\n    let selectedDay;\n    if (!selectedDays && value) {\n      const day = parseDate(value, format, dayPickerProps.locale);\n      if (day) {\n        selectedDay = day;\n      }\n    } else if (selectedDays) {\n      selectedDay = selectedDays;\n    }\n    let onTodayButtonClick;\n    if (dayPickerProps.todayButton) {\n      // Set the current day when clicking the today button\n      onTodayButtonClick = () =>\n        this.updateState(\n          new Date(),\n          formatDate(new Date(), format, dayPickerProps.locale),\n          this.hideAfterDayClick\n        );\n    }\n    const Overlay = this.props.overlayComponent;\n    return (\n      <Overlay\n        classNames={classNames}\n        month={this.state.month}\n        selectedDay={selectedDay}\n        input={this.input}\n        tabIndex={0} // tabIndex is necessary to catch focus/blur events on Safari\n        onFocus={this.handleOverlayFocus}\n        onBlur={this.handleOverlayBlur}\n      >\n        <DayPicker\n          ref={el => (this.daypicker = el)}\n          onTodayButtonClick={onTodayButtonClick}\n          {...dayPickerProps}\n          month={this.state.month}\n          selectedDays={selectedDay}\n          onDayClick={this.handleDayClick}\n          onMonthChange={this.handleMonthChange}\n        />\n      </Overlay>\n    );\n  }\n\n  render() {\n    const Input = this.props.component;\n    const { inputProps } = this.props;\n    return (\n      <div className={this.props.classNames.container} style={this.props.style}>\n        <Input\n          ref={el => (this.input = el)}\n          placeholder={this.props.placeholder}\n          {...inputProps}\n          value={this.state.value || this.state.typedValue}\n          onChange={this.handleInputChange}\n          onFocus={this.handleInputFocus}\n          onBlur={this.handleInputBlur}\n          onKeyDown={this.handleInputKeyDown}\n          onKeyUp={this.handleInputKeyUp}\n          onClick={!inputProps.disabled ? this.handleInputClick : undefined}\n        />\n        {this.state.showOverlay && this.renderOverlay()}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}