{"ast":null,"code":"import { toast } from 'react-toastify';\nimport httpClient from 'app/utils/http-client';\nimport apiLinks from 'app/utils/api-links';\nimport { announceTreatmentError } from 'treatment/utils/helpers';\nimport types from './types';\nconst getProfileListRequest = () => ({\n  type: types.GET_PROFILE_LIST_REQUEST\n});\nconst getProfileListSuccess = response => ({\n  type: types.GET_PROFILE_LIST_SUCCESS,\n  payload: response\n});\nconst getProfileListFailure = error => ({\n  type: types.GET_PROFILE_LIST_FAILURE,\n  payload: error\n});\nconst getProfileList = arg => dispatch => new Promise((resolve, reject) => {\n  dispatch(getProfileListRequest());\n  httpClient.callApi({\n    url: apiLinks.treatment.profileList.get,\n    params: {\n      ...arg\n    }\n  }).then(response => {\n    dispatch(getProfileListSuccess(response.data));\n    resolve();\n  }).catch(error => {\n    dispatch(getProfileListFailure(error));\n    reject();\n  });\n});\nconst createProfileListRequest = () => ({\n  type: types.CREATE_PROFILE_LIST_REQUEST\n});\nconst createProfileListSuccess = response => ({\n  type: types.CREATE_PROFILE_LIST_SUCCESS,\n  payload: response\n});\nconst createProfileListFailure = error => ({\n  type: types.CREATE_PROFILE_LIST_FAILURE,\n  payload: error\n});\nconst createProfileList = data => dispatch => new Promise((resolve, reject) => {\n  dispatch(createProfileListRequest());\n  httpClient.callApi({\n    method: 'POST',\n    url: apiLinks.treatment.profile,\n    data\n  }).then(response => {\n    dispatch(createProfileListSuccess(response));\n    toast.success('Thành công');\n    resolve();\n  }).catch(error => {\n    announceTreatmentError(error);\n    dispatch(createProfileListFailure(error));\n    reject();\n  });\n});\nconst createNewProfileRequest = () => ({\n  type: types.TM_CREATE_NEW_PROFILE_REQUEST\n});\nconst createNewProfileSuccess = response => ({\n  type: types.TM_CREATE_NEW_PROFILE_SUCCESS,\n  payload: response\n});\nconst createNewProfileFailure = error => ({\n  type: types.TM_CREATE_NEW_PROFILE_FAILURE,\n  payload: error\n});\nconst createNewProfile = data => dispatch => new Promise((resolve, reject) => {\n  dispatch(createNewProfileRequest());\n  httpClient.callApi({\n    method: 'POST',\n    url: apiLinks.treatment.profileList.createNewProfile,\n    data\n  }).then(response => {\n    dispatch(createNewProfileSuccess(response));\n    toast.success('Thành công');\n    resolve();\n  }).catch(error => {\n    announceTreatmentError(error);\n    dispatch(createNewProfileFailure(error));\n    reject();\n  });\n});\nexport { getProfileList, createProfileList, createNewProfile };","map":{"version":3,"names":["toast","httpClient","apiLinks","announceTreatmentError","types","getProfileListRequest","type","GET_PROFILE_LIST_REQUEST","getProfileListSuccess","response","GET_PROFILE_LIST_SUCCESS","payload","getProfileListFailure","error","GET_PROFILE_LIST_FAILURE","getProfileList","arg","dispatch","Promise","resolve","reject","callApi","url","treatment","profileList","get","params","then","data","catch","createProfileListRequest","CREATE_PROFILE_LIST_REQUEST","createProfileListSuccess","CREATE_PROFILE_LIST_SUCCESS","createProfileListFailure","CREATE_PROFILE_LIST_FAILURE","createProfileList","method","profile","success","createNewProfileRequest","TM_CREATE_NEW_PROFILE_REQUEST","createNewProfileSuccess","TM_CREATE_NEW_PROFILE_SUCCESS","createNewProfileFailure","TM_CREATE_NEW_PROFILE_FAILURE","createNewProfile"],"sources":["H:/BAKCO/pj/data reconciliation/src/treatment/actions/profile-list.js"],"sourcesContent":["import { toast } from 'react-toastify';\n\nimport httpClient from 'app/utils/http-client';\nimport apiLinks from 'app/utils/api-links';\n\nimport { announceTreatmentError } from 'treatment/utils/helpers';\n\nimport types from './types';\n\nconst getProfileListRequest = () => ({\n  type: types.GET_PROFILE_LIST_REQUEST,\n});\nconst getProfileListSuccess = (response) => ({\n  type: types.GET_PROFILE_LIST_SUCCESS,\n  payload: response,\n});\nconst getProfileListFailure = (error) => ({\n  type: types.GET_PROFILE_LIST_FAILURE,\n  payload: error,\n});\n\nconst getProfileList = (arg) => (dispatch) =>\n  new Promise((resolve, reject) => {\n    dispatch(getProfileListRequest());\n    httpClient\n      .callApi({\n        url: apiLinks.treatment.profileList.get,\n        params: { ...arg },\n      })\n      .then((response) => {\n        dispatch(getProfileListSuccess(response.data));\n        resolve();\n      })\n      .catch((error) => {\n        dispatch(getProfileListFailure(error));\n        reject();\n      });\n  });\n\nconst createProfileListRequest = () => ({\n  type: types.CREATE_PROFILE_LIST_REQUEST,\n});\nconst createProfileListSuccess = (response) => ({\n  type: types.CREATE_PROFILE_LIST_SUCCESS,\n  payload: response,\n});\nconst createProfileListFailure = (error) => ({\n  type: types.CREATE_PROFILE_LIST_FAILURE,\n  payload: error,\n});\n\nconst createProfileList = (data) => (dispatch) =>\n  new Promise((resolve, reject) => {\n    dispatch(createProfileListRequest());\n    httpClient\n      .callApi({\n        method: 'POST',\n        url: apiLinks.treatment.profile,\n        data,\n      })\n      .then((response) => {\n        dispatch(createProfileListSuccess(response));\n        toast.success('Thành công');\n        resolve();\n      })\n      .catch((error) => {\n        announceTreatmentError(error);\n        dispatch(createProfileListFailure(error));\n        reject();\n      });\n  });\nconst createNewProfileRequest = () => ({\n  type: types.TM_CREATE_NEW_PROFILE_REQUEST,\n});\nconst createNewProfileSuccess = (response) => ({\n  type: types.TM_CREATE_NEW_PROFILE_SUCCESS,\n  payload: response,\n});\nconst createNewProfileFailure = (error) => ({\n  type: types.TM_CREATE_NEW_PROFILE_FAILURE,\n  payload: error,\n});\n\nconst createNewProfile = (data) => (dispatch) =>\n  new Promise((resolve, reject) => {\n    dispatch(createNewProfileRequest());\n    httpClient\n      .callApi({\n        method: 'POST',\n        url: apiLinks.treatment.profileList.createNewProfile,\n        data,\n      })\n      .then((response) => {\n        dispatch(createNewProfileSuccess(response));\n        toast.success('Thành công');\n        resolve();\n      })\n      .catch((error) => {\n        announceTreatmentError(error);\n        dispatch(createNewProfileFailure(error));\n        reject();\n      });\n  });\n\nexport { getProfileList, createProfileList, createNewProfile };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}